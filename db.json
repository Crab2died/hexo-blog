{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/dsolvers.png","path":"dsolvers.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/db/mysql_logo.png","path":"images/db/mysql_logo.png","modified":1,"renderable":0},{"_id":"source/images/db/redis_logo.png","path":"images/db/redis_logo.png","modified":1,"renderable":0},{"_id":"source/images/hadoop/hadoop_logo.jpg","path":"images/hadoop/hadoop_logo.jpg","modified":1,"renderable":0},{"_id":"source/images/hbase/hbase_logo.png","path":"images/hbase/hbase_logo.png","modified":1,"renderable":0},{"_id":"source/images/hbase/hbase_logo_00.png","path":"images/hbase/hbase_logo_00.png","modified":1,"renderable":0},{"_id":"source/images/hbase/hbase_logo_01.png","path":"images/hbase/hbase_logo_01.png","modified":1,"renderable":0},{"_id":"source/images/java/class_loader.png","path":"images/java/class_loader.png","modified":1,"renderable":0},{"_id":"source/images/java/java_01.jpg","path":"images/java/java_01.jpg","modified":1,"renderable":0},{"_id":"source/images/java-collection-frame/ConcurrentHashMap.png","path":"images/java-collection-frame/ConcurrentHashMap.png","modified":1,"renderable":0},{"_id":"source/images/material/book.jpg","path":"images/material/book.jpg","modified":1,"renderable":0},{"_id":"source/images/material/grar.jpg","path":"images/material/grar.jpg","modified":1,"renderable":0},{"_id":"source/images/material/super_computer.jpg","path":"images/material/super_computer.jpg","modified":1,"renderable":0},{"_id":"source/images/net/restful_api.jpeg","path":"images/net/restful_api.jpeg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-xups/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/jelon.jpg","path":"img/jelon.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/scrolltoparrow.png","path":"img/scrolltoparrow.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/share.png","path":"img/share.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/url.png","path":"img/url.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_jelon.png","path":"img/wechat_jelon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_mp.jpg","path":"img/wechat_mp.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_pay.png","path":"img/wechat_pay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/comment.js","path":"js/comment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/html5.js","path":"js/html5.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"source/images/material/tech_wave.jpg","path":"images/material/tech_wave.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-xups/source/img/no_found.png","path":"img/no_found.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/unsigned_avatar.jpg","path":"img/unsigned_avatar.jpg","modified":1,"renderable":1},{"_id":"source/images/hadoop/hadoop_logo_01.png","path":"images/hadoop/hadoop_logo_01.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-xups/source/img/lab/banner.jpg","path":"img/lab/banner.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/0.jpg","path":"img/thumbnail/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/1.jpg","path":"img/thumbnail/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/4.jpg","path":"img/thumbnail/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/5.jpg","path":"img/thumbnail/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/6.jpg","path":"img/thumbnail/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/7.jpg","path":"img/thumbnail/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/8.jpg","path":"img/thumbnail/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/9.jpg","path":"img/thumbnail/9.jpg","modified":1,"renderable":1},{"_id":"source/images/db/redis.jpeg","path":"images/db/redis.jpeg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.ttf","path":"css/fonts/icomoon/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/2.jpg","path":"img/thumbnail/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/3.jpg","path":"img/thumbnail/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/jquery/jquery-2.2.0.min.js","path":"js/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"source/images/net/web.png","path":"images/net/web.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-xups/source/css/awesome/css/font-awesome.min.css","path":"css/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.otf","path":"css/fonts/homizio-nova/italic.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.ttf","path":"css/fonts/homizio-nova/italic.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.otf","path":"css/fonts/homizio-nova/light.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.otf","path":"css/fonts/homizio-nova/light_italic.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.ttf","path":"css/fonts/homizio-nova/light_italic.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.otf","path":"css/fonts/homizio-nova/regular.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.eot","path":"css/fonts/icomoon/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.svg","path":"css/fonts/icomoon/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.woff","path":"css/fonts/icomoon/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.woff","path":"css/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.woff2","path":"css/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.ttf","path":"css/fonts/homizio-nova/light.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.ttf","path":"css/fonts/homizio-nova/regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/FontAwesome.otf","path":"css/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.eot","path":"css/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.ttf","path":"css/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/images/material/maoxian.png","path":"images/material/maoxian.png","modified":1,"renderable":0},{"_id":"source/images/material/tech_tool.png","path":"images/material/tech_tool.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.svg","path":"css/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/material/gaoxiao.png","path":"images/material/gaoxiao.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/dsolvers.png","hash":"c6f5f164b1445fbf639f516166a4606e31c9525e","modified":1544541104626},{"_id":"source/favicon.ico","hash":"a7ee8b3d15776a2e870a1beea82bc221f9566585","modified":1544541104627},{"_id":"themes/hexo-theme-xups/README.md","hash":"7bc48e43dad4fb62776b150bbaf37c7cb4a4c5e2","modified":1544369267070},{"_id":"themes/hexo-theme-xups/_config.yml","hash":"d642fcbc8f93766d259aceb9fdfa8ff0eba8a451","modified":1544701401292},{"_id":"source/_posts/database.md","hash":"10d16067d263174945c9fecdeef317b2d3392910","modified":1544541104615},{"_id":"source/_posts/interview-experience.md","hash":"f32f462603245e1c8388aeefc1e53e748474d1a1","modified":1544627052663},{"_id":"source/_posts/java-classloader.md","hash":"eb59671359899250a2e63ae01eae176d23039bed","modified":1544620335588},{"_id":"source/_posts/java-collection-frame.md","hash":"3a339d9f7e1eb7fe6aa472834c9ada0cf13e89ec","modified":1544541104617},{"_id":"source/_posts/java-compile-and-optimize.md","hash":"3f0d1f0ccc53b3e711ad1f98ae1b356275ceb8c1","modified":1544630227862},{"_id":"source/_posts/java-concurrent.md","hash":"11d31a7b53f17fbde97e529d09ea8461615e49c3","modified":1544629946530},{"_id":"source/_posts/java-gc.md","hash":"b37854d653fc5ec8755309d18729ce37e7009caf","modified":1544620335589},{"_id":"source/_posts/java-memory-model.md","hash":"9f3b1d67a3cbf81cb67a8fb90f6d35e67b156613","modified":1544629597695},{"_id":"source/_posts/java-monitor-tools.md","hash":"4a3cfc08c71a6391ba5aa696437de91456e36705","modified":1544701401283},{"_id":"source/_posts/pseudo-distributed-hadoop-install.md","hash":"ff7d5b5033d607823a94533072c61006c460e1df","modified":1544701401290},{"_id":"source/_posts/pseudo-distributed-hbase-install.md","hash":"e0a2ea7256457c7d169c1b2680e7f3c022aeafaa","modified":1544627052767},{"_id":"source/_posts/redis-cache-summarize.md","hash":"f76b49ddc418b4b972f24c01997ee55fb2b7087d","modified":1544541104623},{"_id":"source/_posts/restful-http.md","hash":"27f16ca2dc8f8f0c7985cb54cf56fb4b7444f49b","modified":1544541104623},{"_id":"source/_posts/spring-intergration-websocket.md","hash":"15831acebd385b7246f96c96692f588ed071578f","modified":1544541104624},{"_id":"source/about/index.md","hash":"32707ad1a27069c7f30fdbd645da15d25910fb69","modified":1544541104625},{"_id":"themes/hexo-theme-xups/__scaffolds/draft.md","hash":"eef222e6da6ad30e31ca264743f3e0c37db97ad0","modified":1544369267071},{"_id":"themes/hexo-theme-xups/__scaffolds/page.md","hash":"892cedeb7b62a73e72a3b369daf2bc63dfee47dc","modified":1544369267071},{"_id":"themes/hexo-theme-xups/__scaffolds/post.md","hash":"eef222e6da6ad30e31ca264743f3e0c37db97ad0","modified":1544369267071},{"_id":"themes/hexo-theme-xups/layout/archive.ejs","hash":"7375cd5e27be00c1a34b97e25086f261ba4b24f4","modified":1544369267086},{"_id":"themes/hexo-theme-xups/layout/category.ejs","hash":"1607af608586d69930e1e389e3fcf2a24b701fad","modified":1544369267087},{"_id":"themes/hexo-theme-xups/layout/layout.ejs","hash":"6ef7e282560b8cd3a99a0263a70bb9cc36b163a8","modified":1544528867739},{"_id":"themes/hexo-theme-xups/layout/page.ejs","hash":"66c8c314d4083fff38568f2900d98223c407d5ef","modified":1544369267088},{"_id":"themes/hexo-theme-xups/layout/index.ejs","hash":"5844cc612c445e5276981cfd57a4072c5ea5fbde","modified":1544369267087},{"_id":"themes/hexo-theme-xups/layout/post.ejs","hash":"6690fe7adb736e9f3d9d7f65a6b964cdc3c21f20","modified":1544369267088},{"_id":"themes/hexo-theme-xups/layout/tag.ejs","hash":"e5d99bff4994ec19ee7729cbb41b63546b17a6ff","modified":1544369267089},{"_id":"themes/hexo-theme-xups/layout/tags.ejs","hash":"7a1c39c132a15b3aabd2092948741152b6232b05","modified":1544369267089},{"_id":"source/images/db/mysql_logo.png","hash":"bbd5aeb1a0dc8a6308b3bfcd5b71b04c364a0169","modified":1544541104628},{"_id":"source/images/db/redis_logo.png","hash":"7b13646824db10f796d3f5ec8d415ee6c5b617b4","modified":1544541104631},{"_id":"source/images/hadoop/hadoop_logo.jpg","hash":"58611704eab9eb155d860225b93b537753801011","modified":1544541104632},{"_id":"source/images/hbase/hbase_logo.png","hash":"c938bb1c60f5d533d6faa0129c0d5893a7fb6c8a","modified":1544541104634},{"_id":"source/images/hbase/hbase_logo_00.png","hash":"19f9be70a462a0279127dd9db44137296a594e12","modified":1544541104635},{"_id":"source/images/hbase/hbase_logo_01.png","hash":"f0a2c48942e219b57d6a9a69dcd7ba6bc834e748","modified":1544541104636},{"_id":"source/images/java/class_loader.png","hash":"8d8f8e678d228509dcccac36889348c3fa4d79e0","modified":1544541104639},{"_id":"source/images/java/java_01.jpg","hash":"fb6d177eb242640df2eb296f0819139a322d5be4","modified":1544541104640},{"_id":"source/images/java-collection-frame/ConcurrentHashMap.png","hash":"3b9aa9ba13e9164f9c8b6185de517fb603dd1f43","modified":1544541104638},{"_id":"source/images/material/book.jpg","hash":"953c73e1e48e7ebc69f8e8c21e3a02517cedf0c3","modified":1544541104642},{"_id":"source/images/material/grar.jpg","hash":"e84801247bb4f4e4edbc41d0a8edd53328359c2b","modified":1544541104647},{"_id":"source/images/material/super_computer.jpg","hash":"fe31d1679f095be245c04bc3b159381a6f8e209f","modified":1544541104652},{"_id":"source/images/net/restful_api.jpeg","hash":"4546d941de976211a74ab2e16c9ea4224f7896ac","modified":1544541104658},{"_id":"themes/hexo-theme-xups/__source/about/index.md","hash":"32707ad1a27069c7f30fdbd645da15d25910fb69","modified":1544369267072},{"_id":"themes/hexo-theme-xups/__source/comment/index.md","hash":"8ebc21dec895c59375e511f921c8eef99cf192e7","modified":1544369267072},{"_id":"themes/hexo-theme-xups/__source/lab/index.md","hash":"756591670a1f2a6819add9f344e59d312eeb4d40","modified":1544369267073},{"_id":"themes/hexo-theme-xups/layout/_custom/about.ejs","hash":"9a221148cec92f5b7fe9286d043bd4b15f510f72","modified":1544452469122},{"_id":"themes/hexo-theme-xups/layout/_custom/comment.ejs","hash":"dfe71439cacc9a4d5eff76f24f04a7dd044f0aaa","modified":1544369267075},{"_id":"themes/hexo-theme-xups/layout/_custom/lab.ejs","hash":"f6f601ddf3e97ffaec9ce85db41b1fdfdf7c3fcc","modified":1544369267076},{"_id":"themes/hexo-theme-xups/layout/_partial/after-footer.ejs","hash":"51e748ed5cdb4abce01a80501e702fbfedd5f147","modified":1544369267076},{"_id":"themes/hexo-theme-xups/layout/_partial/article.ejs","hash":"99cd6c0f42767849e6f92ddf5331491f3dfc37b3","modified":1544623249783},{"_id":"themes/hexo-theme-xups/layout/_partial/baidu-analytics.ejs","hash":"0f3b7c610cff3c77c08a19b564f7f0221ac40ba4","modified":1544620335592},{"_id":"themes/hexo-theme-xups/layout/_partial/footer.ejs","hash":"e4a015c2ab963331ea1039983e92fcee6ef53b64","modified":1544623415120},{"_id":"themes/hexo-theme-xups/layout/_partial/head.ejs","hash":"a3a182f92d4bdecb97f1515cc4399c5f53ffa4ab","modified":1544531005617},{"_id":"themes/hexo-theme-xups/layout/_partial/header.ejs","hash":"eef7f352e1ee305d019b3ec8e08edb2d52d9bab6","modified":1544701401293},{"_id":"themes/hexo-theme-xups/layout/_partial/post-list.ejs","hash":"a3010d748b3781f96c84c1562109f0917a2bcf3c","modified":1544531094244},{"_id":"themes/hexo-theme-xups/layout/_partial/sidebar.ejs","hash":"8c8730152559ed9fca2637f217b458e2aca1aa05","modified":1544369267084},{"_id":"themes/hexo-theme-xups/layout/_partial/search.ejs","hash":"b8eff159df7eb99e7506e84b26ef692d9bdcbb4e","modified":1544702587430},{"_id":"themes/hexo-theme-xups/source/css/_extend.styl","hash":"4942d3ad93832e5b1ad559a1b66e89e145e982b9","modified":1544369267093},{"_id":"themes/hexo-theme-xups/source/css/_markdown.styl","hash":"0fd8cff5a5bbf93507817758478cd22efd3cfc88","modified":1544369267094},{"_id":"themes/hexo-theme-xups/source/css/_variables.styl","hash":"d0314bd375ba70110ae95a716b7f53a949545f69","modified":1544369267099},{"_id":"themes/hexo-theme-xups/source/css/style.styl","hash":"36b92e4313863fc6d207a669dac20d80ff32eb49","modified":1544531640497},{"_id":"themes/hexo-theme-xups/source/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1544369267112},{"_id":"themes/hexo-theme-xups/source/img/jelon.jpg","hash":"5a698f21552a8365ef44f7113665bff8121635cb","modified":1544369267113},{"_id":"themes/hexo-theme-xups/source/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1544369267114},{"_id":"themes/hexo-theme-xups/source/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1544369267115},{"_id":"themes/hexo-theme-xups/source/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1544369267116},{"_id":"themes/hexo-theme-xups/source/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1544369267126},{"_id":"themes/hexo-theme-xups/source/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1544369267127},{"_id":"themes/hexo-theme-xups/source/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1544369267127},{"_id":"themes/hexo-theme-xups/source/img/wechat_pay.png","hash":"3fb3bbd4b1fae4259578dce0ca838e0696283041","modified":1544369267128},{"_id":"themes/hexo-theme-xups/source/js/comment.js","hash":"84e3e17b6a8ccb18dd5cff23b19989396680a578","modified":1544701401298},{"_id":"themes/hexo-theme-xups/source/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1544369267130},{"_id":"themes/hexo-theme-xups/source/js/main.js","hash":"663e139a84f778a0ff8ed7468f35c8f5fc9a19f2","modified":1544701401299},{"_id":"themes/hexo-theme-xups/source/js/search.js","hash":"6c4509ad652ed212837d15d49f56fef6e88bcfff","modified":1544539187053},{"_id":"source/images/material/tech_wave.jpg","hash":"03b7cc4d6008ed57da052f789589fb6bd9181c4f","modified":1544541104657},{"_id":"themes/hexo-theme-xups/source/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1544369267115},{"_id":"themes/hexo-theme-xups/source/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1544369267126},{"_id":"source/images/hadoop/hadoop_logo_01.png","hash":"34e4685d9451138212c99f1823b4a0122c7441e6","modified":1544541104633},{"_id":"themes/hexo-theme-xups/layout/_partial/post/category.ejs","hash":"2908913f083b0d95a5cd09a7996cacfe722a3118","modified":1544369267080},{"_id":"themes/hexo-theme-xups/layout/_partial/post/comment.ejs","hash":"94c512c63b4f1872034fc0264abf69b291bead88","modified":1544449445148},{"_id":"themes/hexo-theme-xups/layout/_partial/post/date.ejs","hash":"848f362936b3f21e067e2a0783efbdbdab338985","modified":1544369267081},{"_id":"themes/hexo-theme-xups/layout/_partial/post/gallery.ejs","hash":"ed531d1970eedabd2a454d51ac92fffcc0697bec","modified":1544369267081},{"_id":"themes/hexo-theme-xups/layout/_partial/post/nav.ejs","hash":"fa8cb2d5c593fa402e19e1089007812219596481","modified":1544369267082},{"_id":"themes/hexo-theme-xups/layout/_partial/post/post-item.ejs","hash":"4278efbecfcadc9cf4a9139e64e4efcc1f4f1981","modified":1544454695504},{"_id":"themes/hexo-theme-xups/layout/_partial/post/share.ejs","hash":"c0f861fb0bd74aced347e0bccee5fa7ff37fa7b4","modified":1544369267083},{"_id":"themes/hexo-theme-xups/layout/_partial/post/tag.ejs","hash":"2cb45be8611fe1d067a29a81057e3fb8a787ee68","modified":1544450334947},{"_id":"themes/hexo-theme-xups/layout/_partial/post/title.ejs","hash":"4819520155fc4e389b09c80310af5c61fcd57c03","modified":1544369267084},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/categorys.ejs","hash":"84304242b99bdb58a0c07ec8966f4fcee9dffd90","modified":1544622729860},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/friend_links.ejs","hash":"4ff96fbfb9d70b4636108c5deaaf041c6681ceeb","modified":1544369267085},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/tags.ejs","hash":"bc7b5e50b19e5a7f0f5c81d653407b26d8881c25","modified":1544369267086},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/weibo.ejs","hash":"ae423289fabf0dd392dab3783c89c6130f132957","modified":1544533057017},{"_id":"themes/hexo-theme-xups/source/css/_base/font.styl","hash":"52895afc3fd1e250d3359d9250f9f6a33e0c797a","modified":1544369267091},{"_id":"themes/hexo-theme-xups/source/css/_base/global.styl","hash":"5ba865047a3438ab6c2347e7403c67a9f2085619","modified":1544369267091},{"_id":"themes/hexo-theme-xups/source/css/_base/normalize.styl","hash":"3f6122f583b1590d51fe8181ccd310786c04a4c2","modified":1544369267092},{"_id":"themes/hexo-theme-xups/source/css/_base/reset.styl","hash":"ee2a445efc1fbfad1fcdf3cd141e81323171bd25","modified":1544369267093},{"_id":"themes/hexo-theme-xups/source/css/_partial/article.styl","hash":"127dd055a12c250b13add12cd0615b707fe21fab","modified":1544369267095},{"_id":"themes/hexo-theme-xups/source/css/_partial/comment.styl","hash":"999c90acf74f94cb930362e0cc869bbd45f8a005","modified":1544369267095},{"_id":"themes/hexo-theme-xups/source/css/_partial/footer.styl","hash":"4ea6d68df066194ba9b37d7fa0292659270b39ef","modified":1544625787744},{"_id":"themes/hexo-theme-xups/source/css/_partial/header.styl","hash":"c9fea12b9c1b6e37402f9dabe780d4c71322f786","modified":1544621786922},{"_id":"themes/hexo-theme-xups/source/css/_partial/highlight.styl","hash":"c1c9655afa9739a4987dc196fff5af50688ea445","modified":1544369267096},{"_id":"themes/hexo-theme-xups/source/css/_partial/responsive.styl","hash":"5f262fc7f37cab2c1a8868ef10ab652b6ddd0d5c","modified":1544369267097},{"_id":"themes/hexo-theme-xups/source/css/_partial/post.styl","hash":"163988e3cb92deab32674175cb25048ca2f96ae6","modified":1544369267097},{"_id":"themes/hexo-theme-xups/source/css/_partial/search.styl","hash":"579d829feb61814059d59262a699be1eb91b4b5e","modified":1544701401296},{"_id":"themes/hexo-theme-xups/source/css/_partial/searchform.styl","hash":"2a2ae54716da54d90eb1970ddec92a33e6fde6b5","modified":1544369267098},{"_id":"themes/hexo-theme-xups/source/css/_partial/sidebar.styl","hash":"0e64e0a73a6befe0be43a9cb9458e7c690fe4883","modified":1544369267098},{"_id":"themes/hexo-theme-xups/source/css/_partial/theme.styl","hash":"e1eb40c93a39f2212b042fcb4481be2e901240af","modified":1544369267098},{"_id":"themes/hexo-theme-xups/source/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1544369267113},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1544369267117},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1544369267118},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1544369267120},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1544369267121},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1544369267121},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1544369267123},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1544369267123},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1544369267124},{"_id":"source/images/db/redis.jpeg","hash":"34e63f81a439a29622ea6cf9b4214f1b1945880e","modified":1544541104630},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.ttf","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544369267110},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1544369267118},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1544369267119},{"_id":"themes/hexo-theme-xups/source/js/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1544200439245},{"_id":"source/images/net/web.png","hash":"66bc9e020a0ebfea44984896fcda395da025bd55","modified":1544541104661},{"_id":"themes/hexo-theme-xups/source/css/awesome/css/font-awesome.min.css","hash":"0deb65caf0376c381310f5222245fe04f039649d","modified":1544449901738},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1544369267102},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1544369267103},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1544369267104},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1544369267105},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1544369267107},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1544369267108},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.eot","hash":"26de148529b318cb8159c70ef5adbe3667fb3e6d","modified":1544369267109},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.svg","hash":"2e3227e11e13917eecb676062ee953b37ea957c0","modified":1544369267110},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.woff","hash":"a5a4ffc5ecda60e59beac6b0f096b25b243a2acb","modified":1544369267111},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1544200439225},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1544200439227},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1544369267105},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1544369267109},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1544200439192},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1544200439201},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1544200439222},{"_id":"source/images/material/maoxian.png","hash":"9eedb5fe8fd32c00de8304f847c2497790e0e0d4","modified":1544541104651},{"_id":"source/images/material/tech_tool.png","hash":"bb6f4fa2f43e55177cc4500e13d132688a2ab8ef","modified":1544541104655},{"_id":"themes/hexo-theme-xups/source/css/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1544200439215},{"_id":"source/images/material/gaoxiao.png","hash":"fd6bafa0caaf9e6bdd36b5f013366ef78ba1fd94","modified":1544541104646},{"_id":"public/atom.xml","hash":"560f31b1fb5427ef638e67afca90d6be8351770a","modified":1544702986804},{"_id":"public/search.xml","hash":"2f8fc49ab0b3109624f1203731e257d7c0ffd2f0","modified":1544702986805},{"_id":"public/about/index.html","hash":"8b6dc4f7e529f5a255c0be82164b02ae3dd60cb4","modified":1544702987903},{"_id":"public/archives/2018/06/page/3/index.html","hash":"c4079870705d0faf391a49e3efa67717a45fa49d","modified":1544702987903},{"_id":"public/archives/2018/08/index.html","hash":"7433f7ecfd217dbf73c0e6ba2c3265dc2f25e966","modified":1544702987903},{"_id":"public/archives/2018/10/index.html","hash":"01b122cabd68c33fa10d0e39afd6461ace98cd71","modified":1544702987903},{"_id":"public/categories/Interview/index.html","hash":"eb6a13a8f9e60497a3f36686795bc261b9069fca","modified":1544702987903},{"_id":"public/categories/Database/index.html","hash":"87620f90860db497ce2976ab5c9808cbc086d284","modified":1544702987903},{"_id":"public/categories/Java/page/2/index.html","hash":"6705a6620017bff77da4b9180a7edb37454a1878","modified":1544702987903},{"_id":"public/categories/Big-Data/index.html","hash":"a90ac76b5ec07b598168f3ac0be7d0d6ba669644","modified":1544702987903},{"_id":"public/categories/Cache/index.html","hash":"e176d0fcb35aead2963b611bba0bf2b36aa085f1","modified":1544702987903},{"_id":"public/categories/HTTP/index.html","hash":"6b67d4f6a328917b1dd9362a649adc3cff5721c5","modified":1544702987903},{"_id":"public/categories/Websocket/index.html","hash":"4c7e7490019ddc140e6c3cd9435e6e5d4b9dc42a","modified":1544702987903},{"_id":"public/tags/Interview/index.html","hash":"609d7e90b3ca9325f6c3d69fe16be99147f4e2c2","modified":1544702987903},{"_id":"public/tags/Experience/index.html","hash":"5e2e88a80b9c4a4e410c6f5fbe3e8137355f4237","modified":1544702987903},{"_id":"public/tags/Database/index.html","hash":"81eb7861e5f6ba520823bf25509358c9d559acc2","modified":1544702987904},{"_id":"public/tags/Classloader/index.html","hash":"f7ca09cbc80a3eab2759a68f58cb76889ed942a5","modified":1544702987904},{"_id":"public/tags/Collection/index.html","hash":"0ebdfe9dd885eb256ea267bdb8973d1c2e918361","modified":1544702987904},{"_id":"public/tags/JIT/index.html","hash":"3beb34941e872c05be25b38b04f87142a56e046c","modified":1544702987904},{"_id":"public/tags/Optimize/index.html","hash":"a4f9fe59b5ee8507648ebdf7e52d8b7c109eb778","modified":1544702987904},{"_id":"public/tags/Concurrent/index.html","hash":"46a46e825a116d7892ebebbc266f130e6a8951ea","modified":1544702987904},{"_id":"public/tags/GC/index.html","hash":"521450efb08fe430129457ba38f061a60156f37b","modified":1544702987904},{"_id":"public/tags/JMM/index.html","hash":"d0f1a5b89fafcf492428bedbeea000d27ebfacd3","modified":1544702987904},{"_id":"public/tags/Java-Monitor/index.html","hash":"702f0f2621375ff3d4ee02d55e87c4956df9570e","modified":1544702987904},{"_id":"public/tags/Big-Data/index.html","hash":"24402efb3a23fc0822e9973d9ca62c6a21793896","modified":1544702987904},{"_id":"public/tags/Hadoop/index.html","hash":"06c1f132b60d5f8149b4a368d40eb6dd88855516","modified":1544702987904},{"_id":"public/tags/HBase/index.html","hash":"fb65afeff0dc08751a422330bff87926186706d2","modified":1544702987904},{"_id":"public/tags/Cache/index.html","hash":"351e4077c8e7d3b515654422f6e84ace0065593a","modified":1544702987904},{"_id":"public/tags/Redis/index.html","hash":"7a09edf43f1c48c193431b849249d2ee3617ba2f","modified":1544702987904},{"_id":"public/tags/REST/index.html","hash":"a8cf10841710312457b5e2ba302311dee0f6a32a","modified":1544702987904},{"_id":"public/tags/HTTP/index.html","hash":"4887aea6f9acb9741bf226a5d0aab95f1aa25ae9","modified":1544702987904},{"_id":"public/tags/Spring/index.html","hash":"e07043fc09e9b4a4600efb878a704fd3fd10e0ea","modified":1544702987904},{"_id":"public/tags/Websocket/index.html","hash":"f570cfcec1efb6e3243f6e8c043760a236340399","modified":1544702987904},{"_id":"public/posts/2018/10/26/pseudo-distributed-hbase-install/index.html","hash":"11d09c8f9db926db08f6557be0a6e4b47037691a","modified":1544702987905},{"_id":"public/posts/2018/10/26/pseudo-distributed-hadoop-install/index.html","hash":"bed1bbf4aace6b987fcca6fd8c4a631a710bbcfc","modified":1544702987905},{"_id":"public/posts/2018/08/27/spring-intergration-websocket/index.html","hash":"df9811c9198c3e52642af4f327c0809fbaaec9d9","modified":1544702987905},{"_id":"public/posts/2018/06/27/restful-http/index.html","hash":"44eb3e099dbe2f3682a1d503f887028c0a1ef8d4","modified":1544702987905},{"_id":"public/posts/2018/06/26/redis-cache-summarize/index.html","hash":"059be8de4b7ce360afe17b4a26165e5becc23dff","modified":1544702987905},{"_id":"public/posts/2018/06/25/java-classloader/index.html","hash":"0880023c818cfaa10abecb0cf4460b03a9570bad","modified":1544702987905},{"_id":"public/posts/2018/06/19/interview-experience/index.html","hash":"dc048a799e29620fa4aff41a4e72f227bc3cfbca","modified":1544702987905},{"_id":"public/posts/2018/06/18/database/index.html","hash":"9df1f3aea47d12a47aa92589fa8fca375cbcb6d6","modified":1544702987905},{"_id":"public/posts/2018/06/17/java-compile-and-optimize/index.html","hash":"00ac9d488bacdac6a11f2a8d985cc7f63eb36e46","modified":1544702987905},{"_id":"public/posts/2018/06/15/java-gc/index.html","hash":"a567535ff27dd899203b78681af7e8e7bf9d558d","modified":1544702987905},{"_id":"public/posts/2018/06/15/java-collection-frame/index.html","hash":"1517c2d618ae1e987dd620e42a6bef9270896e31","modified":1544702987906},{"_id":"public/posts/2018/06/15/java-concurrent/index.html","hash":"6526af2b452c624d798c676e5f7db1cf81b20d6d","modified":1544702987906},{"_id":"public/posts/2018/06/15/java-memory-model/index.html","hash":"9416bb22fc362af94608913769d6515ac0d03e6f","modified":1544702987906},{"_id":"public/posts/2018/06/14/java-monitor-tools/index.html","hash":"a00f3e5a1af0ffae55719ab1a5d65c01271a4818","modified":1544702987906},{"_id":"public/archives/index.html","hash":"6f4eea7422a2e6706cb5c5af7caa6a544d51745d","modified":1544702987906},{"_id":"public/archives/page/2/index.html","hash":"61ed39e56df4e7b493611caec0e9ff0de1d5b3b2","modified":1544702987906},{"_id":"public/archives/page/3/index.html","hash":"af3b0234dcf4d6f2b2a6b702a1ceb3f2d5ed5665","modified":1544702987906},{"_id":"public/archives/2018/index.html","hash":"b460395d52bc0e54668846beccb5e0bb3d36b127","modified":1544702987906},{"_id":"public/archives/2018/page/2/index.html","hash":"00daff287c7d7a83ba7de9a7d2d2fa548ceb5787","modified":1544702987906},{"_id":"public/archives/2018/page/3/index.html","hash":"4355600d332f587df452cad241ecbc6f2980c1f5","modified":1544702987906},{"_id":"public/archives/2018/06/index.html","hash":"288f8ff426457e0b95a6d5cec7fc62c21ae11624","modified":1544702987906},{"_id":"public/archives/2018/06/page/2/index.html","hash":"3b43c26beeb75af4d50a37896b6461fdd3d86a4c","modified":1544702987906},{"_id":"public/categories/Java/index.html","hash":"97e5f5e7801a34840749fd54c604738413181175","modified":1544702987906},{"_id":"public/index.html","hash":"b21200d1891762a18881d26012a1a42761342224","modified":1544702987907},{"_id":"public/page/2/index.html","hash":"9efbfa26d89feecfcdacaf671d8df86469e6c2ae","modified":1544702987907},{"_id":"public/page/3/index.html","hash":"7f1b9cf1a085799a0174ecb4d953cd7d01d38374","modified":1544702987907},{"_id":"public/tags/Java/index.html","hash":"a11cdd8b795733b61f3b9f3cca7bc74ffc99e985","modified":1544702987907},{"_id":"public/tags/Java/page/2/index.html","hash":"7fc891266be4fb2be5650debd03372969b94655c","modified":1544702987907},{"_id":"public/tags/JVM/index.html","hash":"12f897c382144e8abb157a0ab191685bfa24948f","modified":1544702987907},{"_id":"public/css/fonts/icomoon/icomoon.ttf","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544702987941},{"_id":"public/dsolvers.png","hash":"c6f5f164b1445fbf639f516166a4606e31c9525e","modified":1544702987957},{"_id":"public/favicon.ico","hash":"a7ee8b3d15776a2e870a1beea82bc221f9566585","modified":1544702987957},{"_id":"public/images/db/redis_logo.png","hash":"7b13646824db10f796d3f5ec8d415ee6c5b617b4","modified":1544702987957},{"_id":"public/images/db/mysql_logo.png","hash":"bbd5aeb1a0dc8a6308b3bfcd5b71b04c364a0169","modified":1544702987957},{"_id":"public/images/hadoop/hadoop_logo.jpg","hash":"58611704eab9eb155d860225b93b537753801011","modified":1544702987957},{"_id":"public/images/hbase/hbase_logo.png","hash":"c938bb1c60f5d533d6faa0129c0d5893a7fb6c8a","modified":1544702987957},{"_id":"public/images/hbase/hbase_logo_00.png","hash":"19f9be70a462a0279127dd9db44137296a594e12","modified":1544702987958},{"_id":"public/images/hbase/hbase_logo_01.png","hash":"f0a2c48942e219b57d6a9a69dcd7ba6bc834e748","modified":1544702987958},{"_id":"public/images/java/class_loader.png","hash":"8d8f8e678d228509dcccac36889348c3fa4d79e0","modified":1544702987958},{"_id":"public/images/java/java_01.jpg","hash":"fb6d177eb242640df2eb296f0819139a322d5be4","modified":1544702987958},{"_id":"public/images/java-collection-frame/ConcurrentHashMap.png","hash":"3b9aa9ba13e9164f9c8b6185de517fb603dd1f43","modified":1544702987958},{"_id":"public/images/material/book.jpg","hash":"953c73e1e48e7ebc69f8e8c21e3a02517cedf0c3","modified":1544702987958},{"_id":"public/images/material/grar.jpg","hash":"e84801247bb4f4e4edbc41d0a8edd53328359c2b","modified":1544702987958},{"_id":"public/images/material/super_computer.jpg","hash":"fe31d1679f095be245c04bc3b159381a6f8e209f","modified":1544702987958},{"_id":"public/images/net/restful_api.jpeg","hash":"4546d941de976211a74ab2e16c9ea4224f7896ac","modified":1544702987958},{"_id":"public/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1544702987958},{"_id":"public/img/jelon.jpg","hash":"5a698f21552a8365ef44f7113665bff8121635cb","modified":1544702987958},{"_id":"public/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1544702987959},{"_id":"public/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1544702987959},{"_id":"public/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1544702987959},{"_id":"public/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1544702987959},{"_id":"public/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1544702987959},{"_id":"public/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1544702987960},{"_id":"public/img/wechat_pay.png","hash":"3fb3bbd4b1fae4259578dce0ca838e0696283041","modified":1544702987960},{"_id":"public/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1544702987960},{"_id":"public/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1544702987960},{"_id":"public/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1544702987960},{"_id":"public/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1544702987960},{"_id":"public/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1544702987960},{"_id":"public/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1544702987960},{"_id":"public/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1544702987960},{"_id":"public/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1544702987960},{"_id":"public/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1544702987960},{"_id":"public/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1544702987960},{"_id":"public/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1544702987961},{"_id":"public/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1544702987961},{"_id":"public/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1544702987961},{"_id":"public/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1544702987961},{"_id":"public/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1544702987961},{"_id":"public/css/fonts/icomoon/icomoon.eot","hash":"26de148529b318cb8159c70ef5adbe3667fb3e6d","modified":1544702987961},{"_id":"public/css/fonts/icomoon/icomoon.svg","hash":"2e3227e11e13917eecb676062ee953b37ea957c0","modified":1544702987961},{"_id":"public/css/fonts/icomoon/icomoon.woff","hash":"a5a4ffc5ecda60e59beac6b0f096b25b243a2acb","modified":1544702987961},{"_id":"public/images/material/tech_wave.jpg","hash":"03b7cc4d6008ed57da052f789589fb6bd9181c4f","modified":1544702988543},{"_id":"public/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1544702988546},{"_id":"public/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1544702988550},{"_id":"public/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1544702988550},{"_id":"public/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1544702988550},{"_id":"public/css/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1544702988550},{"_id":"public/css/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1544702988550},{"_id":"public/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1544702988550},{"_id":"public/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1544702988550},{"_id":"public/js/main.js","hash":"4bf9045fcb7d2cdbc272ac8e7a7256e724d51328","modified":1544702988567},{"_id":"public/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1544702988567},{"_id":"public/js/search.js","hash":"5e4e951cab263017cbe036a8595d9d86b9efef83","modified":1544702988567},{"_id":"public/css/style.css","hash":"7a00275fe33c5c69e68b36ce0c91e6786fbc6b77","modified":1544702988568},{"_id":"public/js/comment.js","hash":"1f7ce0e4fee0fdeca44c5c19f91a63d5921abcf5","modified":1544702988569},{"_id":"public/js/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1544702988569},{"_id":"public/css/awesome/css/font-awesome.min.css","hash":"4720eb3f5bd0600aff8cd377904cd8d8c9cf3bd1","modified":1544702988569},{"_id":"public/images/hadoop/hadoop_logo_01.png","hash":"34e4685d9451138212c99f1823b4a0122c7441e6","modified":1544702988569},{"_id":"public/css/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1544702988569},{"_id":"public/css/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1544702988569},{"_id":"public/css/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1544702988569},{"_id":"public/images/db/redis.jpeg","hash":"34e63f81a439a29622ea6cf9b4214f1b1945880e","modified":1544702988584},{"_id":"public/images/net/web.png","hash":"66bc9e020a0ebfea44984896fcda395da025bd55","modified":1544702988597},{"_id":"public/css/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1544702988657},{"_id":"public/images/material/maoxian.png","hash":"9eedb5fe8fd32c00de8304f847c2497790e0e0d4","modified":1544702988668},{"_id":"public/images/material/tech_tool.png","hash":"bb6f4fa2f43e55177cc4500e13d132688a2ab8ef","modified":1544702988738},{"_id":"public/images/material/gaoxiao.png","hash":"fd6bafa0caaf9e6bdd36b5f013366ef78ba1fd94","modified":1544702988753}],"Category":[{"name":"Interview","_id":"cjpmk9vib0002uoiluv70t11s"},{"name":"Database","_id":"cjpmk9viz0007uoilui2dlkug"},{"name":"Java","_id":"cjpmk9vj5000cuoilkr64uqj6"},{"name":"Big Data","_id":"cjpmk9vk20013uoil4c9xsbnz"},{"name":"Cache","_id":"cjpmk9vk6001cuoilvzdqwt3d"},{"name":"HTTP","_id":"cjpmk9vk9001iuoilmn6tdzmv"},{"name":"Websocket","_id":"cjpmk9vkd001muoilek9z6r8v"}],"Data":[],"Page":[{"title":"关于","date":"2016-01-31T14:10:28.000Z","pageid":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-01-31 22:10:28\npageid: about\n---","updated":"2018-12-11T15:11:44.625Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjpmk9vl9002ruoilfr0j4kwy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"The Interview Experience","thumbnail":"/images/material/book.jpg","date":"2018-06-19T01:15:27.000Z","author":"Crab2Died","_content":"\n## 一. JAVA基础\n### 1. 9种基本数据类型及其封装类,所占大小\n\n |   类型    |     包装类      | 大小(字节) |\n |:--------:|:--------------:|:----------:|\n |   byte   |    Byte        |      1     |\n |   char   |    Character   |      2     |\n |   short  |    Short       |      2     |\n |   int    |    Integer     |      4     |\n |   float  |    Float       |      4     |\n |   double |    Double      |      8     |\n |   long   |    Long        |      8     |\n |   boolean|    Boolean     |      -     |\n |   void   |    Void        |      -     | \n\n### 2. Object类方法\n   - getClass() 获取类对象Class (native)\n   - hashCode() 获取hashCode值(native)\n   - equals(Object) 判断是否同一对象\n   - clone() 对象克隆(native)\n   - wait() \n   - wait(timeout)\n   - wait(timeout, nanos)\n   - notify()\n   - notifyAll()\n   - toString()\n   - finalize() (protected)\n\n### 3. equals 、hashCode、== 比较\n   - equals是Object类方法，内部实现的是判断对象是否相等(即 ==)。\n   - hashCode是Object的native方法，返回的是类似表示对象地址的整数。\n   - ==是判断2个对象是否相同。\n   - 如果2个对象相同则hashCode一定相等，若2个对象不同hashCode不一定相等。\n   - 一般地重写了equals方法建议也要重写hashCode方法。\n   \n### 4. 面向对象的特性与含义\n   - **抽象**  是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不\n     关注这些行为的细节是什么。\n   - **封装**  是指将某事物的属性和行为包装到对象中，这个对象只对外公布需要公开的属性和行为，而这个公布也是可以有选择性的公布\n     给其它对象，private、protected、public三种修饰符或不用(即默认default)对外部对象访问该对象的属性和行为进行限制。\n   - **继承**  是子对象可以继承父对象的属性和行为，亦即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为。\n   - **多态**  是指父对象中的同一个行为能在其多个子对象中有不同的表现。也就是说子对象可以使用重写父对象中的行为,使其拥有不同于\n     父对象和其它子对象的表现,这就是overriding(重写)。实现多态的技术称为：动态绑定(dynamic binding)，是指在执行期间判\n     断所引用对象的实际类型，根据其实际的类型调用其相应的方法。\n\t \n### 5. Override与Overload\n   - **Override**是重写:方法名称、参数个数，类型，顺序，返回值类型都是必须和父类方法一致的。它的关系是父子关系。\n   - **Overload**是重载:方法名称不变，方法参数个数、类型、顺序至少一个不同。它的关系是同一个类，同一个方法名。\n\n### 6. wait与sleep\n   - wait是Object类的方法；而sleep是Thread类的静态方法。\n   - 当线程执行到wait方法时，他就会进入到该对象相关的等待池中，同时释放对象的机锁，其他线程可访问，直到超时或该对象调用notify\n     或notifyAll；而当线程执行sleep方法时，线程进入阻塞状态，让出CPU资源，但在Synchronized同步块中不能释放对象的锁。\n   - wait方法必须放在synchronized代码块中，否则会在时抛出`java.lang.IllegalMonitorStateException`异常。\n   - wait和sleep都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException(但不建议使用该方法)。\n\n### 7. java并发\n   > [Java并发编程](/posts/2018/06/15/java-concurrent)   \n\n### 8. interface与abstract类\n   - 抽象类是包含有抽象方法的类(也可以拥有成员变量和普通成员方法)，抽象方法是只有方法声明没有具体实现的方法，所以抽象类不能实例化，是为\n     了继承而存的，抽象类与普通类有3点区别：\n\t - 1.抽象方法必须是public或protected，缺损情况下默认为public;\n\t - 2.抽象类不能被实例化；\n\t - 3.如果一个类继承了抽象类，则子类必须实现父类的抽象方法，若没有实现父类抽象方法，则子类也必须定义为抽象类。  \n   - 接口是泛指供别人调用的方法或函数，接口中可以有变量和方法，变量被隐式地指定为`public static final`，方法被隐式地指定为\n     `public abstract`,接口中的方法不能有具体的实现(JDK8之后接口可以有default方法)。\n   - 接口与抽象类比较: \n     - 1.语法层面上:\n\t   - 1).抽象类可以提供成员方法的实现细节而接口中只能存在public abstract方法\n\t   - 2).抽象类中的成员变量可以是各种类型，而接口中的成员变量只能是public static final类型\n\t   - 3).接口中不能存在静态代码块和静态方法，而抽象类中可以\n\t   - 4).一个类只能继承一个抽象类而可以实现多个接口\n     - 2.设计层面上: \n\t   - 1).抽象类是对一种事物对象的抽象，而接口是对事物行为的抽象，抽象类是对整个类整体的抽象，包括属性、行为，而接口是对类的局部\n\t   (行为)的抽象。继承抽象类是\"是不是\"的关系，实现接口是\"有没有\"的关系。\n       - 2).设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计，而接口是一种行为规范，它是一种辐射式设计   \n   \n### 9. fail-fast\n   - fail-fast：机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。\n     例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出异常: \n     `ConcurrentModificationException`，产生fail-fast事件。\n     \n### 10. JDK和CGLIB动态代理\n   - JDK动态代理只能针对实现了接口的类生成代理(实例化一个类)。此时代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，\n     具体接口实现中，可以在调用目标对象相应方法前后加上其他业务处理逻辑。\n   - CGLIB是针对类实现代理，主要是对指定的类生成一个子类(没有实例化一个类)，覆盖其中的方法。\n     \n## JVM\n### 1. 内存模型\n   - **堆内存(Heap)** 是线程间共享内存，主要存放java的对象及数组\n   - **栈内存(Stack)** 是线程间不共享的，主要存放基本数据类型和对象及数组的引用等   \n   - **方法区(Method Area)** 是存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据\n   - **本地方法栈(Native Method Stack)** 为虚拟机调用本地Native方法提供服务,有的虚拟机与虚拟机栈合二为一\n   - **程序计数器(Program Counter Register)** 是当前虚拟机执行指令的地址，当执行到Native方法时其值为空(Undefined)\n   - **运行时常量池(Runtime Constant Pool)** 用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放\n   - **直接内存(Direct Memory)** NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据\n\n### 2. GC的2种判定方法\n   - **引用计数**: 实现简单、高效，但会出现循环引用的时候对象将无法得到回收\n   - **引用链**：即可达性分析，以GC Roots为根节点开始向下搜索，所走的路径叫做引用链(Reference Chain)，当一个对象到GC Roots对象没有\n     任何引用链时说明该对象不可用，可作为GC Roots的对象：\n     - 1.虚拟机栈（栈帧中的本地变量表）中引用的对象。\n     - 2.方法区中的类静态属性引用的对象或者常量引用的对象。\n     - 3.本地方法栈中JNI（就是native方法）引用的对象。\t \n\n### 3. java自动内存管理\n   > [Java自动内存管理](/posts/2018/06/15/java-gc)   \n\t \n## 其他\n### 1. OSI网络模型\n\n  | 层级 |  名称     |                            描述                                       |\n  |:---:|:-----------|:--------------------------------------------------------------------|\n  |  1  | 应用层     |指网络操作系统和具体的应用程序，对应WWW服务器、FTP服务器等应用软件           |\n  |  2  | 表示层     |数据语法的转换、数据的传送等                                             |\n  |  3  | 会话层     |建立起两端之间的会话关系，并负责数据的传送                                 |\n  |  4  | 传输层     |负责错误的检查与修复，以确保传送的质量，是TCP/UDP工作的地方。（报文）         |\n  |  5  | 网络层     |提供了编址方案,IP协议工作的地方(数据包）                                  |\n  |  6  | 数据链路层 |将由物理层传来的未经处理的位数据包装成数据帧                                |\n  |  7  | 物理层     |对应网线、网卡、接口等物理设备(位)                                        |\n\n### 2. TCP/IP协议\n   - 应用层\n   - 传输层\n   - 网络层\n   - 链路层\n\n### 3. IP分类\n   - A类地址（1.0.0.0-126.255.255.255）用于最大型的网络，该网络的节点数可达16,777,216个。\n   - B类地址（128.0.0.0-191.255.255.255）用于中型网络，节点数可达65,536个。\n   - C类地址（192.0.0.0-223.255.255.255）用于256个节点以下的小型网络的单点网络通信。\n   - D类地址（224.0.0.0-239.255.255.255）并不反映网络的大小，只是用于组播，用来指定所分配的接收组播的节点组，这个节点组由组播订\n     阅成员组成。D类地址的范围为\n   - E类（240.0.0.0-255.255.255.254）地址用于试验。   \n   \n### 4. TCP与UDP\n   - TCP、UDP都是传输层协议\n   - TCP(Transmission Control Protocol, 传输控制协议) 是面向连接的协议(即在收发数据前必须和对方建立可靠连接)，TCP建立连接要3次\n     握手，TCP断开连接需要4次挥手，保证了数据通信的可靠性；TCP包头最小长度为20个字节数。\n   - UDP(User Data Protocol, 用户数据报协议) 是一个非连接的协议(即传输数据之前源端和终端不建立连接)，只是简单的把应用程序的数据\n     尽快地扔到网络上，因此UDP传输速度只受应用程序生成数据速度、计算机的能力和传输带宽的限制，接收端，UDP把每个消息段放入队列中\n\t 应用程序读取使用；UDP可以一台服务器同时向多台客户机传输相同数据；UDP消息头很短只有8个字节；UDP尽可能快的发送数据，但不保证\n\t 数据的可靠性(丢包，顺序等)；UDP是面向报文的，发送方的报文只是添加首部后就向下交付给IP层，既不拆分也不合并，这些需要接收端\n\t 应用程序自己实现。\n\n### 5. 死锁的必要条件\n   - **互斥条件**：资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源\n     被另一进程占有时，则申请者等待直到资源被占有者释放。\n   - **不可剥夺条件**：进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。\n   - **请求和保持条件**：进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。\n   - **循环等待条件**：在发生死锁时必然存在一个进程等待队列{P1,P2,…,Pn},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有\n     的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所深情地资源。\t \n\n### 6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)\n   - MyISAM使用B-Tree实现主键索引、唯一索引和非主键索引。\n   - InnoDB中非主键索引使用的是B-Tree数据结构，而主键索引使用的是B+Tree。\t \n\n### 7. 进程与线程\n   - 进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元\n   - 同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。\n   - 进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进\n     程中的其他线程的结束   \n   - 线程是轻量级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的\n   - 线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源\n   - 线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标\n     示一个进程或一个线程的标志\n\n### 8. IPC通信方式\n   - **管道(Pipe)**：匿名管道（pipe亲缘关系的进程通信）、命名管道（mkfifo/mknod）\n   - **消息队列**：是基于消息的、用无亲缘关系的进程间通信，主要函数：msgget、msgsend、msgrecv、msgctl\n   - **信号量**：相当于一把互斥锁，通过p、v操作，主要函数：semget、semop、semctl\n   - **共享内存**：是进程间通信速度最快的，所以用经常是集合信号量或互斥锁来实现同步，shmget、shmat、shmdt、shmctl  \n\n### 9. 虚拟内存\n   - 是将进程部分装入内存中，从而能实现一个很大的程序能在一个比它小的内存中运行，它的主要实现是靠程序的换进换出来实现的，因为内存\n     中0-3G是用户使用，3-4G才是内存使用，通过映射来实现来进行逻辑地址到物理地址的映射\n\n### 10. 设计原则\n   - 依赖倒置原则 － Dependency Inversion Principle (DIP) \n   - 里氏替换原则 － Liskov Substitution Principle (LSP) \n   - 接口分隔原则 － Interface Segregation Principle (ISP) \n   - 单一职责原则 － Single Responsibility Principle (SRP) \n   - 开闭原则 － The Open-Closed Principle (OCP)\n","source":"_posts/interview-experience.md","raw":"---\nlayout: post\ntitle: The Interview Experience\nthumbnail: /images/material/book.jpg\ndate: 2018-06-19 09:15:27 +0800\nauthor: Crab2Died\ncategories: Interview\ntags: \n  - Java\n  - Interview\n  - Experience\n---\n\n## 一. JAVA基础\n### 1. 9种基本数据类型及其封装类,所占大小\n\n |   类型    |     包装类      | 大小(字节) |\n |:--------:|:--------------:|:----------:|\n |   byte   |    Byte        |      1     |\n |   char   |    Character   |      2     |\n |   short  |    Short       |      2     |\n |   int    |    Integer     |      4     |\n |   float  |    Float       |      4     |\n |   double |    Double      |      8     |\n |   long   |    Long        |      8     |\n |   boolean|    Boolean     |      -     |\n |   void   |    Void        |      -     | \n\n### 2. Object类方法\n   - getClass() 获取类对象Class (native)\n   - hashCode() 获取hashCode值(native)\n   - equals(Object) 判断是否同一对象\n   - clone() 对象克隆(native)\n   - wait() \n   - wait(timeout)\n   - wait(timeout, nanos)\n   - notify()\n   - notifyAll()\n   - toString()\n   - finalize() (protected)\n\n### 3. equals 、hashCode、== 比较\n   - equals是Object类方法，内部实现的是判断对象是否相等(即 ==)。\n   - hashCode是Object的native方法，返回的是类似表示对象地址的整数。\n   - ==是判断2个对象是否相同。\n   - 如果2个对象相同则hashCode一定相等，若2个对象不同hashCode不一定相等。\n   - 一般地重写了equals方法建议也要重写hashCode方法。\n   \n### 4. 面向对象的特性与含义\n   - **抽象**  是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不\n     关注这些行为的细节是什么。\n   - **封装**  是指将某事物的属性和行为包装到对象中，这个对象只对外公布需要公开的属性和行为，而这个公布也是可以有选择性的公布\n     给其它对象，private、protected、public三种修饰符或不用(即默认default)对外部对象访问该对象的属性和行为进行限制。\n   - **继承**  是子对象可以继承父对象的属性和行为，亦即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为。\n   - **多态**  是指父对象中的同一个行为能在其多个子对象中有不同的表现。也就是说子对象可以使用重写父对象中的行为,使其拥有不同于\n     父对象和其它子对象的表现,这就是overriding(重写)。实现多态的技术称为：动态绑定(dynamic binding)，是指在执行期间判\n     断所引用对象的实际类型，根据其实际的类型调用其相应的方法。\n\t \n### 5. Override与Overload\n   - **Override**是重写:方法名称、参数个数，类型，顺序，返回值类型都是必须和父类方法一致的。它的关系是父子关系。\n   - **Overload**是重载:方法名称不变，方法参数个数、类型、顺序至少一个不同。它的关系是同一个类，同一个方法名。\n\n### 6. wait与sleep\n   - wait是Object类的方法；而sleep是Thread类的静态方法。\n   - 当线程执行到wait方法时，他就会进入到该对象相关的等待池中，同时释放对象的机锁，其他线程可访问，直到超时或该对象调用notify\n     或notifyAll；而当线程执行sleep方法时，线程进入阻塞状态，让出CPU资源，但在Synchronized同步块中不能释放对象的锁。\n   - wait方法必须放在synchronized代码块中，否则会在时抛出`java.lang.IllegalMonitorStateException`异常。\n   - wait和sleep都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException(但不建议使用该方法)。\n\n### 7. java并发\n   > [Java并发编程](/posts/2018/06/15/java-concurrent)   \n\n### 8. interface与abstract类\n   - 抽象类是包含有抽象方法的类(也可以拥有成员变量和普通成员方法)，抽象方法是只有方法声明没有具体实现的方法，所以抽象类不能实例化，是为\n     了继承而存的，抽象类与普通类有3点区别：\n\t - 1.抽象方法必须是public或protected，缺损情况下默认为public;\n\t - 2.抽象类不能被实例化；\n\t - 3.如果一个类继承了抽象类，则子类必须实现父类的抽象方法，若没有实现父类抽象方法，则子类也必须定义为抽象类。  \n   - 接口是泛指供别人调用的方法或函数，接口中可以有变量和方法，变量被隐式地指定为`public static final`，方法被隐式地指定为\n     `public abstract`,接口中的方法不能有具体的实现(JDK8之后接口可以有default方法)。\n   - 接口与抽象类比较: \n     - 1.语法层面上:\n\t   - 1).抽象类可以提供成员方法的实现细节而接口中只能存在public abstract方法\n\t   - 2).抽象类中的成员变量可以是各种类型，而接口中的成员变量只能是public static final类型\n\t   - 3).接口中不能存在静态代码块和静态方法，而抽象类中可以\n\t   - 4).一个类只能继承一个抽象类而可以实现多个接口\n     - 2.设计层面上: \n\t   - 1).抽象类是对一种事物对象的抽象，而接口是对事物行为的抽象，抽象类是对整个类整体的抽象，包括属性、行为，而接口是对类的局部\n\t   (行为)的抽象。继承抽象类是\"是不是\"的关系，实现接口是\"有没有\"的关系。\n       - 2).设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计，而接口是一种行为规范，它是一种辐射式设计   \n   \n### 9. fail-fast\n   - fail-fast：机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。\n     例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出异常: \n     `ConcurrentModificationException`，产生fail-fast事件。\n     \n### 10. JDK和CGLIB动态代理\n   - JDK动态代理只能针对实现了接口的类生成代理(实例化一个类)。此时代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，\n     具体接口实现中，可以在调用目标对象相应方法前后加上其他业务处理逻辑。\n   - CGLIB是针对类实现代理，主要是对指定的类生成一个子类(没有实例化一个类)，覆盖其中的方法。\n     \n## JVM\n### 1. 内存模型\n   - **堆内存(Heap)** 是线程间共享内存，主要存放java的对象及数组\n   - **栈内存(Stack)** 是线程间不共享的，主要存放基本数据类型和对象及数组的引用等   \n   - **方法区(Method Area)** 是存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据\n   - **本地方法栈(Native Method Stack)** 为虚拟机调用本地Native方法提供服务,有的虚拟机与虚拟机栈合二为一\n   - **程序计数器(Program Counter Register)** 是当前虚拟机执行指令的地址，当执行到Native方法时其值为空(Undefined)\n   - **运行时常量池(Runtime Constant Pool)** 用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放\n   - **直接内存(Direct Memory)** NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据\n\n### 2. GC的2种判定方法\n   - **引用计数**: 实现简单、高效，但会出现循环引用的时候对象将无法得到回收\n   - **引用链**：即可达性分析，以GC Roots为根节点开始向下搜索，所走的路径叫做引用链(Reference Chain)，当一个对象到GC Roots对象没有\n     任何引用链时说明该对象不可用，可作为GC Roots的对象：\n     - 1.虚拟机栈（栈帧中的本地变量表）中引用的对象。\n     - 2.方法区中的类静态属性引用的对象或者常量引用的对象。\n     - 3.本地方法栈中JNI（就是native方法）引用的对象。\t \n\n### 3. java自动内存管理\n   > [Java自动内存管理](/posts/2018/06/15/java-gc)   \n\t \n## 其他\n### 1. OSI网络模型\n\n  | 层级 |  名称     |                            描述                                       |\n  |:---:|:-----------|:--------------------------------------------------------------------|\n  |  1  | 应用层     |指网络操作系统和具体的应用程序，对应WWW服务器、FTP服务器等应用软件           |\n  |  2  | 表示层     |数据语法的转换、数据的传送等                                             |\n  |  3  | 会话层     |建立起两端之间的会话关系，并负责数据的传送                                 |\n  |  4  | 传输层     |负责错误的检查与修复，以确保传送的质量，是TCP/UDP工作的地方。（报文）         |\n  |  5  | 网络层     |提供了编址方案,IP协议工作的地方(数据包）                                  |\n  |  6  | 数据链路层 |将由物理层传来的未经处理的位数据包装成数据帧                                |\n  |  7  | 物理层     |对应网线、网卡、接口等物理设备(位)                                        |\n\n### 2. TCP/IP协议\n   - 应用层\n   - 传输层\n   - 网络层\n   - 链路层\n\n### 3. IP分类\n   - A类地址（1.0.0.0-126.255.255.255）用于最大型的网络，该网络的节点数可达16,777,216个。\n   - B类地址（128.0.0.0-191.255.255.255）用于中型网络，节点数可达65,536个。\n   - C类地址（192.0.0.0-223.255.255.255）用于256个节点以下的小型网络的单点网络通信。\n   - D类地址（224.0.0.0-239.255.255.255）并不反映网络的大小，只是用于组播，用来指定所分配的接收组播的节点组，这个节点组由组播订\n     阅成员组成。D类地址的范围为\n   - E类（240.0.0.0-255.255.255.254）地址用于试验。   \n   \n### 4. TCP与UDP\n   - TCP、UDP都是传输层协议\n   - TCP(Transmission Control Protocol, 传输控制协议) 是面向连接的协议(即在收发数据前必须和对方建立可靠连接)，TCP建立连接要3次\n     握手，TCP断开连接需要4次挥手，保证了数据通信的可靠性；TCP包头最小长度为20个字节数。\n   - UDP(User Data Protocol, 用户数据报协议) 是一个非连接的协议(即传输数据之前源端和终端不建立连接)，只是简单的把应用程序的数据\n     尽快地扔到网络上，因此UDP传输速度只受应用程序生成数据速度、计算机的能力和传输带宽的限制，接收端，UDP把每个消息段放入队列中\n\t 应用程序读取使用；UDP可以一台服务器同时向多台客户机传输相同数据；UDP消息头很短只有8个字节；UDP尽可能快的发送数据，但不保证\n\t 数据的可靠性(丢包，顺序等)；UDP是面向报文的，发送方的报文只是添加首部后就向下交付给IP层，既不拆分也不合并，这些需要接收端\n\t 应用程序自己实现。\n\n### 5. 死锁的必要条件\n   - **互斥条件**：资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源\n     被另一进程占有时，则申请者等待直到资源被占有者释放。\n   - **不可剥夺条件**：进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。\n   - **请求和保持条件**：进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。\n   - **循环等待条件**：在发生死锁时必然存在一个进程等待队列{P1,P2,…,Pn},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有\n     的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所深情地资源。\t \n\n### 6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)\n   - MyISAM使用B-Tree实现主键索引、唯一索引和非主键索引。\n   - InnoDB中非主键索引使用的是B-Tree数据结构，而主键索引使用的是B+Tree。\t \n\n### 7. 进程与线程\n   - 进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元\n   - 同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。\n   - 进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进\n     程中的其他线程的结束   \n   - 线程是轻量级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的\n   - 线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源\n   - 线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标\n     示一个进程或一个线程的标志\n\n### 8. IPC通信方式\n   - **管道(Pipe)**：匿名管道（pipe亲缘关系的进程通信）、命名管道（mkfifo/mknod）\n   - **消息队列**：是基于消息的、用无亲缘关系的进程间通信，主要函数：msgget、msgsend、msgrecv、msgctl\n   - **信号量**：相当于一把互斥锁，通过p、v操作，主要函数：semget、semop、semctl\n   - **共享内存**：是进程间通信速度最快的，所以用经常是集合信号量或互斥锁来实现同步，shmget、shmat、shmdt、shmctl  \n\n### 9. 虚拟内存\n   - 是将进程部分装入内存中，从而能实现一个很大的程序能在一个比它小的内存中运行，它的主要实现是靠程序的换进换出来实现的，因为内存\n     中0-3G是用户使用，3-4G才是内存使用，通过映射来实现来进行逻辑地址到物理地址的映射\n\n### 10. 设计原则\n   - 依赖倒置原则 － Dependency Inversion Principle (DIP) \n   - 里氏替换原则 － Liskov Substitution Principle (LSP) \n   - 接口分隔原则 － Interface Segregation Principle (ISP) \n   - 单一职责原则 － Single Responsibility Principle (SRP) \n   - 开闭原则 － The Open-Closed Principle (OCP)\n","slug":"interview-experience","published":1,"updated":"2018-12-12T15:04:12.663Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vhv0000uoil2m1d7qkv","content":"<h2 id=\"一-JAVA基础\"><a href=\"#一-JAVA基础\" class=\"headerlink\" title=\"一. JAVA基础\"></a>一. JAVA基础</h2><h3 id=\"1-9种基本数据类型及其封装类-所占大小\"><a href=\"#1-9种基本数据类型及其封装类-所占大小\" class=\"headerlink\" title=\"1. 9种基本数据类型及其封装类,所占大小\"></a>1. 9种基本数据类型及其封装类,所占大小</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">包装类</th>\n<th style=\"text-align:center\">大小(字节)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">Byte</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">Character</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">Short</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">Integer</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">Float</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">Double</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">Long</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void</td>\n<td style=\"text-align:center\">Void</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-Object类方法\"><a href=\"#2-Object类方法\" class=\"headerlink\" title=\"2. Object类方法\"></a>2. Object类方法</h3><ul>\n<li>getClass() 获取类对象Class (native)</li>\n<li>hashCode() 获取hashCode值(native)</li>\n<li>equals(Object) 判断是否同一对象</li>\n<li>clone() 对象克隆(native)</li>\n<li>wait() </li>\n<li>wait(timeout)</li>\n<li>wait(timeout, nanos)</li>\n<li>notify()</li>\n<li>notifyAll()</li>\n<li>toString()</li>\n<li>finalize() (protected)</li>\n</ul>\n<h3 id=\"3-equals-、hashCode、-比较\"><a href=\"#3-equals-、hashCode、-比较\" class=\"headerlink\" title=\"3. equals 、hashCode、== 比较\"></a>3. equals 、hashCode、== 比较</h3><ul>\n<li>equals是Object类方法，内部实现的是判断对象是否相等(即 ==)。</li>\n<li>hashCode是Object的native方法，返回的是类似表示对象地址的整数。</li>\n<li>==是判断2个对象是否相同。</li>\n<li>如果2个对象相同则hashCode一定相等，若2个对象不同hashCode不一定相等。</li>\n<li>一般地重写了equals方法建议也要重写hashCode方法。</li>\n</ul>\n<h3 id=\"4-面向对象的特性与含义\"><a href=\"#4-面向对象的特性与含义\" class=\"headerlink\" title=\"4. 面向对象的特性与含义\"></a>4. 面向对象的特性与含义</h3><ul>\n<li><strong>抽象</strong>  是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不<br>关注这些行为的细节是什么。</li>\n<li><strong>封装</strong>  是指将某事物的属性和行为包装到对象中，这个对象只对外公布需要公开的属性和行为，而这个公布也是可以有选择性的公布<br>给其它对象，private、protected、public三种修饰符或不用(即默认default)对外部对象访问该对象的属性和行为进行限制。</li>\n<li><strong>继承</strong>  是子对象可以继承父对象的属性和行为，亦即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为。</li>\n<li><strong>多态</strong>  是指父对象中的同一个行为能在其多个子对象中有不同的表现。也就是说子对象可以使用重写父对象中的行为,使其拥有不同于<br>父对象和其它子对象的表现,这就是overriding(重写)。实现多态的技术称为：动态绑定(dynamic binding)，是指在执行期间判<br>断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</li>\n</ul>\n<h3 id=\"5-Override与Overload\"><a href=\"#5-Override与Overload\" class=\"headerlink\" title=\"5. Override与Overload\"></a>5. Override与Overload</h3><ul>\n<li><strong>Override</strong>是重写:方法名称、参数个数，类型，顺序，返回值类型都是必须和父类方法一致的。它的关系是父子关系。</li>\n<li><strong>Overload</strong>是重载:方法名称不变，方法参数个数、类型、顺序至少一个不同。它的关系是同一个类，同一个方法名。</li>\n</ul>\n<h3 id=\"6-wait与sleep\"><a href=\"#6-wait与sleep\" class=\"headerlink\" title=\"6. wait与sleep\"></a>6. wait与sleep</h3><ul>\n<li>wait是Object类的方法；而sleep是Thread类的静态方法。</li>\n<li>当线程执行到wait方法时，他就会进入到该对象相关的等待池中，同时释放对象的机锁，其他线程可访问，直到超时或该对象调用notify<br>或notifyAll；而当线程执行sleep方法时，线程进入阻塞状态，让出CPU资源，但在Synchronized同步块中不能释放对象的锁。</li>\n<li>wait方法必须放在synchronized代码块中，否则会在时抛出<code>java.lang.IllegalMonitorStateException</code>异常。</li>\n<li>wait和sleep都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException(但不建议使用该方法)。</li>\n</ul>\n<h3 id=\"7-java并发\"><a href=\"#7-java并发\" class=\"headerlink\" title=\"7. java并发\"></a>7. java并发</h3><blockquote>\n<p><a href=\"/posts/2018/06/15/java-concurrent\">Java并发编程</a>   </p>\n</blockquote>\n<h3 id=\"8-interface与abstract类\"><a href=\"#8-interface与abstract类\" class=\"headerlink\" title=\"8. interface与abstract类\"></a>8. interface与abstract类</h3><ul>\n<li>抽象类是包含有抽象方法的类(也可以拥有成员变量和普通成员方法)，抽象方法是只有方法声明没有具体实现的方法，所以抽象类不能实例化，是为<br>了继承而存的，抽象类与普通类有3点区别：<ul>\n<li>1.抽象方法必须是public或protected，缺损情况下默认为public;</li>\n<li>2.抽象类不能被实例化；</li>\n<li>3.如果一个类继承了抽象类，则子类必须实现父类的抽象方法，若没有实现父类抽象方法，则子类也必须定义为抽象类。  </li>\n</ul>\n</li>\n<li>接口是泛指供别人调用的方法或函数，接口中可以有变量和方法，变量被隐式地指定为<code>public static final</code>，方法被隐式地指定为<br><code>public abstract</code>,接口中的方法不能有具体的实现(JDK8之后接口可以有default方法)。</li>\n<li>接口与抽象类比较: <ul>\n<li>1.语法层面上:<ul>\n<li>1).抽象类可以提供成员方法的实现细节而接口中只能存在public abstract方法</li>\n<li>2).抽象类中的成员变量可以是各种类型，而接口中的成员变量只能是public static final类型</li>\n<li>3).接口中不能存在静态代码块和静态方法，而抽象类中可以</li>\n<li>4).一个类只能继承一个抽象类而可以实现多个接口</li>\n</ul>\n</li>\n<li>2.设计层面上: <ul>\n<li>1).抽象类是对一种事物对象的抽象，而接口是对事物行为的抽象，抽象类是对整个类整体的抽象，包括属性、行为，而接口是对类的局部<br>(行为)的抽象。继承抽象类是”是不是”的关系，实现接口是”有没有”的关系。</li>\n<li>2).设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计，而接口是一种行为规范，它是一种辐射式设计   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"9-fail-fast\"><a href=\"#9-fail-fast\" class=\"headerlink\" title=\"9. fail-fast\"></a>9. fail-fast</h3><ul>\n<li>fail-fast：机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。<br>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出异常:<br><code>ConcurrentModificationException</code>，产生fail-fast事件。</li>\n</ul>\n<h3 id=\"10-JDK和CGLIB动态代理\"><a href=\"#10-JDK和CGLIB动态代理\" class=\"headerlink\" title=\"10. JDK和CGLIB动态代理\"></a>10. JDK和CGLIB动态代理</h3><ul>\n<li>JDK动态代理只能针对实现了接口的类生成代理(实例化一个类)。此时代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，<br>具体接口实现中，可以在调用目标对象相应方法前后加上其他业务处理逻辑。</li>\n<li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类(没有实例化一个类)，覆盖其中的方法。</li>\n</ul>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><h3 id=\"1-内存模型\"><a href=\"#1-内存模型\" class=\"headerlink\" title=\"1. 内存模型\"></a>1. 内存模型</h3><ul>\n<li><strong>堆内存(Heap)</strong> 是线程间共享内存，主要存放java的对象及数组</li>\n<li><strong>栈内存(Stack)</strong> 是线程间不共享的，主要存放基本数据类型和对象及数组的引用等   </li>\n<li><strong>方法区(Method Area)</strong> 是存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据</li>\n<li><strong>本地方法栈(Native Method Stack)</strong> 为虚拟机调用本地Native方法提供服务,有的虚拟机与虚拟机栈合二为一</li>\n<li><strong>程序计数器(Program Counter Register)</strong> 是当前虚拟机执行指令的地址，当执行到Native方法时其值为空(Undefined)</li>\n<li><strong>运行时常量池(Runtime Constant Pool)</strong> 用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放</li>\n<li><strong>直接内存(Direct Memory)</strong> NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据</li>\n</ul>\n<h3 id=\"2-GC的2种判定方法\"><a href=\"#2-GC的2种判定方法\" class=\"headerlink\" title=\"2. GC的2种判定方法\"></a>2. GC的2种判定方法</h3><ul>\n<li><strong>引用计数</strong>: 实现简单、高效，但会出现循环引用的时候对象将无法得到回收</li>\n<li><strong>引用链</strong>：即可达性分析，以GC Roots为根节点开始向下搜索，所走的路径叫做引用链(Reference Chain)，当一个对象到GC Roots对象没有<br>任何引用链时说明该对象不可用，可作为GC Roots的对象：<ul>\n<li>1.虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>\n<li>2.方法区中的类静态属性引用的对象或者常量引用的对象。</li>\n<li>3.本地方法栈中JNI（就是native方法）引用的对象。     </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-java自动内存管理\"><a href=\"#3-java自动内存管理\" class=\"headerlink\" title=\"3. java自动内存管理\"></a>3. java自动内存管理</h3><blockquote>\n<p><a href=\"/posts/2018/06/15/java-gc\">Java自动内存管理</a>   </p>\n</blockquote>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"1-OSI网络模型\"><a href=\"#1-OSI网络模型\" class=\"headerlink\" title=\"1. OSI网络模型\"></a>1. OSI网络模型</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">层级</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">应用层</td>\n<td style=\"text-align:left\">指网络操作系统和具体的应用程序，对应WWW服务器、FTP服务器等应用软件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">表示层</td>\n<td style=\"text-align:left\">数据语法的转换、数据的传送等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">会话层</td>\n<td style=\"text-align:left\">建立起两端之间的会话关系，并负责数据的传送</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">传输层</td>\n<td style=\"text-align:left\">负责错误的检查与修复，以确保传送的质量，是TCP/UDP工作的地方。（报文）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">网络层</td>\n<td style=\"text-align:left\">提供了编址方案,IP协议工作的地方(数据包）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">数据链路层</td>\n<td style=\"text-align:left\">将由物理层传来的未经处理的位数据包装成数据帧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">物理层</td>\n<td style=\"text-align:left\">对应网线、网卡、接口等物理设备(位)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-TCP-IP协议\"><a href=\"#2-TCP-IP协议\" class=\"headerlink\" title=\"2. TCP/IP协议\"></a>2. TCP/IP协议</h3><ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>链路层</li>\n</ul>\n<h3 id=\"3-IP分类\"><a href=\"#3-IP分类\" class=\"headerlink\" title=\"3. IP分类\"></a>3. IP分类</h3><ul>\n<li>A类地址（1.0.0.0-126.255.255.255）用于最大型的网络，该网络的节点数可达16,777,216个。</li>\n<li>B类地址（128.0.0.0-191.255.255.255）用于中型网络，节点数可达65,536个。</li>\n<li>C类地址（192.0.0.0-223.255.255.255）用于256个节点以下的小型网络的单点网络通信。</li>\n<li>D类地址（224.0.0.0-239.255.255.255）并不反映网络的大小，只是用于组播，用来指定所分配的接收组播的节点组，这个节点组由组播订<br>阅成员组成。D类地址的范围为</li>\n<li>E类（240.0.0.0-255.255.255.254）地址用于试验。   </li>\n</ul>\n<h3 id=\"4-TCP与UDP\"><a href=\"#4-TCP与UDP\" class=\"headerlink\" title=\"4. TCP与UDP\"></a>4. TCP与UDP</h3><ul>\n<li>TCP、UDP都是传输层协议</li>\n<li>TCP(Transmission Control Protocol, 传输控制协议) 是面向连接的协议(即在收发数据前必须和对方建立可靠连接)，TCP建立连接要3次<br>握手，TCP断开连接需要4次挥手，保证了数据通信的可靠性；TCP包头最小长度为20个字节数。</li>\n<li>UDP(User Data Protocol, 用户数据报协议) 是一个非连接的协议(即传输数据之前源端和终端不建立连接)，只是简单的把应用程序的数据<br>尽快地扔到网络上，因此UDP传输速度只受应用程序生成数据速度、计算机的能力和传输带宽的限制，接收端，UDP把每个消息段放入队列中<br>应用程序读取使用；UDP可以一台服务器同时向多台客户机传输相同数据；UDP消息头很短只有8个字节；UDP尽可能快的发送数据，但不保证<br>数据的可靠性(丢包，顺序等)；UDP是面向报文的，发送方的报文只是添加首部后就向下交付给IP层，既不拆分也不合并，这些需要接收端<br>应用程序自己实现。</li>\n</ul>\n<h3 id=\"5-死锁的必要条件\"><a href=\"#5-死锁的必要条件\" class=\"headerlink\" title=\"5. 死锁的必要条件\"></a>5. 死锁的必要条件</h3><ul>\n<li><strong>互斥条件</strong>：资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源<br>被另一进程占有时，则申请者等待直到资源被占有者释放。</li>\n<li><strong>不可剥夺条件</strong>：进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。</li>\n<li><strong>请求和保持条件</strong>：进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。</li>\n<li><strong>循环等待条件</strong>：在发生死锁时必然存在一个进程等待队列{P1,P2,…,Pn},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有<br>的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所深情地资源。     </li>\n</ul>\n<h3 id=\"6-MySQL索引-5-5之前默认MyISAM引擎，5-5之后默认InnoDB\"><a href=\"#6-MySQL索引-5-5之前默认MyISAM引擎，5-5之后默认InnoDB\" class=\"headerlink\" title=\"6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)\"></a>6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)</h3><ul>\n<li>MyISAM使用B-Tree实现主键索引、唯一索引和非主键索引。</li>\n<li>InnoDB中非主键索引使用的是B-Tree数据结构，而主键索引使用的是B+Tree。     </li>\n</ul>\n<h3 id=\"7-进程与线程\"><a href=\"#7-进程与线程\" class=\"headerlink\" title=\"7. 进程与线程\"></a>7. 进程与线程</h3><ul>\n<li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元</li>\n<li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li>\n<li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进<br>程中的其他线程的结束   </li>\n<li>线程是轻量级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li>\n<li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li>\n<li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标<br>示一个进程或一个线程的标志</li>\n</ul>\n<h3 id=\"8-IPC通信方式\"><a href=\"#8-IPC通信方式\" class=\"headerlink\" title=\"8. IPC通信方式\"></a>8. IPC通信方式</h3><ul>\n<li><strong>管道(Pipe)</strong>：匿名管道（pipe亲缘关系的进程通信）、命名管道（mkfifo/mknod）</li>\n<li><strong>消息队列</strong>：是基于消息的、用无亲缘关系的进程间通信，主要函数：msgget、msgsend、msgrecv、msgctl</li>\n<li><strong>信号量</strong>：相当于一把互斥锁，通过p、v操作，主要函数：semget、semop、semctl</li>\n<li><strong>共享内存</strong>：是进程间通信速度最快的，所以用经常是集合信号量或互斥锁来实现同步，shmget、shmat、shmdt、shmctl  </li>\n</ul>\n<h3 id=\"9-虚拟内存\"><a href=\"#9-虚拟内存\" class=\"headerlink\" title=\"9. 虚拟内存\"></a>9. 虚拟内存</h3><ul>\n<li>是将进程部分装入内存中，从而能实现一个很大的程序能在一个比它小的内存中运行，它的主要实现是靠程序的换进换出来实现的，因为内存<br>中0-3G是用户使用，3-4G才是内存使用，通过映射来实现来进行逻辑地址到物理地址的映射</li>\n</ul>\n<h3 id=\"10-设计原则\"><a href=\"#10-设计原则\" class=\"headerlink\" title=\"10. 设计原则\"></a>10. 设计原则</h3><ul>\n<li>依赖倒置原则 － Dependency Inversion Principle (DIP) </li>\n<li>里氏替换原则 － Liskov Substitution Principle (LSP) </li>\n<li>接口分隔原则 － Interface Segregation Principle (ISP) </li>\n<li>单一职责原则 － Single Responsibility Principle (SRP) </li>\n<li>开闭原则 － The Open-Closed Principle (OCP)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-JAVA基础\"><a href=\"#一-JAVA基础\" class=\"headerlink\" title=\"一. JAVA基础\"></a>一. JAVA基础</h2><h3 id=\"1-9种基本数据类型及其封装类-所占大小\"><a href=\"#1-9种基本数据类型及其封装类-所占大小\" class=\"headerlink\" title=\"1. 9种基本数据类型及其封装类,所占大小\"></a>1. 9种基本数据类型及其封装类,所占大小</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">包装类</th>\n<th style=\"text-align:center\">大小(字节)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">Byte</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">Character</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">Short</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">Integer</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">Float</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">Double</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">Long</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void</td>\n<td style=\"text-align:center\">Void</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-Object类方法\"><a href=\"#2-Object类方法\" class=\"headerlink\" title=\"2. Object类方法\"></a>2. Object类方法</h3><ul>\n<li>getClass() 获取类对象Class (native)</li>\n<li>hashCode() 获取hashCode值(native)</li>\n<li>equals(Object) 判断是否同一对象</li>\n<li>clone() 对象克隆(native)</li>\n<li>wait() </li>\n<li>wait(timeout)</li>\n<li>wait(timeout, nanos)</li>\n<li>notify()</li>\n<li>notifyAll()</li>\n<li>toString()</li>\n<li>finalize() (protected)</li>\n</ul>\n<h3 id=\"3-equals-、hashCode、-比较\"><a href=\"#3-equals-、hashCode、-比较\" class=\"headerlink\" title=\"3. equals 、hashCode、== 比较\"></a>3. equals 、hashCode、== 比较</h3><ul>\n<li>equals是Object类方法，内部实现的是判断对象是否相等(即 ==)。</li>\n<li>hashCode是Object的native方法，返回的是类似表示对象地址的整数。</li>\n<li>==是判断2个对象是否相同。</li>\n<li>如果2个对象相同则hashCode一定相等，若2个对象不同hashCode不一定相等。</li>\n<li>一般地重写了equals方法建议也要重写hashCode方法。</li>\n</ul>\n<h3 id=\"4-面向对象的特性与含义\"><a href=\"#4-面向对象的特性与含义\" class=\"headerlink\" title=\"4. 面向对象的特性与含义\"></a>4. 面向对象的特性与含义</h3><ul>\n<li><strong>抽象</strong>  是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不<br>关注这些行为的细节是什么。</li>\n<li><strong>封装</strong>  是指将某事物的属性和行为包装到对象中，这个对象只对外公布需要公开的属性和行为，而这个公布也是可以有选择性的公布<br>给其它对象，private、protected、public三种修饰符或不用(即默认default)对外部对象访问该对象的属性和行为进行限制。</li>\n<li><strong>继承</strong>  是子对象可以继承父对象的属性和行为，亦即父对象拥有的属性和行为，其子对象也就拥有了这些属性和行为。</li>\n<li><strong>多态</strong>  是指父对象中的同一个行为能在其多个子对象中有不同的表现。也就是说子对象可以使用重写父对象中的行为,使其拥有不同于<br>父对象和其它子对象的表现,这就是overriding(重写)。实现多态的技术称为：动态绑定(dynamic binding)，是指在执行期间判<br>断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</li>\n</ul>\n<h3 id=\"5-Override与Overload\"><a href=\"#5-Override与Overload\" class=\"headerlink\" title=\"5. Override与Overload\"></a>5. Override与Overload</h3><ul>\n<li><strong>Override</strong>是重写:方法名称、参数个数，类型，顺序，返回值类型都是必须和父类方法一致的。它的关系是父子关系。</li>\n<li><strong>Overload</strong>是重载:方法名称不变，方法参数个数、类型、顺序至少一个不同。它的关系是同一个类，同一个方法名。</li>\n</ul>\n<h3 id=\"6-wait与sleep\"><a href=\"#6-wait与sleep\" class=\"headerlink\" title=\"6. wait与sleep\"></a>6. wait与sleep</h3><ul>\n<li>wait是Object类的方法；而sleep是Thread类的静态方法。</li>\n<li>当线程执行到wait方法时，他就会进入到该对象相关的等待池中，同时释放对象的机锁，其他线程可访问，直到超时或该对象调用notify<br>或notifyAll；而当线程执行sleep方法时，线程进入阻塞状态，让出CPU资源，但在Synchronized同步块中不能释放对象的锁。</li>\n<li>wait方法必须放在synchronized代码块中，否则会在时抛出<code>java.lang.IllegalMonitorStateException</code>异常。</li>\n<li>wait和sleep都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException(但不建议使用该方法)。</li>\n</ul>\n<h3 id=\"7-java并发\"><a href=\"#7-java并发\" class=\"headerlink\" title=\"7. java并发\"></a>7. java并发</h3><blockquote>\n<p><a href=\"/posts/2018/06/15/java-concurrent\">Java并发编程</a>   </p>\n</blockquote>\n<h3 id=\"8-interface与abstract类\"><a href=\"#8-interface与abstract类\" class=\"headerlink\" title=\"8. interface与abstract类\"></a>8. interface与abstract类</h3><ul>\n<li>抽象类是包含有抽象方法的类(也可以拥有成员变量和普通成员方法)，抽象方法是只有方法声明没有具体实现的方法，所以抽象类不能实例化，是为<br>了继承而存的，抽象类与普通类有3点区别：<ul>\n<li>1.抽象方法必须是public或protected，缺损情况下默认为public;</li>\n<li>2.抽象类不能被实例化；</li>\n<li>3.如果一个类继承了抽象类，则子类必须实现父类的抽象方法，若没有实现父类抽象方法，则子类也必须定义为抽象类。  </li>\n</ul>\n</li>\n<li>接口是泛指供别人调用的方法或函数，接口中可以有变量和方法，变量被隐式地指定为<code>public static final</code>，方法被隐式地指定为<br><code>public abstract</code>,接口中的方法不能有具体的实现(JDK8之后接口可以有default方法)。</li>\n<li>接口与抽象类比较: <ul>\n<li>1.语法层面上:<ul>\n<li>1).抽象类可以提供成员方法的实现细节而接口中只能存在public abstract方法</li>\n<li>2).抽象类中的成员变量可以是各种类型，而接口中的成员变量只能是public static final类型</li>\n<li>3).接口中不能存在静态代码块和静态方法，而抽象类中可以</li>\n<li>4).一个类只能继承一个抽象类而可以实现多个接口</li>\n</ul>\n</li>\n<li>2.设计层面上: <ul>\n<li>1).抽象类是对一种事物对象的抽象，而接口是对事物行为的抽象，抽象类是对整个类整体的抽象，包括属性、行为，而接口是对类的局部<br>(行为)的抽象。继承抽象类是”是不是”的关系，实现接口是”有没有”的关系。</li>\n<li>2).设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计，而接口是一种行为规范，它是一种辐射式设计   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"9-fail-fast\"><a href=\"#9-fail-fast\" class=\"headerlink\" title=\"9. fail-fast\"></a>9. fail-fast</h3><ul>\n<li>fail-fast：机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。<br>例如：当某一个线程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出异常:<br><code>ConcurrentModificationException</code>，产生fail-fast事件。</li>\n</ul>\n<h3 id=\"10-JDK和CGLIB动态代理\"><a href=\"#10-JDK和CGLIB动态代理\" class=\"headerlink\" title=\"10. JDK和CGLIB动态代理\"></a>10. JDK和CGLIB动态代理</h3><ul>\n<li>JDK动态代理只能针对实现了接口的类生成代理(实例化一个类)。此时代理对象和目标对象实现了相同的接口，目标对象作为代理对象的一个属性，<br>具体接口实现中，可以在调用目标对象相应方法前后加上其他业务处理逻辑。</li>\n<li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类(没有实例化一个类)，覆盖其中的方法。</li>\n</ul>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><h3 id=\"1-内存模型\"><a href=\"#1-内存模型\" class=\"headerlink\" title=\"1. 内存模型\"></a>1. 内存模型</h3><ul>\n<li><strong>堆内存(Heap)</strong> 是线程间共享内存，主要存放java的对象及数组</li>\n<li><strong>栈内存(Stack)</strong> 是线程间不共享的，主要存放基本数据类型和对象及数组的引用等   </li>\n<li><strong>方法区(Method Area)</strong> 是存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据</li>\n<li><strong>本地方法栈(Native Method Stack)</strong> 为虚拟机调用本地Native方法提供服务,有的虚拟机与虚拟机栈合二为一</li>\n<li><strong>程序计数器(Program Counter Register)</strong> 是当前虚拟机执行指令的地址，当执行到Native方法时其值为空(Undefined)</li>\n<li><strong>运行时常量池(Runtime Constant Pool)</strong> 用于存放编译期生成的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放</li>\n<li><strong>直接内存(Direct Memory)</strong> NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据</li>\n</ul>\n<h3 id=\"2-GC的2种判定方法\"><a href=\"#2-GC的2种判定方法\" class=\"headerlink\" title=\"2. GC的2种判定方法\"></a>2. GC的2种判定方法</h3><ul>\n<li><strong>引用计数</strong>: 实现简单、高效，但会出现循环引用的时候对象将无法得到回收</li>\n<li><strong>引用链</strong>：即可达性分析，以GC Roots为根节点开始向下搜索，所走的路径叫做引用链(Reference Chain)，当一个对象到GC Roots对象没有<br>任何引用链时说明该对象不可用，可作为GC Roots的对象：<ul>\n<li>1.虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>\n<li>2.方法区中的类静态属性引用的对象或者常量引用的对象。</li>\n<li>3.本地方法栈中JNI（就是native方法）引用的对象。     </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-java自动内存管理\"><a href=\"#3-java自动内存管理\" class=\"headerlink\" title=\"3. java自动内存管理\"></a>3. java自动内存管理</h3><blockquote>\n<p><a href=\"/posts/2018/06/15/java-gc\">Java自动内存管理</a>   </p>\n</blockquote>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"1-OSI网络模型\"><a href=\"#1-OSI网络模型\" class=\"headerlink\" title=\"1. OSI网络模型\"></a>1. OSI网络模型</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">层级</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">应用层</td>\n<td style=\"text-align:left\">指网络操作系统和具体的应用程序，对应WWW服务器、FTP服务器等应用软件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">表示层</td>\n<td style=\"text-align:left\">数据语法的转换、数据的传送等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">会话层</td>\n<td style=\"text-align:left\">建立起两端之间的会话关系，并负责数据的传送</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">传输层</td>\n<td style=\"text-align:left\">负责错误的检查与修复，以确保传送的质量，是TCP/UDP工作的地方。（报文）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">网络层</td>\n<td style=\"text-align:left\">提供了编址方案,IP协议工作的地方(数据包）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">数据链路层</td>\n<td style=\"text-align:left\">将由物理层传来的未经处理的位数据包装成数据帧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">物理层</td>\n<td style=\"text-align:left\">对应网线、网卡、接口等物理设备(位)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-TCP-IP协议\"><a href=\"#2-TCP-IP协议\" class=\"headerlink\" title=\"2. TCP/IP协议\"></a>2. TCP/IP协议</h3><ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>链路层</li>\n</ul>\n<h3 id=\"3-IP分类\"><a href=\"#3-IP分类\" class=\"headerlink\" title=\"3. IP分类\"></a>3. IP分类</h3><ul>\n<li>A类地址（1.0.0.0-126.255.255.255）用于最大型的网络，该网络的节点数可达16,777,216个。</li>\n<li>B类地址（128.0.0.0-191.255.255.255）用于中型网络，节点数可达65,536个。</li>\n<li>C类地址（192.0.0.0-223.255.255.255）用于256个节点以下的小型网络的单点网络通信。</li>\n<li>D类地址（224.0.0.0-239.255.255.255）并不反映网络的大小，只是用于组播，用来指定所分配的接收组播的节点组，这个节点组由组播订<br>阅成员组成。D类地址的范围为</li>\n<li>E类（240.0.0.0-255.255.255.254）地址用于试验。   </li>\n</ul>\n<h3 id=\"4-TCP与UDP\"><a href=\"#4-TCP与UDP\" class=\"headerlink\" title=\"4. TCP与UDP\"></a>4. TCP与UDP</h3><ul>\n<li>TCP、UDP都是传输层协议</li>\n<li>TCP(Transmission Control Protocol, 传输控制协议) 是面向连接的协议(即在收发数据前必须和对方建立可靠连接)，TCP建立连接要3次<br>握手，TCP断开连接需要4次挥手，保证了数据通信的可靠性；TCP包头最小长度为20个字节数。</li>\n<li>UDP(User Data Protocol, 用户数据报协议) 是一个非连接的协议(即传输数据之前源端和终端不建立连接)，只是简单的把应用程序的数据<br>尽快地扔到网络上，因此UDP传输速度只受应用程序生成数据速度、计算机的能力和传输带宽的限制，接收端，UDP把每个消息段放入队列中<br>应用程序读取使用；UDP可以一台服务器同时向多台客户机传输相同数据；UDP消息头很短只有8个字节；UDP尽可能快的发送数据，但不保证<br>数据的可靠性(丢包，顺序等)；UDP是面向报文的，发送方的报文只是添加首部后就向下交付给IP层，既不拆分也不合并，这些需要接收端<br>应用程序自己实现。</li>\n</ul>\n<h3 id=\"5-死锁的必要条件\"><a href=\"#5-死锁的必要条件\" class=\"headerlink\" title=\"5. 死锁的必要条件\"></a>5. 死锁的必要条件</h3><ul>\n<li><strong>互斥条件</strong>：资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源<br>被另一进程占有时，则申请者等待直到资源被占有者释放。</li>\n<li><strong>不可剥夺条件</strong>：进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。</li>\n<li><strong>请求和保持条件</strong>：进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。</li>\n<li><strong>循环等待条件</strong>：在发生死锁时必然存在一个进程等待队列{P1,P2,…,Pn},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有<br>的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所深情地资源。     </li>\n</ul>\n<h3 id=\"6-MySQL索引-5-5之前默认MyISAM引擎，5-5之后默认InnoDB\"><a href=\"#6-MySQL索引-5-5之前默认MyISAM引擎，5-5之后默认InnoDB\" class=\"headerlink\" title=\"6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)\"></a>6. MySQL索引(5.5之前默认MyISAM引擎，5.5之后默认InnoDB)</h3><ul>\n<li>MyISAM使用B-Tree实现主键索引、唯一索引和非主键索引。</li>\n<li>InnoDB中非主键索引使用的是B-Tree数据结构，而主键索引使用的是B+Tree。     </li>\n</ul>\n<h3 id=\"7-进程与线程\"><a href=\"#7-进程与线程\" class=\"headerlink\" title=\"7. 进程与线程\"></a>7. 进程与线程</h3><ul>\n<li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元</li>\n<li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li>\n<li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进<br>程中的其他线程的结束   </li>\n<li>线程是轻量级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li>\n<li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li>\n<li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标<br>示一个进程或一个线程的标志</li>\n</ul>\n<h3 id=\"8-IPC通信方式\"><a href=\"#8-IPC通信方式\" class=\"headerlink\" title=\"8. IPC通信方式\"></a>8. IPC通信方式</h3><ul>\n<li><strong>管道(Pipe)</strong>：匿名管道（pipe亲缘关系的进程通信）、命名管道（mkfifo/mknod）</li>\n<li><strong>消息队列</strong>：是基于消息的、用无亲缘关系的进程间通信，主要函数：msgget、msgsend、msgrecv、msgctl</li>\n<li><strong>信号量</strong>：相当于一把互斥锁，通过p、v操作，主要函数：semget、semop、semctl</li>\n<li><strong>共享内存</strong>：是进程间通信速度最快的，所以用经常是集合信号量或互斥锁来实现同步，shmget、shmat、shmdt、shmctl  </li>\n</ul>\n<h3 id=\"9-虚拟内存\"><a href=\"#9-虚拟内存\" class=\"headerlink\" title=\"9. 虚拟内存\"></a>9. 虚拟内存</h3><ul>\n<li>是将进程部分装入内存中，从而能实现一个很大的程序能在一个比它小的内存中运行，它的主要实现是靠程序的换进换出来实现的，因为内存<br>中0-3G是用户使用，3-4G才是内存使用，通过映射来实现来进行逻辑地址到物理地址的映射</li>\n</ul>\n<h3 id=\"10-设计原则\"><a href=\"#10-设计原则\" class=\"headerlink\" title=\"10. 设计原则\"></a>10. 设计原则</h3><ul>\n<li>依赖倒置原则 － Dependency Inversion Principle (DIP) </li>\n<li>里氏替换原则 － Liskov Substitution Principle (LSP) </li>\n<li>接口分隔原则 － Interface Segregation Principle (ISP) </li>\n<li>单一职责原则 － Single Responsibility Principle (SRP) </li>\n<li>开闭原则 － The Open-Closed Principle (OCP)</li>\n</ul>\n"},{"layout":"post","title":"Database","thumbnail":"/images/db/mysql_logo.png","date":"2018-06-18T15:15:27.000Z","_content":"\n## 一. 四大特性(CIAD)\n   1. **原子性(Atomicity)**: 要么全成功，要么全失败，失败会回滚。\n   2. **一致性(Consistency)**: 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执\n      行之前和执行之后都必须处于一致性状态。\n   3. **隔离性(Isolation)**: 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，\n      不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n   4. **持久性(Durability)**: 一旦事物提交成功，那么数据库中的数据就是永久改变的，即使系统故障也不会丢失提交的事物。\n   \n## 二. 数据库隔离级别\n### 1. 不考虑隔离级别造成的问题\n   1. 更新丢失: 2个事物同时更新一条数据会有一个事物把另一个事物的更新覆盖了，这是因为系统没有任何操作隔离导致的.\n   2. 脏读: 一个事物读取了另一个事物还未提交事物的数据\n   3. 不可重复读: 一个事务对同一行数据重复读取两次，但是却得到了不同的结果\n      * 虚读: 一个事物去改变数据改变后发现还有数据为按要求改变，是因为另一事物也做了改变的缘故\n      * 幻读: 同一个事物内多次查询返回的结果不一致，是因为另一事物对数据进行了改变\n     \n### 2. 隔离级别(低 -> 高)\n   1. **Read uncommitted(未授权读取、读未提交)**\n      * 当一个事物在执行写操作时，则不允许另一事物执行写操作，可执行其他操作，可由排他锁来实现\n      * 解决了更新丢失问题，但会出现脏读\n   2. **Read committed(授权读取、读提交)**\n      * 读取数据事物允许其他事物继续访问该数据，但未提交的数据禁止其他事物访问\n      * 避免了脏读，但可能会出现幻读\n   3. **Repeatable read(可重复读取)**\n      * 读数据的事物将禁止写事物(可以读事物),写事物将禁止所有其他事物\n      * 避免了脏读和不可重复读，但可能会出现幻读\n   4. **Serializable(序列化)**\n      * 事物严格按照顺序一个一个执行\n      * 能避免所有情况，但会极大影响系统性能\n    \n### 3. 扩展\n   1. 大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。  \n        Mysql的默认隔离级别就是Repeatable read。 \n   2. MySQL数据库隔离级别管理  \n      * 查看隔离级别: `select @@tx_isolation`  \n      * 修改隔离级别:    \n      `set [glogal | session] transaction isolation level 隔离级别名称`如`set transaction isolation level read-committed`  \n      或者`set tx_isolation='隔离级别名称'` 如 `set tx_isolation = 'read-committed'`\n   3. 隔离级别的设置只对当前连接有效  \n\n### 4. MySQL悲观锁、乐观锁、共享锁与排他锁\n   1. **悲观锁**: 在操作数据时都认为会出现数据冲突，所以每次都会去获取锁，只有获取锁后才能对数据操作。\n   2. **乐观锁**: 在操作数据都认为不会发生数据冲突，可以直接操作，一般由用户通过版本号自己实现。\n   3. **共享锁**: 共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。在SQL后面加上`lock in share mode`表示使用共享锁。\n   4. **排他锁**: 排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类型，在需要执行的\n      语句后面加上`for update`就可以了。\n    \n## 三. 数据库的三大范式(Normal Form)\n   1. **第一范式(1NF)**：强调的是列的原子性，即列不能够再分成其他几列。\n   2. **第二范式(2NF)**：一个表必须有一个主键，二是其他列必须完全依赖于主键，而不能依赖主键一部分\n   3. **第三范式(3NF)**：非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。\n   \n## 四. 数据库数据结构\n   1. B+ Tree\n      * 相较于B Tree多了一层，只有树的叶子节点存储实际数据，方便了range查询操作\n\n## 五. mysql的MyISAM与InnoDB\n   1. `show engines` 查看当前引擎与默认引擎\n   2. 设置表引擎 CREATE后面加`CREATE TABLE \"\" () ENGINE=MyISAM` 或 `alter table 表名 ENGINE = InnoDB`\n   3. 比较  \n      * MyISAM不支持事物,InnoDB支持  \n      * InnoDB支持行锁定,MyISAM不支持，只支持表锁定   \n      * InnoDB支持外键,MyISAM不支持  \n      * MyISAM支持全文检索,InnoDB不支持  \n      * MyISAM内置一个数据计数器，能很容易得出`SELECT COUNT(*) FROM TABLE_NAME`结果  \n      * MyISAM索引数据与表数据分离，而InnoDB索引与表数据紧密关联  \n   \n## 六. SQL功能\n   1. **数据定义(DDL)**：用于定义SQL模式、基本表、视图和索引的创建和撤消操作\n   2. **数据操纵(DML)**：数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作\n   3. **数据控制**：包括对基本表和视图的授权，完整性规则的描述，事务控制等内容\n   4. **嵌入式SQL使用规定**：涉及到SQL语句嵌入在宿主语言程序中使用的规则\n  ","source":"_posts/database.md","raw":"---\nlayout: post\ntitle: Database\nthumbnail: /images/db/mysql_logo.png\ndate: 2018-06-18 23:15:27 +0800\ncategories: Database\ntags: Database\n---\n\n## 一. 四大特性(CIAD)\n   1. **原子性(Atomicity)**: 要么全成功，要么全失败，失败会回滚。\n   2. **一致性(Consistency)**: 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执\n      行之前和执行之后都必须处于一致性状态。\n   3. **隔离性(Isolation)**: 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，\n      不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n   4. **持久性(Durability)**: 一旦事物提交成功，那么数据库中的数据就是永久改变的，即使系统故障也不会丢失提交的事物。\n   \n## 二. 数据库隔离级别\n### 1. 不考虑隔离级别造成的问题\n   1. 更新丢失: 2个事物同时更新一条数据会有一个事物把另一个事物的更新覆盖了，这是因为系统没有任何操作隔离导致的.\n   2. 脏读: 一个事物读取了另一个事物还未提交事物的数据\n   3. 不可重复读: 一个事务对同一行数据重复读取两次，但是却得到了不同的结果\n      * 虚读: 一个事物去改变数据改变后发现还有数据为按要求改变，是因为另一事物也做了改变的缘故\n      * 幻读: 同一个事物内多次查询返回的结果不一致，是因为另一事物对数据进行了改变\n     \n### 2. 隔离级别(低 -> 高)\n   1. **Read uncommitted(未授权读取、读未提交)**\n      * 当一个事物在执行写操作时，则不允许另一事物执行写操作，可执行其他操作，可由排他锁来实现\n      * 解决了更新丢失问题，但会出现脏读\n   2. **Read committed(授权读取、读提交)**\n      * 读取数据事物允许其他事物继续访问该数据，但未提交的数据禁止其他事物访问\n      * 避免了脏读，但可能会出现幻读\n   3. **Repeatable read(可重复读取)**\n      * 读数据的事物将禁止写事物(可以读事物),写事物将禁止所有其他事物\n      * 避免了脏读和不可重复读，但可能会出现幻读\n   4. **Serializable(序列化)**\n      * 事物严格按照顺序一个一个执行\n      * 能避免所有情况，但会极大影响系统性能\n    \n### 3. 扩展\n   1. 大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。  \n        Mysql的默认隔离级别就是Repeatable read。 \n   2. MySQL数据库隔离级别管理  \n      * 查看隔离级别: `select @@tx_isolation`  \n      * 修改隔离级别:    \n      `set [glogal | session] transaction isolation level 隔离级别名称`如`set transaction isolation level read-committed`  \n      或者`set tx_isolation='隔离级别名称'` 如 `set tx_isolation = 'read-committed'`\n   3. 隔离级别的设置只对当前连接有效  \n\n### 4. MySQL悲观锁、乐观锁、共享锁与排他锁\n   1. **悲观锁**: 在操作数据时都认为会出现数据冲突，所以每次都会去获取锁，只有获取锁后才能对数据操作。\n   2. **乐观锁**: 在操作数据都认为不会发生数据冲突，可以直接操作，一般由用户通过版本号自己实现。\n   3. **共享锁**: 共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。在SQL后面加上`lock in share mode`表示使用共享锁。\n   4. **排他锁**: 排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类型，在需要执行的\n      语句后面加上`for update`就可以了。\n    \n## 三. 数据库的三大范式(Normal Form)\n   1. **第一范式(1NF)**：强调的是列的原子性，即列不能够再分成其他几列。\n   2. **第二范式(2NF)**：一个表必须有一个主键，二是其他列必须完全依赖于主键，而不能依赖主键一部分\n   3. **第三范式(3NF)**：非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。\n   \n## 四. 数据库数据结构\n   1. B+ Tree\n      * 相较于B Tree多了一层，只有树的叶子节点存储实际数据，方便了range查询操作\n\n## 五. mysql的MyISAM与InnoDB\n   1. `show engines` 查看当前引擎与默认引擎\n   2. 设置表引擎 CREATE后面加`CREATE TABLE \"\" () ENGINE=MyISAM` 或 `alter table 表名 ENGINE = InnoDB`\n   3. 比较  \n      * MyISAM不支持事物,InnoDB支持  \n      * InnoDB支持行锁定,MyISAM不支持，只支持表锁定   \n      * InnoDB支持外键,MyISAM不支持  \n      * MyISAM支持全文检索,InnoDB不支持  \n      * MyISAM内置一个数据计数器，能很容易得出`SELECT COUNT(*) FROM TABLE_NAME`结果  \n      * MyISAM索引数据与表数据分离，而InnoDB索引与表数据紧密关联  \n   \n## 六. SQL功能\n   1. **数据定义(DDL)**：用于定义SQL模式、基本表、视图和索引的创建和撤消操作\n   2. **数据操纵(DML)**：数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作\n   3. **数据控制**：包括对基本表和视图的授权，完整性规则的描述，事务控制等内容\n   4. **嵌入式SQL使用规定**：涉及到SQL语句嵌入在宿主语言程序中使用的规则\n  ","slug":"database","published":1,"updated":"2018-12-11T15:11:44.615Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vi50001uoilbuu7i7h4","content":"<h2 id=\"一-四大特性-CIAD\"><a href=\"#一-四大特性-CIAD\" class=\"headerlink\" title=\"一. 四大特性(CIAD)\"></a>一. 四大特性(CIAD)</h2><ol>\n<li><strong>原子性(Atomicity)</strong>: 要么全成功，要么全失败，失败会回滚。</li>\n<li><strong>一致性(Consistency)</strong>: 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执<br>行之前和执行之后都必须处于一致性状态。</li>\n<li><strong>隔离性(Isolation)</strong>: 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，<br>不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>\n<li><strong>持久性(Durability)</strong>: 一旦事物提交成功，那么数据库中的数据就是永久改变的，即使系统故障也不会丢失提交的事物。</li>\n</ol>\n<h2 id=\"二-数据库隔离级别\"><a href=\"#二-数据库隔离级别\" class=\"headerlink\" title=\"二. 数据库隔离级别\"></a>二. 数据库隔离级别</h2><h3 id=\"1-不考虑隔离级别造成的问题\"><a href=\"#1-不考虑隔离级别造成的问题\" class=\"headerlink\" title=\"1. 不考虑隔离级别造成的问题\"></a>1. 不考虑隔离级别造成的问题</h3><ol>\n<li>更新丢失: 2个事物同时更新一条数据会有一个事物把另一个事物的更新覆盖了，这是因为系统没有任何操作隔离导致的.</li>\n<li>脏读: 一个事物读取了另一个事物还未提交事物的数据</li>\n<li>不可重复读: 一个事务对同一行数据重复读取两次，但是却得到了不同的结果<ul>\n<li>虚读: 一个事物去改变数据改变后发现还有数据为按要求改变，是因为另一事物也做了改变的缘故</li>\n<li>幻读: 同一个事物内多次查询返回的结果不一致，是因为另一事物对数据进行了改变</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-隔离级别-低-gt-高\"><a href=\"#2-隔离级别-低-gt-高\" class=\"headerlink\" title=\"2. 隔离级别(低 -&gt; 高)\"></a>2. 隔离级别(低 -&gt; 高)</h3><ol>\n<li><strong>Read uncommitted(未授权读取、读未提交)</strong><ul>\n<li>当一个事物在执行写操作时，则不允许另一事物执行写操作，可执行其他操作，可由排他锁来实现</li>\n<li>解决了更新丢失问题，但会出现脏读</li>\n</ul>\n</li>\n<li><strong>Read committed(授权读取、读提交)</strong><ul>\n<li>读取数据事物允许其他事物继续访问该数据，但未提交的数据禁止其他事物访问</li>\n<li>避免了脏读，但可能会出现幻读</li>\n</ul>\n</li>\n<li><strong>Repeatable read(可重复读取)</strong><ul>\n<li>读数据的事物将禁止写事物(可以读事物),写事物将禁止所有其他事物</li>\n<li>避免了脏读和不可重复读，但可能会出现幻读</li>\n</ul>\n</li>\n<li><strong>Serializable(序列化)</strong><ul>\n<li>事物严格按照顺序一个一个执行</li>\n<li>能避免所有情况，但会极大影响系统性能</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3. 扩展\"></a>3. 扩展</h3><ol>\n<li>大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。<br>  Mysql的默认隔离级别就是Repeatable read。 </li>\n<li>MySQL数据库隔离级别管理  <ul>\n<li>查看隔离级别: <code>select @@tx_isolation</code>  </li>\n<li>修改隔离级别:<br><code>set [glogal | session] transaction isolation level 隔离级别名称</code>如<code>set transaction isolation level read-committed</code><br>或者<code>set tx_isolation=&#39;隔离级别名称&#39;</code> 如 <code>set tx_isolation = &#39;read-committed&#39;</code></li>\n</ul>\n</li>\n<li>隔离级别的设置只对当前连接有效  </li>\n</ol>\n<h3 id=\"4-MySQL悲观锁、乐观锁、共享锁与排他锁\"><a href=\"#4-MySQL悲观锁、乐观锁、共享锁与排他锁\" class=\"headerlink\" title=\"4. MySQL悲观锁、乐观锁、共享锁与排他锁\"></a>4. MySQL悲观锁、乐观锁、共享锁与排他锁</h3><ol>\n<li><strong>悲观锁</strong>: 在操作数据时都认为会出现数据冲突，所以每次都会去获取锁，只有获取锁后才能对数据操作。</li>\n<li><strong>乐观锁</strong>: 在操作数据都认为不会发生数据冲突，可以直接操作，一般由用户通过版本号自己实现。</li>\n<li><strong>共享锁</strong>: 共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。在SQL后面加上<code>lock in share mode</code>表示使用共享锁。</li>\n<li><strong>排他锁</strong>: 排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类型，在需要执行的<br>语句后面加上<code>for update</code>就可以了。</li>\n</ol>\n<h2 id=\"三-数据库的三大范式-Normal-Form\"><a href=\"#三-数据库的三大范式-Normal-Form\" class=\"headerlink\" title=\"三. 数据库的三大范式(Normal Form)\"></a>三. 数据库的三大范式(Normal Form)</h2><ol>\n<li><strong>第一范式(1NF)</strong>：强调的是列的原子性，即列不能够再分成其他几列。</li>\n<li><strong>第二范式(2NF)</strong>：一个表必须有一个主键，二是其他列必须完全依赖于主键，而不能依赖主键一部分</li>\n<li><strong>第三范式(3NF)</strong>：非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。</li>\n</ol>\n<h2 id=\"四-数据库数据结构\"><a href=\"#四-数据库数据结构\" class=\"headerlink\" title=\"四. 数据库数据结构\"></a>四. 数据库数据结构</h2><ol>\n<li>B+ Tree<ul>\n<li>相较于B Tree多了一层，只有树的叶子节点存储实际数据，方便了range查询操作</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"五-mysql的MyISAM与InnoDB\"><a href=\"#五-mysql的MyISAM与InnoDB\" class=\"headerlink\" title=\"五. mysql的MyISAM与InnoDB\"></a>五. mysql的MyISAM与InnoDB</h2><ol>\n<li><code>show engines</code> 查看当前引擎与默认引擎</li>\n<li>设置表引擎 CREATE后面加<code>CREATE TABLE &quot;&quot; () ENGINE=MyISAM</code> 或 <code>alter table 表名 ENGINE = InnoDB</code></li>\n<li>比较  <ul>\n<li>MyISAM不支持事物,InnoDB支持  </li>\n<li>InnoDB支持行锁定,MyISAM不支持，只支持表锁定   </li>\n<li>InnoDB支持外键,MyISAM不支持  </li>\n<li>MyISAM支持全文检索,InnoDB不支持  </li>\n<li>MyISAM内置一个数据计数器，能很容易得出<code>SELECT COUNT(*) FROM TABLE_NAME</code>结果  </li>\n<li>MyISAM索引数据与表数据分离，而InnoDB索引与表数据紧密关联  </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"六-SQL功能\"><a href=\"#六-SQL功能\" class=\"headerlink\" title=\"六. SQL功能\"></a>六. SQL功能</h2><ol>\n<li><strong>数据定义(DDL)</strong>：用于定义SQL模式、基本表、视图和索引的创建和撤消操作</li>\n<li><strong>数据操纵(DML)</strong>：数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作</li>\n<li><strong>数据控制</strong>：包括对基本表和视图的授权，完整性规则的描述，事务控制等内容</li>\n<li><strong>嵌入式SQL使用规定</strong>：涉及到SQL语句嵌入在宿主语言程序中使用的规则</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-四大特性-CIAD\"><a href=\"#一-四大特性-CIAD\" class=\"headerlink\" title=\"一. 四大特性(CIAD)\"></a>一. 四大特性(CIAD)</h2><ol>\n<li><strong>原子性(Atomicity)</strong>: 要么全成功，要么全失败，失败会回滚。</li>\n<li><strong>一致性(Consistency)</strong>: 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执<br>行之前和执行之后都必须处于一致性状态。</li>\n<li><strong>隔离性(Isolation)</strong>: 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，<br>不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>\n<li><strong>持久性(Durability)</strong>: 一旦事物提交成功，那么数据库中的数据就是永久改变的，即使系统故障也不会丢失提交的事物。</li>\n</ol>\n<h2 id=\"二-数据库隔离级别\"><a href=\"#二-数据库隔离级别\" class=\"headerlink\" title=\"二. 数据库隔离级别\"></a>二. 数据库隔离级别</h2><h3 id=\"1-不考虑隔离级别造成的问题\"><a href=\"#1-不考虑隔离级别造成的问题\" class=\"headerlink\" title=\"1. 不考虑隔离级别造成的问题\"></a>1. 不考虑隔离级别造成的问题</h3><ol>\n<li>更新丢失: 2个事物同时更新一条数据会有一个事物把另一个事物的更新覆盖了，这是因为系统没有任何操作隔离导致的.</li>\n<li>脏读: 一个事物读取了另一个事物还未提交事物的数据</li>\n<li>不可重复读: 一个事务对同一行数据重复读取两次，但是却得到了不同的结果<ul>\n<li>虚读: 一个事物去改变数据改变后发现还有数据为按要求改变，是因为另一事物也做了改变的缘故</li>\n<li>幻读: 同一个事物内多次查询返回的结果不一致，是因为另一事物对数据进行了改变</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-隔离级别-低-gt-高\"><a href=\"#2-隔离级别-低-gt-高\" class=\"headerlink\" title=\"2. 隔离级别(低 -&gt; 高)\"></a>2. 隔离级别(低 -&gt; 高)</h3><ol>\n<li><strong>Read uncommitted(未授权读取、读未提交)</strong><ul>\n<li>当一个事物在执行写操作时，则不允许另一事物执行写操作，可执行其他操作，可由排他锁来实现</li>\n<li>解决了更新丢失问题，但会出现脏读</li>\n</ul>\n</li>\n<li><strong>Read committed(授权读取、读提交)</strong><ul>\n<li>读取数据事物允许其他事物继续访问该数据，但未提交的数据禁止其他事物访问</li>\n<li>避免了脏读，但可能会出现幻读</li>\n</ul>\n</li>\n<li><strong>Repeatable read(可重复读取)</strong><ul>\n<li>读数据的事物将禁止写事物(可以读事物),写事物将禁止所有其他事物</li>\n<li>避免了脏读和不可重复读，但可能会出现幻读</li>\n</ul>\n</li>\n<li><strong>Serializable(序列化)</strong><ul>\n<li>事物严格按照顺序一个一个执行</li>\n<li>能避免所有情况，但会极大影响系统性能</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3. 扩展\"></a>3. 扩展</h3><ol>\n<li>大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。<br>  Mysql的默认隔离级别就是Repeatable read。 </li>\n<li>MySQL数据库隔离级别管理  <ul>\n<li>查看隔离级别: <code>select @@tx_isolation</code>  </li>\n<li>修改隔离级别:<br><code>set [glogal | session] transaction isolation level 隔离级别名称</code>如<code>set transaction isolation level read-committed</code><br>或者<code>set tx_isolation=&#39;隔离级别名称&#39;</code> 如 <code>set tx_isolation = &#39;read-committed&#39;</code></li>\n</ul>\n</li>\n<li>隔离级别的设置只对当前连接有效  </li>\n</ol>\n<h3 id=\"4-MySQL悲观锁、乐观锁、共享锁与排他锁\"><a href=\"#4-MySQL悲观锁、乐观锁、共享锁与排他锁\" class=\"headerlink\" title=\"4. MySQL悲观锁、乐观锁、共享锁与排他锁\"></a>4. MySQL悲观锁、乐观锁、共享锁与排他锁</h3><ol>\n<li><strong>悲观锁</strong>: 在操作数据时都认为会出现数据冲突，所以每次都会去获取锁，只有获取锁后才能对数据操作。</li>\n<li><strong>乐观锁</strong>: 在操作数据都认为不会发生数据冲突，可以直接操作，一般由用户通过版本号自己实现。</li>\n<li><strong>共享锁</strong>: 共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。在SQL后面加上<code>lock in share mode</code>表示使用共享锁。</li>\n<li><strong>排他锁</strong>: 排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。与共享锁类型，在需要执行的<br>语句后面加上<code>for update</code>就可以了。</li>\n</ol>\n<h2 id=\"三-数据库的三大范式-Normal-Form\"><a href=\"#三-数据库的三大范式-Normal-Form\" class=\"headerlink\" title=\"三. 数据库的三大范式(Normal Form)\"></a>三. 数据库的三大范式(Normal Form)</h2><ol>\n<li><strong>第一范式(1NF)</strong>：强调的是列的原子性，即列不能够再分成其他几列。</li>\n<li><strong>第二范式(2NF)</strong>：一个表必须有一个主键，二是其他列必须完全依赖于主键，而不能依赖主键一部分</li>\n<li><strong>第三范式(3NF)</strong>：非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列A依赖于非主键列B，非主键列B依赖于主键的情况。</li>\n</ol>\n<h2 id=\"四-数据库数据结构\"><a href=\"#四-数据库数据结构\" class=\"headerlink\" title=\"四. 数据库数据结构\"></a>四. 数据库数据结构</h2><ol>\n<li>B+ Tree<ul>\n<li>相较于B Tree多了一层，只有树的叶子节点存储实际数据，方便了range查询操作</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"五-mysql的MyISAM与InnoDB\"><a href=\"#五-mysql的MyISAM与InnoDB\" class=\"headerlink\" title=\"五. mysql的MyISAM与InnoDB\"></a>五. mysql的MyISAM与InnoDB</h2><ol>\n<li><code>show engines</code> 查看当前引擎与默认引擎</li>\n<li>设置表引擎 CREATE后面加<code>CREATE TABLE &quot;&quot; () ENGINE=MyISAM</code> 或 <code>alter table 表名 ENGINE = InnoDB</code></li>\n<li>比较  <ul>\n<li>MyISAM不支持事物,InnoDB支持  </li>\n<li>InnoDB支持行锁定,MyISAM不支持，只支持表锁定   </li>\n<li>InnoDB支持外键,MyISAM不支持  </li>\n<li>MyISAM支持全文检索,InnoDB不支持  </li>\n<li>MyISAM内置一个数据计数器，能很容易得出<code>SELECT COUNT(*) FROM TABLE_NAME</code>结果  </li>\n<li>MyISAM索引数据与表数据分离，而InnoDB索引与表数据紧密关联  </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"六-SQL功能\"><a href=\"#六-SQL功能\" class=\"headerlink\" title=\"六. SQL功能\"></a>六. SQL功能</h2><ol>\n<li><strong>数据定义(DDL)</strong>：用于定义SQL模式、基本表、视图和索引的创建和撤消操作</li>\n<li><strong>数据操纵(DML)</strong>：数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作</li>\n<li><strong>数据控制</strong>：包括对基本表和视图的授权，完整性规则的描述，事务控制等内容</li>\n<li><strong>嵌入式SQL使用规定</strong>：涉及到SQL语句嵌入在宿主语言程序中使用的规则</li>\n</ol>\n"},{"layout":"post","title":"Java Classloader","thumbnail":"/images/java/class_loader.png","date":"2018-06-25T01:15:27.000Z","author":"Crab2Died","_content":"\n## 1. 类加载时机\n### 1.1 - 生命周期\n```\n                      +-------------------------连接(Linking)----------------------------+\n   加载(Loading) -->  |  验证(Verification) --> 准备(Preparation) --> 解析(Resolution)   |\n                      +------------------------------------------------------------------+\n                                                                            ↓\n                                卸载(Unloading) <-- 使用(Using) <-- 初始化(Initialization)\n```\n\n### 1.2 - 立即初始化(主动引用)  \n   1. 遇到`new`、 `getstatic`、 `putstatic`或`invokestatic`这4条字节码指令时\n   2. 使用`java.lang.reflect`包的方法对类进行反射调用的时候,如果类没有进行过初始化,则需要先触发其初始化.\n   3. 当初始化一个类的时候,如果发现其父类还没有进行过初始化,则需要先触发其父类的初始化.\n   4. 当虚拟机启动时,用户需要指定一个要执行的主类(包含`main()`方法的那个类),虚拟机会先初始化这个主类.\n   5. 当使用JDK 1.7的动态语言支持时,如果一个`java.lang.invoke.MethodHandle`实例最后的解析结果**REF_getStatic**、\n      **REF_putStatic**、**REF_invokeStatic**的方法句柄,并且这个方法句柄所对应的类没有进行过初始化,则需要先触发其初始化.\n      \n### 1.3 - 被动加载\n   1. 子类调用父类静态方法,子类不会被初始化\n   2. 引用类型定义不初始化加载\n   3. 常量调用不会初始化类(编译期已进入常量池)\n   \n### 1.4 - 接口初始化\n   &emsp;&emsp;当一个类在初始化时,要求其父类全部都已经初始化过了,但是一个接口在初始化时,并不要求其父接口全部都完成了初始化,\n   只有在真正使用到父接口的时候(如引用接口中定义的常量)才会初始化.\n\n## 2. 类加载过程\n### 2.2 - 加载\n   1. 通过一个类的全限定名来获取定义此类的二进制字节流(这一条玩出了很多技术,如:jsp(从其他文件中生成),Applet(从网络中获取),Proxy(运行时计算)).\n   2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构.\n   3. 在内存中生成一个代表这个类的`java.lang.Class`对象,作为方法区这个类的各种数据的访问入口.  \n   **_\n   注:\n   加载阶段完成后,虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中,方法区中的数据存储格式由虚拟机实现自行定义,\n   虚拟机规范未规定此区域的具体数据结构. 然后在内存中实例化一个`java.lang.Class`类的对象(并没有明确规定是在Java堆中,\n   对于HotSpot虚拟机而言,Class对象比较特殊,它虽然是对象,但是存放在方法区里面),\n   这个对象将作为程序访问方法区中的这些类型数据的外部接口.\n   _**\n\n### 2.3 - 验证\n   &emsp;&emsp;确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机自身的安全.\n   `-Xverify:none`\n   参数来关闭大部分的类验证措施,以缩短虚拟机类加载的时间.  \n   1.  文件格式验证\n        - 魔数**0xCAFEBABE**验证\n        - 主、次版本号验证\n        - 常量池常量验证\n        - UTF-8编码验证\n        - ...\n   2.  元数据验证\n        - 这个类是否有父类\n        - 该类是否继承了不能继承的类(如:`final类`)\n        - ...\n   3.  字节码验证  \n       第三阶段是整个验证过程中最复杂的一个阶段,主要目的是通过数据流和控制流分析,确定程序语义是合法的、 符合逻辑的.\n        - 保证跳转指令不会跳转到方法体以外的字节码指令上.\n        - 保证方法体中的类型转换是有效的\n        - ...\n   4.  符号引用验证\n        - 符号引用中通过字符串描述的全限定名是否能找到对应的类.\n        - 在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段.\n        - 符号引用中的类、 字段、 方法的访问性(`private`、 `protected`、 `public`、 `default`)是否可被当前类访问\n          (不通过将抛一个IncompatibleClassChangeError异常子类).\n        - ...\n\n### 2-4 - 准备\n   &emsp;&emsp;准备阶段是正式为类变量分配内存并设置类变量初始值的阶段,这些变量所使用的内存都将在方法区中进行分配.\n   注:内存分配仅包括类变量(static修饰),不包括实例变量;初始值通常是指零值(如:`public static int v = 123;` 初始值v为0而非123,\n   但如`public static final int v = 123;`时将被初始化为123)\n\n### 2-5 - 解析\n   &emsp;&emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程\n   - 符号引用(Symbolic References)\n   - 直接引用(Direct References)\n   - 虚拟机对除invokedynamic(动态调用点限定符)指令外的操作进行缓存\n   - 解析动作主要针对类或接口、 字段、 类方法、 接口方法、 方法类型、 方法句柄和调用点限定符7类符号引用进行,\n     分别对应于常量池的**CONSTANT_Class_info**、**CONSTANT_Fieldref_info**、 **CONSTANT_Methodref_info**、\n     **CONSTANT_InterfaceMethodref_info**、 **CONSTANT_MethodType_info**、**CONSTANT_MethodHandle_info**\n     和**CONSTANT_InvokeDynamic_info** 7种常量类型\n     * 1)类或接口解析\n     * 2)字段解析\n     * 3)类方法解析\n     * 4)接口方法解析\n\n### 2-6 - 初始化\n   &emsp;&emsp;类加载的最后一步,真正执行java的字节码`.<clinit>()`方法保证在子类执行之前父类的`<clinit>()`已执行完毕.虚拟机中第一个被执\n   行的`<clinit>()`方法的类肯定是`java.lang.Object.<clinit>()`虚拟机保证只执行一次,多线程时只会有一条线程执行,其他线程阻塞等待.\n\n### 2-7 - 卸载\n\n## 3. 类加载器\n   &emsp;&emsp;**描述**  \n   &emsp;&emsp;通过一个类的全限定名来获取描述此类的二进制字节流\n   应用:类层次划分、热部署、OSGi(面向Java的动态模型系统)、代码加密等\n\n### 3-1 - 类与类加载器\n   &emsp;&emsp;相同的类被不同的类加载器加载他们必不相等.\n\n### 3-2 - 双亲委派模型(Parents Delegation Model)\n   &emsp;&emsp;**类加载器**  \n   1. 启动类加载器(Bootstrap ClassLoader)C++实现、虚拟机一部分\n      - 又称 引导类加载器\n      - 按名识别,如:rt.jar\n      - 负责加载&lt;JAVA_HOME&gt;\\lib目录或被参数`-Xbootclasspth`指定的目录\n   2. 其他类加载器, java实现,独立与虚拟机外部,全部继承抽象类java.lang.ClassLoader\n      - 扩展类加载器(Extension ClassLoader)\n        * 由sun.misc.Launcher$ExtClassLoader类实现\n        * 负责加载&lt;JAVA_HOME&gt;\\lib\\ext目录或参数`-Djava.ext.dirs`所指定目录下的类\n      - 应用程序类加载器(Application ClassLoader)\n        * 又称 系统类加载器\n        * 由sun.misc.Launcher$AppClassLoader实现\n        * 它负责加载用户类路径(ClassPath)上所指定的类库,开发者可以直接使用这个类加载器,是程序中默认的类加载器  \n\n   双亲委派模型图\n   ```\n                                                       自定义类加载器(CustomClassLoader)\n                                                      /\n     启动类加载器 <-- 扩展类加载器 <-- 应用程序加载器 <--\n                                                      \\\n                                                       自定义类加载器(CustomClassLoader)\n   ```\n   &emsp;&emsp;双亲委派模型的工作过程是:如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加载这个类,而\n   是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,因此所有的加载请求最终都应该传送到顶层的启动类加载器中,\n   只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时,子加载器才会尝试自己去加载\n\n### 3-3 - 破坏双亲委派模型\n\n## 4. 问题\n### 4-1 - 为什么要用双亲委派类加载\n   &emsp;&emsp;双亲委派模型可以防止内存中出现多分同样的字节码，如果没有双亲委派模型的话如果用户编写了一个`java.lang.Object`的同\n   名类放在classpath中，多个类加载器去加载这个类到内存中系统会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法\n   保证，而且如果不使用这种模型将给虚拟机带来安全隐患。\n","source":"_posts/java-classloader.md","raw":"---\nlayout: post\ntitle: Java Classloader\nthumbnail: /images/java/class_loader.png\ndate: 2018-06-25 09:15:27 +0800\nauthor: Crab2Died\ncategories: Java\ntags: \n  - JVM\n  - Java \n  - Classloader\n---\n\n## 1. 类加载时机\n### 1.1 - 生命周期\n```\n                      +-------------------------连接(Linking)----------------------------+\n   加载(Loading) -->  |  验证(Verification) --> 准备(Preparation) --> 解析(Resolution)   |\n                      +------------------------------------------------------------------+\n                                                                            ↓\n                                卸载(Unloading) <-- 使用(Using) <-- 初始化(Initialization)\n```\n\n### 1.2 - 立即初始化(主动引用)  \n   1. 遇到`new`、 `getstatic`、 `putstatic`或`invokestatic`这4条字节码指令时\n   2. 使用`java.lang.reflect`包的方法对类进行反射调用的时候,如果类没有进行过初始化,则需要先触发其初始化.\n   3. 当初始化一个类的时候,如果发现其父类还没有进行过初始化,则需要先触发其父类的初始化.\n   4. 当虚拟机启动时,用户需要指定一个要执行的主类(包含`main()`方法的那个类),虚拟机会先初始化这个主类.\n   5. 当使用JDK 1.7的动态语言支持时,如果一个`java.lang.invoke.MethodHandle`实例最后的解析结果**REF_getStatic**、\n      **REF_putStatic**、**REF_invokeStatic**的方法句柄,并且这个方法句柄所对应的类没有进行过初始化,则需要先触发其初始化.\n      \n### 1.3 - 被动加载\n   1. 子类调用父类静态方法,子类不会被初始化\n   2. 引用类型定义不初始化加载\n   3. 常量调用不会初始化类(编译期已进入常量池)\n   \n### 1.4 - 接口初始化\n   &emsp;&emsp;当一个类在初始化时,要求其父类全部都已经初始化过了,但是一个接口在初始化时,并不要求其父接口全部都完成了初始化,\n   只有在真正使用到父接口的时候(如引用接口中定义的常量)才会初始化.\n\n## 2. 类加载过程\n### 2.2 - 加载\n   1. 通过一个类的全限定名来获取定义此类的二进制字节流(这一条玩出了很多技术,如:jsp(从其他文件中生成),Applet(从网络中获取),Proxy(运行时计算)).\n   2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构.\n   3. 在内存中生成一个代表这个类的`java.lang.Class`对象,作为方法区这个类的各种数据的访问入口.  \n   **_\n   注:\n   加载阶段完成后,虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中,方法区中的数据存储格式由虚拟机实现自行定义,\n   虚拟机规范未规定此区域的具体数据结构. 然后在内存中实例化一个`java.lang.Class`类的对象(并没有明确规定是在Java堆中,\n   对于HotSpot虚拟机而言,Class对象比较特殊,它虽然是对象,但是存放在方法区里面),\n   这个对象将作为程序访问方法区中的这些类型数据的外部接口.\n   _**\n\n### 2.3 - 验证\n   &emsp;&emsp;确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机自身的安全.\n   `-Xverify:none`\n   参数来关闭大部分的类验证措施,以缩短虚拟机类加载的时间.  \n   1.  文件格式验证\n        - 魔数**0xCAFEBABE**验证\n        - 主、次版本号验证\n        - 常量池常量验证\n        - UTF-8编码验证\n        - ...\n   2.  元数据验证\n        - 这个类是否有父类\n        - 该类是否继承了不能继承的类(如:`final类`)\n        - ...\n   3.  字节码验证  \n       第三阶段是整个验证过程中最复杂的一个阶段,主要目的是通过数据流和控制流分析,确定程序语义是合法的、 符合逻辑的.\n        - 保证跳转指令不会跳转到方法体以外的字节码指令上.\n        - 保证方法体中的类型转换是有效的\n        - ...\n   4.  符号引用验证\n        - 符号引用中通过字符串描述的全限定名是否能找到对应的类.\n        - 在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段.\n        - 符号引用中的类、 字段、 方法的访问性(`private`、 `protected`、 `public`、 `default`)是否可被当前类访问\n          (不通过将抛一个IncompatibleClassChangeError异常子类).\n        - ...\n\n### 2-4 - 准备\n   &emsp;&emsp;准备阶段是正式为类变量分配内存并设置类变量初始值的阶段,这些变量所使用的内存都将在方法区中进行分配.\n   注:内存分配仅包括类变量(static修饰),不包括实例变量;初始值通常是指零值(如:`public static int v = 123;` 初始值v为0而非123,\n   但如`public static final int v = 123;`时将被初始化为123)\n\n### 2-5 - 解析\n   &emsp;&emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程\n   - 符号引用(Symbolic References)\n   - 直接引用(Direct References)\n   - 虚拟机对除invokedynamic(动态调用点限定符)指令外的操作进行缓存\n   - 解析动作主要针对类或接口、 字段、 类方法、 接口方法、 方法类型、 方法句柄和调用点限定符7类符号引用进行,\n     分别对应于常量池的**CONSTANT_Class_info**、**CONSTANT_Fieldref_info**、 **CONSTANT_Methodref_info**、\n     **CONSTANT_InterfaceMethodref_info**、 **CONSTANT_MethodType_info**、**CONSTANT_MethodHandle_info**\n     和**CONSTANT_InvokeDynamic_info** 7种常量类型\n     * 1)类或接口解析\n     * 2)字段解析\n     * 3)类方法解析\n     * 4)接口方法解析\n\n### 2-6 - 初始化\n   &emsp;&emsp;类加载的最后一步,真正执行java的字节码`.<clinit>()`方法保证在子类执行之前父类的`<clinit>()`已执行完毕.虚拟机中第一个被执\n   行的`<clinit>()`方法的类肯定是`java.lang.Object.<clinit>()`虚拟机保证只执行一次,多线程时只会有一条线程执行,其他线程阻塞等待.\n\n### 2-7 - 卸载\n\n## 3. 类加载器\n   &emsp;&emsp;**描述**  \n   &emsp;&emsp;通过一个类的全限定名来获取描述此类的二进制字节流\n   应用:类层次划分、热部署、OSGi(面向Java的动态模型系统)、代码加密等\n\n### 3-1 - 类与类加载器\n   &emsp;&emsp;相同的类被不同的类加载器加载他们必不相等.\n\n### 3-2 - 双亲委派模型(Parents Delegation Model)\n   &emsp;&emsp;**类加载器**  \n   1. 启动类加载器(Bootstrap ClassLoader)C++实现、虚拟机一部分\n      - 又称 引导类加载器\n      - 按名识别,如:rt.jar\n      - 负责加载&lt;JAVA_HOME&gt;\\lib目录或被参数`-Xbootclasspth`指定的目录\n   2. 其他类加载器, java实现,独立与虚拟机外部,全部继承抽象类java.lang.ClassLoader\n      - 扩展类加载器(Extension ClassLoader)\n        * 由sun.misc.Launcher$ExtClassLoader类实现\n        * 负责加载&lt;JAVA_HOME&gt;\\lib\\ext目录或参数`-Djava.ext.dirs`所指定目录下的类\n      - 应用程序类加载器(Application ClassLoader)\n        * 又称 系统类加载器\n        * 由sun.misc.Launcher$AppClassLoader实现\n        * 它负责加载用户类路径(ClassPath)上所指定的类库,开发者可以直接使用这个类加载器,是程序中默认的类加载器  \n\n   双亲委派模型图\n   ```\n                                                       自定义类加载器(CustomClassLoader)\n                                                      /\n     启动类加载器 <-- 扩展类加载器 <-- 应用程序加载器 <--\n                                                      \\\n                                                       自定义类加载器(CustomClassLoader)\n   ```\n   &emsp;&emsp;双亲委派模型的工作过程是:如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加载这个类,而\n   是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,因此所有的加载请求最终都应该传送到顶层的启动类加载器中,\n   只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时,子加载器才会尝试自己去加载\n\n### 3-3 - 破坏双亲委派模型\n\n## 4. 问题\n### 4-1 - 为什么要用双亲委派类加载\n   &emsp;&emsp;双亲委派模型可以防止内存中出现多分同样的字节码，如果没有双亲委派模型的话如果用户编写了一个`java.lang.Object`的同\n   名类放在classpath中，多个类加载器去加载这个类到内存中系统会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法\n   保证，而且如果不使用这种模型将给虚拟机带来安全隐患。\n","slug":"java-classloader","published":1,"updated":"2018-12-12T13:12:15.588Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vif0004uoil9hlqlkkw","content":"<h2 id=\"1-类加载时机\"><a href=\"#1-类加载时机\" class=\"headerlink\" title=\"1. 类加载时机\"></a>1. 类加载时机</h2><h3 id=\"1-1-生命周期\"><a href=\"#1-1-生命周期\" class=\"headerlink\" title=\"1.1 - 生命周期\"></a>1.1 - 生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">                   +-------------------------连接(Linking)----------------------------+</span><br><span class=\"line\">加载(Loading) --&gt;  |  验证(Verification) --&gt; 准备(Preparation) --&gt; 解析(Resolution)   |</span><br><span class=\"line\">                   +------------------------------------------------------------------+</span><br><span class=\"line\">                                                                         ↓</span><br><span class=\"line\">                             卸载(Unloading) &lt;-- 使用(Using) &lt;-- 初始化(Initialization)</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-立即初始化-主动引用\"><a href=\"#1-2-立即初始化-主动引用\" class=\"headerlink\" title=\"1.2 - 立即初始化(主动引用)\"></a>1.2 - 立即初始化(主动引用)</h3><ol>\n<li>遇到<code>new</code>、 <code>getstatic</code>、 <code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时</li>\n<li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用的时候,如果类没有进行过初始化,则需要先触发其初始化.</li>\n<li>当初始化一个类的时候,如果发现其父类还没有进行过初始化,则需要先触发其父类的初始化.</li>\n<li>当虚拟机启动时,用户需要指定一个要执行的主类(包含<code>main()</code>方法的那个类),虚拟机会先初始化这个主类.</li>\n<li>当使用JDK 1.7的动态语言支持时,如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果<strong>REF_getStatic</strong>、<br><strong>REF_putStatic</strong>、<strong>REF_invokeStatic</strong>的方法句柄,并且这个方法句柄所对应的类没有进行过初始化,则需要先触发其初始化.</li>\n</ol>\n<h3 id=\"1-3-被动加载\"><a href=\"#1-3-被动加载\" class=\"headerlink\" title=\"1.3 - 被动加载\"></a>1.3 - 被动加载</h3><ol>\n<li>子类调用父类静态方法,子类不会被初始化</li>\n<li>引用类型定义不初始化加载</li>\n<li>常量调用不会初始化类(编译期已进入常量池)</li>\n</ol>\n<h3 id=\"1-4-接口初始化\"><a href=\"#1-4-接口初始化\" class=\"headerlink\" title=\"1.4 - 接口初始化\"></a>1.4 - 接口初始化</h3><p>   &emsp;&emsp;当一个类在初始化时,要求其父类全部都已经初始化过了,但是一个接口在初始化时,并不要求其父接口全部都完成了初始化,<br>   只有在真正使用到父接口的时候(如引用接口中定义的常量)才会初始化.</p>\n<h2 id=\"2-类加载过程\"><a href=\"#2-类加载过程\" class=\"headerlink\" title=\"2. 类加载过程\"></a>2. 类加载过程</h2><h3 id=\"2-2-加载\"><a href=\"#2-2-加载\" class=\"headerlink\" title=\"2.2 - 加载\"></a>2.2 - 加载</h3><ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流(这一条玩出了很多技术,如:jsp(从其他文件中生成),Applet(从网络中获取),Proxy(运行时计算)).</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构.</li>\n<li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象,作为方法区这个类的各种数据的访问入口.<br><strong>_<br>注:<br>加载阶段完成后,虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中,方法区中的数据存储格式由虚拟机实现自行定义,<br>虚拟机规范未规定此区域的具体数据结构. 然后在内存中实例化一个<code>java.lang.Class</code>类的对象(并没有明确规定是在Java堆中,<br>对于HotSpot虚拟机而言,Class对象比较特殊,它虽然是对象,但是存放在方法区里面),<br>这个对象将作为程序访问方法区中的这些类型数据的外部接口.<br>_</strong></li>\n</ol>\n<h3 id=\"2-3-验证\"><a href=\"#2-3-验证\" class=\"headerlink\" title=\"2.3 - 验证\"></a>2.3 - 验证</h3><p>   &emsp;&emsp;确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机自身的安全.<br>   <code>-Xverify:none</code><br>   参数来关闭大部分的类验证措施,以缩短虚拟机类加载的时间.  </p>\n<ol>\n<li>文件格式验证<ul>\n<li>魔数<strong>0xCAFEBABE</strong>验证</li>\n<li>主、次版本号验证</li>\n<li>常量池常量验证</li>\n<li>UTF-8编码验证</li>\n<li>…</li>\n</ul>\n</li>\n<li>元数据验证<ul>\n<li>这个类是否有父类</li>\n<li>该类是否继承了不能继承的类(如:<code>final类</code>)</li>\n<li>…</li>\n</ul>\n</li>\n<li>字节码验证<br>第三阶段是整个验证过程中最复杂的一个阶段,主要目的是通过数据流和控制流分析,确定程序语义是合法的、 符合逻辑的.<ul>\n<li>保证跳转指令不会跳转到方法体以外的字节码指令上.</li>\n<li>保证方法体中的类型转换是有效的</li>\n<li>…</li>\n</ul>\n</li>\n<li>符号引用验证<ul>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类.</li>\n<li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段.</li>\n<li>符号引用中的类、 字段、 方法的访问性(<code>private</code>、 <code>protected</code>、 <code>public</code>、 <code>default</code>)是否可被当前类访问<br>(不通过将抛一个IncompatibleClassChangeError异常子类).</li>\n<li>…</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-4-准备\"><a href=\"#2-4-准备\" class=\"headerlink\" title=\"2-4 - 准备\"></a>2-4 - 准备</h3><p>   &emsp;&emsp;准备阶段是正式为类变量分配内存并设置类变量初始值的阶段,这些变量所使用的内存都将在方法区中进行分配.<br>   注:内存分配仅包括类变量(static修饰),不包括实例变量;初始值通常是指零值(如:<code>public static int v = 123;</code> 初始值v为0而非123,<br>   但如<code>public static final int v = 123;</code>时将被初始化为123)</p>\n<h3 id=\"2-5-解析\"><a href=\"#2-5-解析\" class=\"headerlink\" title=\"2-5 - 解析\"></a>2-5 - 解析</h3><p>   &emsp;&emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程</p>\n<ul>\n<li>符号引用(Symbolic References)</li>\n<li>直接引用(Direct References)</li>\n<li>虚拟机对除invokedynamic(动态调用点限定符)指令外的操作进行缓存</li>\n<li>解析动作主要针对类或接口、 字段、 类方法、 接口方法、 方法类型、 方法句柄和调用点限定符7类符号引用进行,<br>分别对应于常量池的<strong>CONSTANT_Class_info</strong>、<strong>CONSTANT_Fieldref_info</strong>、 <strong>CONSTANT_Methodref_info</strong>、<br><strong>CONSTANT_InterfaceMethodref_info</strong>、 <strong>CONSTANT_MethodType_info</strong>、<strong>CONSTANT_MethodHandle_info</strong><br>和<strong>CONSTANT_InvokeDynamic_info</strong> 7种常量类型<ul>\n<li>1)类或接口解析</li>\n<li>2)字段解析</li>\n<li>3)类方法解析</li>\n<li>4)接口方法解析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-6-初始化\"><a href=\"#2-6-初始化\" class=\"headerlink\" title=\"2-6 - 初始化\"></a>2-6 - 初始化</h3><p>   &emsp;&emsp;类加载的最后一步,真正执行java的字节码<code>.&lt;clinit&gt;()</code>方法保证在子类执行之前父类的<code>&lt;clinit&gt;()</code>已执行完毕.虚拟机中第一个被执<br>   行的<code>&lt;clinit&gt;()</code>方法的类肯定是<code>java.lang.Object.&lt;clinit&gt;()</code>虚拟机保证只执行一次,多线程时只会有一条线程执行,其他线程阻塞等待.</p>\n<h3 id=\"2-7-卸载\"><a href=\"#2-7-卸载\" class=\"headerlink\" title=\"2-7 - 卸载\"></a>2-7 - 卸载</h3><h2 id=\"3-类加载器\"><a href=\"#3-类加载器\" class=\"headerlink\" title=\"3. 类加载器\"></a>3. 类加载器</h2><p>   &emsp;&emsp;<strong>描述</strong><br>   &emsp;&emsp;通过一个类的全限定名来获取描述此类的二进制字节流<br>   应用:类层次划分、热部署、OSGi(面向Java的动态模型系统)、代码加密等</p>\n<h3 id=\"3-1-类与类加载器\"><a href=\"#3-1-类与类加载器\" class=\"headerlink\" title=\"3-1 - 类与类加载器\"></a>3-1 - 类与类加载器</h3><p>   &emsp;&emsp;相同的类被不同的类加载器加载他们必不相等.</p>\n<h3 id=\"3-2-双亲委派模型-Parents-Delegation-Model\"><a href=\"#3-2-双亲委派模型-Parents-Delegation-Model\" class=\"headerlink\" title=\"3-2 - 双亲委派模型(Parents Delegation Model)\"></a>3-2 - 双亲委派模型(Parents Delegation Model)</h3><p>   &emsp;&emsp;<strong>类加载器</strong>  </p>\n<ol>\n<li>启动类加载器(Bootstrap ClassLoader)C++实现、虚拟机一部分<ul>\n<li>又称 引导类加载器</li>\n<li>按名识别,如:rt.jar</li>\n<li>负责加载&lt;JAVA_HOME&gt;\\lib目录或被参数<code>-Xbootclasspth</code>指定的目录</li>\n</ul>\n</li>\n<li><p>其他类加载器, java实现,独立与虚拟机外部,全部继承抽象类java.lang.ClassLoader</p>\n<ul>\n<li>扩展类加载器(Extension ClassLoader)<ul>\n<li>由sun.misc.Launcher$ExtClassLoader类实现</li>\n<li>负责加载&lt;JAVA_HOME&gt;\\lib\\ext目录或参数<code>-Djava.ext.dirs</code>所指定目录下的类</li>\n</ul>\n</li>\n<li>应用程序类加载器(Application ClassLoader)<ul>\n<li>又称 系统类加载器</li>\n<li>由sun.misc.Launcher$AppClassLoader实现</li>\n<li>它负责加载用户类路径(ClassPath)上所指定的类库,开发者可以直接使用这个类加载器,是程序中默认的类加载器  </li>\n</ul>\n</li>\n</ul>\n<p>双亲委派模型图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">                                                  自定义类加载器(CustomClassLoader)</span><br><span class=\"line\">                                                 /</span><br><span class=\"line\">启动类加载器 &lt;-- 扩展类加载器 &lt;-- 应用程序加载器 &lt;--</span><br><span class=\"line\">                                                 \\</span><br><span class=\"line\">                                                  自定义类加载器(CustomClassLoader)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;双亲委派模型的工作过程是:如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加载这个类,而<br>是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,因此所有的加载请求最终都应该传送到顶层的启动类加载器中,<br>只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时,子加载器才会尝试自己去加载</p>\n</li>\n</ol>\n<h3 id=\"3-3-破坏双亲委派模型\"><a href=\"#3-3-破坏双亲委派模型\" class=\"headerlink\" title=\"3-3 - 破坏双亲委派模型\"></a>3-3 - 破坏双亲委派模型</h3><h2 id=\"4-问题\"><a href=\"#4-问题\" class=\"headerlink\" title=\"4. 问题\"></a>4. 问题</h2><h3 id=\"4-1-为什么要用双亲委派类加载\"><a href=\"#4-1-为什么要用双亲委派类加载\" class=\"headerlink\" title=\"4-1 - 为什么要用双亲委派类加载\"></a>4-1 - 为什么要用双亲委派类加载</h3><p>   &emsp;&emsp;双亲委派模型可以防止内存中出现多分同样的字节码，如果没有双亲委派模型的话如果用户编写了一个<code>java.lang.Object</code>的同<br>   名类放在classpath中，多个类加载器去加载这个类到内存中系统会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法<br>   保证，而且如果不使用这种模型将给虚拟机带来安全隐患。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-类加载时机\"><a href=\"#1-类加载时机\" class=\"headerlink\" title=\"1. 类加载时机\"></a>1. 类加载时机</h2><h3 id=\"1-1-生命周期\"><a href=\"#1-1-生命周期\" class=\"headerlink\" title=\"1.1 - 生命周期\"></a>1.1 - 生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">                   +-------------------------连接(Linking)----------------------------+</span><br><span class=\"line\">加载(Loading) --&gt;  |  验证(Verification) --&gt; 准备(Preparation) --&gt; 解析(Resolution)   |</span><br><span class=\"line\">                   +------------------------------------------------------------------+</span><br><span class=\"line\">                                                                         ↓</span><br><span class=\"line\">                             卸载(Unloading) &lt;-- 使用(Using) &lt;-- 初始化(Initialization)</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-立即初始化-主动引用\"><a href=\"#1-2-立即初始化-主动引用\" class=\"headerlink\" title=\"1.2 - 立即初始化(主动引用)\"></a>1.2 - 立即初始化(主动引用)</h3><ol>\n<li>遇到<code>new</code>、 <code>getstatic</code>、 <code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时</li>\n<li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用的时候,如果类没有进行过初始化,则需要先触发其初始化.</li>\n<li>当初始化一个类的时候,如果发现其父类还没有进行过初始化,则需要先触发其父类的初始化.</li>\n<li>当虚拟机启动时,用户需要指定一个要执行的主类(包含<code>main()</code>方法的那个类),虚拟机会先初始化这个主类.</li>\n<li>当使用JDK 1.7的动态语言支持时,如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果<strong>REF_getStatic</strong>、<br><strong>REF_putStatic</strong>、<strong>REF_invokeStatic</strong>的方法句柄,并且这个方法句柄所对应的类没有进行过初始化,则需要先触发其初始化.</li>\n</ol>\n<h3 id=\"1-3-被动加载\"><a href=\"#1-3-被动加载\" class=\"headerlink\" title=\"1.3 - 被动加载\"></a>1.3 - 被动加载</h3><ol>\n<li>子类调用父类静态方法,子类不会被初始化</li>\n<li>引用类型定义不初始化加载</li>\n<li>常量调用不会初始化类(编译期已进入常量池)</li>\n</ol>\n<h3 id=\"1-4-接口初始化\"><a href=\"#1-4-接口初始化\" class=\"headerlink\" title=\"1.4 - 接口初始化\"></a>1.4 - 接口初始化</h3><p>   &emsp;&emsp;当一个类在初始化时,要求其父类全部都已经初始化过了,但是一个接口在初始化时,并不要求其父接口全部都完成了初始化,<br>   只有在真正使用到父接口的时候(如引用接口中定义的常量)才会初始化.</p>\n<h2 id=\"2-类加载过程\"><a href=\"#2-类加载过程\" class=\"headerlink\" title=\"2. 类加载过程\"></a>2. 类加载过程</h2><h3 id=\"2-2-加载\"><a href=\"#2-2-加载\" class=\"headerlink\" title=\"2.2 - 加载\"></a>2.2 - 加载</h3><ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流(这一条玩出了很多技术,如:jsp(从其他文件中生成),Applet(从网络中获取),Proxy(运行时计算)).</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构.</li>\n<li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象,作为方法区这个类的各种数据的访问入口.<br><strong>_<br>注:<br>加载阶段完成后,虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中,方法区中的数据存储格式由虚拟机实现自行定义,<br>虚拟机规范未规定此区域的具体数据结构. 然后在内存中实例化一个<code>java.lang.Class</code>类的对象(并没有明确规定是在Java堆中,<br>对于HotSpot虚拟机而言,Class对象比较特殊,它虽然是对象,但是存放在方法区里面),<br>这个对象将作为程序访问方法区中的这些类型数据的外部接口.<br>_</strong></li>\n</ol>\n<h3 id=\"2-3-验证\"><a href=\"#2-3-验证\" class=\"headerlink\" title=\"2.3 - 验证\"></a>2.3 - 验证</h3><p>   &emsp;&emsp;确保Class文件的字节流中包含的信息符合当前虚拟机的要求,并且不会危害虚拟机自身的安全.<br>   <code>-Xverify:none</code><br>   参数来关闭大部分的类验证措施,以缩短虚拟机类加载的时间.  </p>\n<ol>\n<li>文件格式验证<ul>\n<li>魔数<strong>0xCAFEBABE</strong>验证</li>\n<li>主、次版本号验证</li>\n<li>常量池常量验证</li>\n<li>UTF-8编码验证</li>\n<li>…</li>\n</ul>\n</li>\n<li>元数据验证<ul>\n<li>这个类是否有父类</li>\n<li>该类是否继承了不能继承的类(如:<code>final类</code>)</li>\n<li>…</li>\n</ul>\n</li>\n<li>字节码验证<br>第三阶段是整个验证过程中最复杂的一个阶段,主要目的是通过数据流和控制流分析,确定程序语义是合法的、 符合逻辑的.<ul>\n<li>保证跳转指令不会跳转到方法体以外的字节码指令上.</li>\n<li>保证方法体中的类型转换是有效的</li>\n<li>…</li>\n</ul>\n</li>\n<li>符号引用验证<ul>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类.</li>\n<li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段.</li>\n<li>符号引用中的类、 字段、 方法的访问性(<code>private</code>、 <code>protected</code>、 <code>public</code>、 <code>default</code>)是否可被当前类访问<br>(不通过将抛一个IncompatibleClassChangeError异常子类).</li>\n<li>…</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-4-准备\"><a href=\"#2-4-准备\" class=\"headerlink\" title=\"2-4 - 准备\"></a>2-4 - 准备</h3><p>   &emsp;&emsp;准备阶段是正式为类变量分配内存并设置类变量初始值的阶段,这些变量所使用的内存都将在方法区中进行分配.<br>   注:内存分配仅包括类变量(static修饰),不包括实例变量;初始值通常是指零值(如:<code>public static int v = 123;</code> 初始值v为0而非123,<br>   但如<code>public static final int v = 123;</code>时将被初始化为123)</p>\n<h3 id=\"2-5-解析\"><a href=\"#2-5-解析\" class=\"headerlink\" title=\"2-5 - 解析\"></a>2-5 - 解析</h3><p>   &emsp;&emsp;解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程</p>\n<ul>\n<li>符号引用(Symbolic References)</li>\n<li>直接引用(Direct References)</li>\n<li>虚拟机对除invokedynamic(动态调用点限定符)指令外的操作进行缓存</li>\n<li>解析动作主要针对类或接口、 字段、 类方法、 接口方法、 方法类型、 方法句柄和调用点限定符7类符号引用进行,<br>分别对应于常量池的<strong>CONSTANT_Class_info</strong>、<strong>CONSTANT_Fieldref_info</strong>、 <strong>CONSTANT_Methodref_info</strong>、<br><strong>CONSTANT_InterfaceMethodref_info</strong>、 <strong>CONSTANT_MethodType_info</strong>、<strong>CONSTANT_MethodHandle_info</strong><br>和<strong>CONSTANT_InvokeDynamic_info</strong> 7种常量类型<ul>\n<li>1)类或接口解析</li>\n<li>2)字段解析</li>\n<li>3)类方法解析</li>\n<li>4)接口方法解析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-6-初始化\"><a href=\"#2-6-初始化\" class=\"headerlink\" title=\"2-6 - 初始化\"></a>2-6 - 初始化</h3><p>   &emsp;&emsp;类加载的最后一步,真正执行java的字节码<code>.&lt;clinit&gt;()</code>方法保证在子类执行之前父类的<code>&lt;clinit&gt;()</code>已执行完毕.虚拟机中第一个被执<br>   行的<code>&lt;clinit&gt;()</code>方法的类肯定是<code>java.lang.Object.&lt;clinit&gt;()</code>虚拟机保证只执行一次,多线程时只会有一条线程执行,其他线程阻塞等待.</p>\n<h3 id=\"2-7-卸载\"><a href=\"#2-7-卸载\" class=\"headerlink\" title=\"2-7 - 卸载\"></a>2-7 - 卸载</h3><h2 id=\"3-类加载器\"><a href=\"#3-类加载器\" class=\"headerlink\" title=\"3. 类加载器\"></a>3. 类加载器</h2><p>   &emsp;&emsp;<strong>描述</strong><br>   &emsp;&emsp;通过一个类的全限定名来获取描述此类的二进制字节流<br>   应用:类层次划分、热部署、OSGi(面向Java的动态模型系统)、代码加密等</p>\n<h3 id=\"3-1-类与类加载器\"><a href=\"#3-1-类与类加载器\" class=\"headerlink\" title=\"3-1 - 类与类加载器\"></a>3-1 - 类与类加载器</h3><p>   &emsp;&emsp;相同的类被不同的类加载器加载他们必不相等.</p>\n<h3 id=\"3-2-双亲委派模型-Parents-Delegation-Model\"><a href=\"#3-2-双亲委派模型-Parents-Delegation-Model\" class=\"headerlink\" title=\"3-2 - 双亲委派模型(Parents Delegation Model)\"></a>3-2 - 双亲委派模型(Parents Delegation Model)</h3><p>   &emsp;&emsp;<strong>类加载器</strong>  </p>\n<ol>\n<li>启动类加载器(Bootstrap ClassLoader)C++实现、虚拟机一部分<ul>\n<li>又称 引导类加载器</li>\n<li>按名识别,如:rt.jar</li>\n<li>负责加载&lt;JAVA_HOME&gt;\\lib目录或被参数<code>-Xbootclasspth</code>指定的目录</li>\n</ul>\n</li>\n<li><p>其他类加载器, java实现,独立与虚拟机外部,全部继承抽象类java.lang.ClassLoader</p>\n<ul>\n<li>扩展类加载器(Extension ClassLoader)<ul>\n<li>由sun.misc.Launcher$ExtClassLoader类实现</li>\n<li>负责加载&lt;JAVA_HOME&gt;\\lib\\ext目录或参数<code>-Djava.ext.dirs</code>所指定目录下的类</li>\n</ul>\n</li>\n<li>应用程序类加载器(Application ClassLoader)<ul>\n<li>又称 系统类加载器</li>\n<li>由sun.misc.Launcher$AppClassLoader实现</li>\n<li>它负责加载用户类路径(ClassPath)上所指定的类库,开发者可以直接使用这个类加载器,是程序中默认的类加载器  </li>\n</ul>\n</li>\n</ul>\n<p>双亲委派模型图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">                                                  自定义类加载器(CustomClassLoader)</span><br><span class=\"line\">                                                 /</span><br><span class=\"line\">启动类加载器 &lt;-- 扩展类加载器 &lt;-- 应用程序加载器 &lt;--</span><br><span class=\"line\">                                                 \\</span><br><span class=\"line\">                                                  自定义类加载器(CustomClassLoader)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;双亲委派模型的工作过程是:如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加载这个类,而<br>是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,因此所有的加载请求最终都应该传送到顶层的启动类加载器中,<br>只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时,子加载器才会尝试自己去加载</p>\n</li>\n</ol>\n<h3 id=\"3-3-破坏双亲委派模型\"><a href=\"#3-3-破坏双亲委派模型\" class=\"headerlink\" title=\"3-3 - 破坏双亲委派模型\"></a>3-3 - 破坏双亲委派模型</h3><h2 id=\"4-问题\"><a href=\"#4-问题\" class=\"headerlink\" title=\"4. 问题\"></a>4. 问题</h2><h3 id=\"4-1-为什么要用双亲委派类加载\"><a href=\"#4-1-为什么要用双亲委派类加载\" class=\"headerlink\" title=\"4-1 - 为什么要用双亲委派类加载\"></a>4-1 - 为什么要用双亲委派类加载</h3><p>   &emsp;&emsp;双亲委派模型可以防止内存中出现多分同样的字节码，如果没有双亲委派模型的话如果用户编写了一个<code>java.lang.Object</code>的同<br>   名类放在classpath中，多个类加载器去加载这个类到内存中系统会出现多个不同的Object类，那么类之间的比较结果及类的唯一性将无法<br>   保证，而且如果不使用这种模型将给虚拟机带来安全隐患。</p>\n"},{"layout":"post","title":"Java Collection Frame","thumbnail":"/images/java-collection-frame/ConcurrentHashMap.png","date":"2018-06-15T05:15:27.000Z","author":"Crab2Died","_content":"\n## 1. JAVA集合框架图  \n   - 集合框架\n   ![集合框架](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.jpg)\n   - 集合框架-简图\n   ![集合框架-简图](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E7%AE%80%E5%9B%BE.jpg)\n\n## 2. ArrayList、LinkedList、Vector、Stack\n  1. 都是java的可存储重复元素的集合容器,都实现了Collection、List接口\n  2. ArrayList是基于数组的可动态扩展的、可存储重复元素的、有默认顺序的集合，非线程安全的，最大元素个数为`Integer.MAX_VALUE`个\n     由于是基于数组的所以add(E)、get(i)效率较高，set(i,E)、remove(i)、add(i,E)效率较低\n  3. LinkedList是基于双向链表的可动态扩展的、可存储重复元素的、非线程安全的有序集合。\n     由于是基于链表的所以add(E)、add(i,E)、set(i,E)、remove(i)效率较高，get(i)效率较低\n  4. Vector是基于数组的可动态扩展的、可存储重复元素的、线程安全的有序集合\n     由于是线程安全的所以效率比上诉的都要低\n  5. Stack(栈),继承了Vector,只有push(入栈)、pop(出栈)、peek(查看)等方法实现\n\n## 3. HashSet、LinkedHashSet、TreeSet\n  1. 都是java的不可存储重复元素的集合容器,都实现了Collection、Set接口\n  2. HashSet是不重复的(hashcode去重)、非线程安全的无序集合\n     只能放一个null\n  3. LinkedHashSet是不重复的(hashcode去重)、非线程安全的有序集合\n  4. TreeSet是SortedSet唯一实现类，TreeSet可实现自定义排序(实现Comparable接口)   \n\n## 4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap\n  1. 都是存储形如key-value集合的容器，都实现了Map接口\n  2. HashMap是非线程安全的、按key值得hashcode去重的、无序的集合, 能接受key为null\n  3. HashTable与HashTable类似，区别在于其实现了同步，效率也相较于HashMap低，不能接受key为null的情况\n  4. ConcurrentHashMap是线程安全的、引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需\n     要等到迭代完成才能访问map。简而言之在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map,\n     所以ConcurrentHashMap效率高于HashTable, 不能接受key为null的情况   \n     ConcurrentHashMap实现锁分段技术是通过可重入锁ReentrantLock实现Segment[]分锁，每个Segment内部存放一个或多个HashEntry[]\n     每个HashEntry又是一个链表，具体的数据结构如图：  \n     ![ConcurrentHashMap结构图](/images/java-collection-frame/ConcurrentHashMap.png)\n  5. IdentityHashMap基于数组的、区别于HashMap的是比较key值是比较引用相等(形如`object1 == object2`)的，HashMap是equals()\n     判断是否相等的，能接受key为null\n","source":"_posts/java-collection-frame.md","raw":"---\nlayout: post\ntitle: Java Collection Frame\nthumbnail: /images/java-collection-frame/ConcurrentHashMap.png\ndate: 2018-06-15 13:15:27 +0800\nauthor: Crab2Died\ncategories: Java\ntags: \n  - Java\n  - Collection\n---\n\n## 1. JAVA集合框架图  \n   - 集合框架\n   ![集合框架](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.jpg)\n   - 集合框架-简图\n   ![集合框架-简图](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E7%AE%80%E5%9B%BE.jpg)\n\n## 2. ArrayList、LinkedList、Vector、Stack\n  1. 都是java的可存储重复元素的集合容器,都实现了Collection、List接口\n  2. ArrayList是基于数组的可动态扩展的、可存储重复元素的、有默认顺序的集合，非线程安全的，最大元素个数为`Integer.MAX_VALUE`个\n     由于是基于数组的所以add(E)、get(i)效率较高，set(i,E)、remove(i)、add(i,E)效率较低\n  3. LinkedList是基于双向链表的可动态扩展的、可存储重复元素的、非线程安全的有序集合。\n     由于是基于链表的所以add(E)、add(i,E)、set(i,E)、remove(i)效率较高，get(i)效率较低\n  4. Vector是基于数组的可动态扩展的、可存储重复元素的、线程安全的有序集合\n     由于是线程安全的所以效率比上诉的都要低\n  5. Stack(栈),继承了Vector,只有push(入栈)、pop(出栈)、peek(查看)等方法实现\n\n## 3. HashSet、LinkedHashSet、TreeSet\n  1. 都是java的不可存储重复元素的集合容器,都实现了Collection、Set接口\n  2. HashSet是不重复的(hashcode去重)、非线程安全的无序集合\n     只能放一个null\n  3. LinkedHashSet是不重复的(hashcode去重)、非线程安全的有序集合\n  4. TreeSet是SortedSet唯一实现类，TreeSet可实现自定义排序(实现Comparable接口)   \n\n## 4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap\n  1. 都是存储形如key-value集合的容器，都实现了Map接口\n  2. HashMap是非线程安全的、按key值得hashcode去重的、无序的集合, 能接受key为null\n  3. HashTable与HashTable类似，区别在于其实现了同步，效率也相较于HashMap低，不能接受key为null的情况\n  4. ConcurrentHashMap是线程安全的、引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需\n     要等到迭代完成才能访问map。简而言之在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map,\n     所以ConcurrentHashMap效率高于HashTable, 不能接受key为null的情况   \n     ConcurrentHashMap实现锁分段技术是通过可重入锁ReentrantLock实现Segment[]分锁，每个Segment内部存放一个或多个HashEntry[]\n     每个HashEntry又是一个链表，具体的数据结构如图：  \n     ![ConcurrentHashMap结构图](/images/java-collection-frame/ConcurrentHashMap.png)\n  5. IdentityHashMap基于数组的、区别于HashMap的是比较key值是比较引用相等(形如`object1 == object2`)的，HashMap是equals()\n     判断是否相等的，能接受key为null\n","slug":"java-collection-frame","published":1,"updated":"2018-12-11T15:11:44.617Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vim0005uoilw6hejokr","content":"<h2 id=\"1-JAVA集合框架图\"><a href=\"#1-JAVA集合框架图\" class=\"headerlink\" title=\"1. JAVA集合框架图\"></a>1. JAVA集合框架图</h2><ul>\n<li>集合框架<br><img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.jpg\" alt=\"集合框架\"></li>\n<li>集合框架-简图<br><img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E7%AE%80%E5%9B%BE.jpg\" alt=\"集合框架-简图\"></li>\n</ul>\n<h2 id=\"2-ArrayList、LinkedList、Vector、Stack\"><a href=\"#2-ArrayList、LinkedList、Vector、Stack\" class=\"headerlink\" title=\"2. ArrayList、LinkedList、Vector、Stack\"></a>2. ArrayList、LinkedList、Vector、Stack</h2><ol>\n<li>都是java的可存储重复元素的集合容器,都实现了Collection、List接口</li>\n<li>ArrayList是基于数组的可动态扩展的、可存储重复元素的、有默认顺序的集合，非线程安全的，最大元素个数为<code>Integer.MAX_VALUE</code>个<br>由于是基于数组的所以add(E)、get(i)效率较高，set(i,E)、remove(i)、add(i,E)效率较低</li>\n<li>LinkedList是基于双向链表的可动态扩展的、可存储重复元素的、非线程安全的有序集合。<br>由于是基于链表的所以add(E)、add(i,E)、set(i,E)、remove(i)效率较高，get(i)效率较低</li>\n<li>Vector是基于数组的可动态扩展的、可存储重复元素的、线程安全的有序集合<br>由于是线程安全的所以效率比上诉的都要低</li>\n<li>Stack(栈),继承了Vector,只有push(入栈)、pop(出栈)、peek(查看)等方法实现</li>\n</ol>\n<h2 id=\"3-HashSet、LinkedHashSet、TreeSet\"><a href=\"#3-HashSet、LinkedHashSet、TreeSet\" class=\"headerlink\" title=\"3. HashSet、LinkedHashSet、TreeSet\"></a>3. HashSet、LinkedHashSet、TreeSet</h2><ol>\n<li>都是java的不可存储重复元素的集合容器,都实现了Collection、Set接口</li>\n<li>HashSet是不重复的(hashcode去重)、非线程安全的无序集合<br>只能放一个null</li>\n<li>LinkedHashSet是不重复的(hashcode去重)、非线程安全的有序集合</li>\n<li>TreeSet是SortedSet唯一实现类，TreeSet可实现自定义排序(实现Comparable接口)   </li>\n</ol>\n<h2 id=\"4-HashMap、HashTable、ConcurrentHashMap、IdentityHashMap\"><a href=\"#4-HashMap、HashTable、ConcurrentHashMap、IdentityHashMap\" class=\"headerlink\" title=\"4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap\"></a>4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap</h2><ol>\n<li>都是存储形如key-value集合的容器，都实现了Map接口</li>\n<li>HashMap是非线程安全的、按key值得hashcode去重的、无序的集合, 能接受key为null</li>\n<li>HashTable与HashTable类似，区别在于其实现了同步，效率也相较于HashMap低，不能接受key为null的情况</li>\n<li>ConcurrentHashMap是线程安全的、引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需<br>要等到迭代完成才能访问map。简而言之在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map,<br>所以ConcurrentHashMap效率高于HashTable, 不能接受key为null的情况<br>ConcurrentHashMap实现锁分段技术是通过可重入锁ReentrantLock实现Segment[]分锁，每个Segment内部存放一个或多个HashEntry[]<br>每个HashEntry又是一个链表，具体的数据结构如图：<br><img src=\"/images/java-collection-frame/ConcurrentHashMap.png\" alt=\"ConcurrentHashMap结构图\"></li>\n<li>IdentityHashMap基于数组的、区别于HashMap的是比较key值是比较引用相等(形如<code>object1 == object2</code>)的，HashMap是equals()<br>判断是否相等的，能接受key为null</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-JAVA集合框架图\"><a href=\"#1-JAVA集合框架图\" class=\"headerlink\" title=\"1. JAVA集合框架图\"></a>1. JAVA集合框架图</h2><ul>\n<li>集合框架<br><img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.jpg\" alt=\"集合框架\"></li>\n<li>集合框架-简图<br><img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/collections/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E7%AE%80%E5%9B%BE.jpg\" alt=\"集合框架-简图\"></li>\n</ul>\n<h2 id=\"2-ArrayList、LinkedList、Vector、Stack\"><a href=\"#2-ArrayList、LinkedList、Vector、Stack\" class=\"headerlink\" title=\"2. ArrayList、LinkedList、Vector、Stack\"></a>2. ArrayList、LinkedList、Vector、Stack</h2><ol>\n<li>都是java的可存储重复元素的集合容器,都实现了Collection、List接口</li>\n<li>ArrayList是基于数组的可动态扩展的、可存储重复元素的、有默认顺序的集合，非线程安全的，最大元素个数为<code>Integer.MAX_VALUE</code>个<br>由于是基于数组的所以add(E)、get(i)效率较高，set(i,E)、remove(i)、add(i,E)效率较低</li>\n<li>LinkedList是基于双向链表的可动态扩展的、可存储重复元素的、非线程安全的有序集合。<br>由于是基于链表的所以add(E)、add(i,E)、set(i,E)、remove(i)效率较高，get(i)效率较低</li>\n<li>Vector是基于数组的可动态扩展的、可存储重复元素的、线程安全的有序集合<br>由于是线程安全的所以效率比上诉的都要低</li>\n<li>Stack(栈),继承了Vector,只有push(入栈)、pop(出栈)、peek(查看)等方法实现</li>\n</ol>\n<h2 id=\"3-HashSet、LinkedHashSet、TreeSet\"><a href=\"#3-HashSet、LinkedHashSet、TreeSet\" class=\"headerlink\" title=\"3. HashSet、LinkedHashSet、TreeSet\"></a>3. HashSet、LinkedHashSet、TreeSet</h2><ol>\n<li>都是java的不可存储重复元素的集合容器,都实现了Collection、Set接口</li>\n<li>HashSet是不重复的(hashcode去重)、非线程安全的无序集合<br>只能放一个null</li>\n<li>LinkedHashSet是不重复的(hashcode去重)、非线程安全的有序集合</li>\n<li>TreeSet是SortedSet唯一实现类，TreeSet可实现自定义排序(实现Comparable接口)   </li>\n</ol>\n<h2 id=\"4-HashMap、HashTable、ConcurrentHashMap、IdentityHashMap\"><a href=\"#4-HashMap、HashTable、ConcurrentHashMap、IdentityHashMap\" class=\"headerlink\" title=\"4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap\"></a>4. HashMap、HashTable、ConcurrentHashMap、IdentityHashMap</h2><ol>\n<li>都是存储形如key-value集合的容器，都实现了Map接口</li>\n<li>HashMap是非线程安全的、按key值得hashcode去重的、无序的集合, 能接受key为null</li>\n<li>HashTable与HashTable类似，区别在于其实现了同步，效率也相较于HashMap低，不能接受key为null的情况</li>\n<li>ConcurrentHashMap是线程安全的、引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需<br>要等到迭代完成才能访问map。简而言之在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map,<br>所以ConcurrentHashMap效率高于HashTable, 不能接受key为null的情况<br>ConcurrentHashMap实现锁分段技术是通过可重入锁ReentrantLock实现Segment[]分锁，每个Segment内部存放一个或多个HashEntry[]<br>每个HashEntry又是一个链表，具体的数据结构如图：<br><img src=\"/images/java-collection-frame/ConcurrentHashMap.png\" alt=\"ConcurrentHashMap结构图\"></li>\n<li>IdentityHashMap基于数组的、区别于HashMap的是比较key值是比较引用相等(形如<code>object1 == object2</code>)的，HashMap是equals()<br>判断是否相等的，能接受key为null</li>\n</ol>\n"},{"layout":"post","title":"Java Compile and Optimize","thumbnail":"/images/material/gaoxiao.png","date":"2018-06-17T05:15:27.000Z","author":"Crab2Died","_content":"\n## 1. 早期(编译期)优化\n### 1-1. 概论\n1. 前端编译器:Sun的Javac、 Eclipse JDT中的增量式编译器(ECJ)\n   - JIT编译器:HotSpot VM的C1、 C2编译器\n   - AOT编译器:GNU Compiler for the Java(GCJ)、 Excelsior JET\n2. javac这类编译器几乎不对代码进行性能优化,把性能优化放到了JIT即时编译器内,可为JRuby、Groovy这类语言的代码也同等享有优化带来的好处\n   \n### 1-2. javac编译\n#### 1-2.1. 编译过程\n 1. 解析与填充符号表过程  \n   * 词法、语法分析\n     - 词法分析是将源代码的字符流转变为标记(Token)集合,单个字符是程序编写过程的最小元素,而标记则是编译过程的最小元素,关键字、 变量名、 字面量、 运算符都可以成为标记\n     - 语法分析是根据Token序列构造抽象语法树的过程,抽象语法树(Abstract Syntax Tree,AST)是一种用来描述程序代码语法结构的树形表示方式,语法树的每一个节点都代表着程序\n       代码中的一个语法结构(Construct),例如包、 类型、 修饰符、 运算符、 接口、 返回值甚至代码注释等都可以是一个语法结构.\n   * 填充符号表\n     - 符号表(Symbol Table)是由一组符号地址和符号信息构成的表格\n     - 在语义分析中,符号表所登记的内容将用于语义检查(如检查一个名字的使用和原先的说明是否一致)和产生中间代码.在目标代码生成阶段,当对符号名进行地址分配时,符号表是地址分配的依据.\n 2. 插入式注解处理器的注解处理过程\n 3. 分析与字节码生成过程\n   * 标注检查\n     - 检查的内容包括诸如变量使用前是否已被声明、 变量与赋值之间的数据类型是否能够匹配等\n     - 常量折叠 如定义了` int a = 1 + 2 `会被编译为` int a = 3 `\n   * 数据及控制流分析\n     - 数据及控制流分析是对程序上下文逻辑更进一步的验证,它可以检查出诸如程序局部变量在使用前是否有赋值、\n       方法的每条路径是否都有返回值、 是否所有的受查异常都被正确处理了等问题.\n   * 语法糖\n     - 语法糖:也称糖衣语法,是由英国计算机科学家彼得·约翰·兰达(Peter J.Landin)发明的一个术语,\n       指在计算机语言中添加的某种语法,这种语法对语言的功能并没有影响,但是更方便程序员使用.\n       通常来说,使用语法糖能够增加程序的可读性,从而减少程序代码出错的机会.\n     - java语法糖:泛型、变长参数、 自动装箱/拆箱等 内部类、 枚举类、 断言语句、 对枚举和字符串(在JDK 1.7中支持)\n       的switch支持、 try语句中定义和关闭资源(在JDK 1.7中支持)等\n     - 泛型:编译器会进行解泛,所以泛型不能进行方法重载\n     - 自动装箱、 拆箱与遍历循环\n     - 条件编译 if 的条件为常量时编译期会被执行\n   * 字节码生成\n     - 字节码生成阶段不仅仅是把前面各个步骤所生成的信息(语法树、 符号表)转化成字节码写到磁盘中,\n       编译器还进行了少量的代码添加和转换工作.\n      \n## 2. 晚期(运行期)优化\n### 2-1. 即时编译器(JIT)\n 1. 为了提高热点代码的执行效率,在运行时,虚拟机将会把这些代码编译成与本地平台相关的机器码,并进行各种层次的优化,\n    完成这个任务的编译器称为即时编译器(Just In Time Compiler)\n 2. 解释器与编译器(sun HotSpot虚拟机为例)\n   * 交互模型\n      ```\n             +---------------即时编译-----------↓\n             ↓                         Client Compiler(C1编译器)\n          解释器(Interpreter)               编译器\n             ↑                         Server Compiler(C2编译器)\n             +----------------逆优化------------↑\n      ```\n   * HotSpot虚拟机同时由解释器与编译器搭配使用(成为混合模式(Mixed Model)),\n     可添加参数-Xint强制虚拟机使用解释模式(Interpreted Mode),可添加参数`-Xcomp`强制虚拟机使用编译模式(Compiled Mode)\n   * 启动参数`-client`启用Client Compiler编译器 参数`-server`启用Server Compiler编译器\n   * HotSpot虚拟机还会逐渐启用分层编译(Tiered Compilation)的策略,分层编译的概念在JDK 1.6时期出现,\n     JDK1.7中Server模式中默认开启,之前需配参数`-XX:+TieredCompilation`启用\n 3. 编译对象与触发条件\n   * 触发条件\n     - 被多次调用的方法\n     - 被多次执行的循环体,这个称为栈上替换(On Stack Replacement,简称为OSR编译)\n   * 热点代码判定\n     - 基于采样的热点探测,周期性检测个线程的栈顶,若某个方法经常在栈顶,则认为是热点方法；\n       优点是实现简单简单,高效,容易获取方法调用关系,缺点是不能准确判定一个方法的热度\n     - 基于计数器的热点探测,虚拟机为每个方法设定计数器,统计方法执行次数,若超过一定阈值则认为是热点方法；\n       优点是能准确判定一个方法的热度,缺点是要为每个方法建立计数器并维护,实现麻烦,也不能获取方法的调用关系\n   * HotSpot虚拟机是基于计数器的热点探测,有2个计数器:方法调用计数器(Invocation Counter)和回边计数器(Back Edge Counter)\n     - 方法调用计数器,Client模式下阈值为1500次,Server模式下阈值为1000次,可由参数`-XX:CompileThreshold`来设置\n       `-XX:-UseCounterDecay`设置关闭热度衰减,`-XX:CounterHalfLifeTime`参数设置半衰周期的时间,单位是秒\n     - 回边计数器,参数`-XX:OnStackReplacePercentage`来间接调整回边计数器的阈值  \n       Client模式下阈值计算公式:  \n       `方法调用计数器阈值(CompileThreshold)×OSR比率(OnStackReplacePercentage)[默认值为933]/100` 默认情况下为13995  \n       Server模式下阈值计算公式:  \n       `方法调用计数器阈值(CompileThreshold)×(OSR比率(OnStackReplacePercentage)[默认值140]-解释器监控比率(InterpreterProfilePercentage)[默认值33]/100`\n       默认情况下为10700\n 4. 编译过程\n   - Client模式下编译过程  \n   ![Client Compiler编译过程](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/optimize/Client-Compiler%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png)\n   - Server模式下编译过程  \n     相当复杂\n 5. 优化技术\n   * 公共子表达式消除\n     - 经典优化技术,如果一个表达式E已经计算过了,并且从先前的计算到现在E中所有变量的值都没有发生变化,那么E的这次出现就成为了公共子表达式. \n       对于这种表达式,没有必要花时间再对它进行计算,只需要直接用前面计算过的表达式结果代替E就可以了\n   * 数组边界检查消除\n     - 语言相关的其他消除操作还有不少,如自动装箱消除(Autobox Elimination)、 安全点消除(Safepoint Elimination)、消除反射(Dereflection)等\n   * 方法内联\n     - 虚拟机最重要的优化手段之一,除了消除方法调用的成本之外,它更重要的意义是为其他优化手段建立良好的基础\n     - 非虚方法直接内联,虚方法引入了一种名为“类型继承关系分析”(Class Hierarchy Analysis,CHA)的技术,\n       检查发现没有多个目标版本可供选择,则也可内联,但需准备一个逃生门,即使有多个版本目标也会默认内联,但在调用时要检查,\n       发现版本目标不一致在取消内联,会从“逃生门”回到解释状态重新执行\n   * 逃逸分析(JDK1.6)\n     - 当下java最前沿的优化技术\n     - 逃逸分析的基本行为就是分析对象动态作用域:当一个对象在方法中被定义后,它可能被外部方法所引用,\n       例如作为调用参数传递到其他方法中,称为方法逃逸. 甚至还有可能被外部线程访问到,\n       譬如赋值给类变量或可以在其他线程中访问的实例变量,称为线程逃逸.\n     - 栈上分配(Stack Allocation),如果证明一个对象不会逃逸到方法之外,则可以将对象分配到方法栈帧内存,这样随着栈帧出栈而销毁,极大地降低了GC系统压力\n     - 同步消除(Synchronization Elimination),如果能证明一个变量不会逃逸出线程,那就可以消除掉同步措施,消除同步带来的消耗\n     - 标量替换(Scalar Replacement)\n       标量(Scalar),是指一个数据已经无法再分解成更小的数据来表示了,如:`int`,`long`,`double`等\n       聚合量(Aggregate),是指一个数据可以被分解,典型的java对象\n       如果证明一个对象不被外界访问,又可拆散的话,那程序在调用的时候就不创建该变量,改为创建多个成员变量来代替,\n       将对象拆分后,除了可以让对象的成员变量在栈上(栈上存储的数据,有很大的概率会被虚拟机分配至物理机器的高速寄存器中存储)\n       分配和读写之外,还可以为后续进一步的优化手段创建条件\n     - 逃逸分析尚不成熟","source":"_posts/java-compile-and-optimize.md","raw":"---\nlayout: post\ntitle: Java Compile and Optimize\nthumbnail: /images/material/gaoxiao.png\ndate: 2018-06-17 13:15:27 +0800\nauthor: Crab2Died\ncategories: Java\ntags: \n  - Java\n  - JIT\n  - Optimize\n---\n\n## 1. 早期(编译期)优化\n### 1-1. 概论\n1. 前端编译器:Sun的Javac、 Eclipse JDT中的增量式编译器(ECJ)\n   - JIT编译器:HotSpot VM的C1、 C2编译器\n   - AOT编译器:GNU Compiler for the Java(GCJ)、 Excelsior JET\n2. javac这类编译器几乎不对代码进行性能优化,把性能优化放到了JIT即时编译器内,可为JRuby、Groovy这类语言的代码也同等享有优化带来的好处\n   \n### 1-2. javac编译\n#### 1-2.1. 编译过程\n 1. 解析与填充符号表过程  \n   * 词法、语法分析\n     - 词法分析是将源代码的字符流转变为标记(Token)集合,单个字符是程序编写过程的最小元素,而标记则是编译过程的最小元素,关键字、 变量名、 字面量、 运算符都可以成为标记\n     - 语法分析是根据Token序列构造抽象语法树的过程,抽象语法树(Abstract Syntax Tree,AST)是一种用来描述程序代码语法结构的树形表示方式,语法树的每一个节点都代表着程序\n       代码中的一个语法结构(Construct),例如包、 类型、 修饰符、 运算符、 接口、 返回值甚至代码注释等都可以是一个语法结构.\n   * 填充符号表\n     - 符号表(Symbol Table)是由一组符号地址和符号信息构成的表格\n     - 在语义分析中,符号表所登记的内容将用于语义检查(如检查一个名字的使用和原先的说明是否一致)和产生中间代码.在目标代码生成阶段,当对符号名进行地址分配时,符号表是地址分配的依据.\n 2. 插入式注解处理器的注解处理过程\n 3. 分析与字节码生成过程\n   * 标注检查\n     - 检查的内容包括诸如变量使用前是否已被声明、 变量与赋值之间的数据类型是否能够匹配等\n     - 常量折叠 如定义了` int a = 1 + 2 `会被编译为` int a = 3 `\n   * 数据及控制流分析\n     - 数据及控制流分析是对程序上下文逻辑更进一步的验证,它可以检查出诸如程序局部变量在使用前是否有赋值、\n       方法的每条路径是否都有返回值、 是否所有的受查异常都被正确处理了等问题.\n   * 语法糖\n     - 语法糖:也称糖衣语法,是由英国计算机科学家彼得·约翰·兰达(Peter J.Landin)发明的一个术语,\n       指在计算机语言中添加的某种语法,这种语法对语言的功能并没有影响,但是更方便程序员使用.\n       通常来说,使用语法糖能够增加程序的可读性,从而减少程序代码出错的机会.\n     - java语法糖:泛型、变长参数、 自动装箱/拆箱等 内部类、 枚举类、 断言语句、 对枚举和字符串(在JDK 1.7中支持)\n       的switch支持、 try语句中定义和关闭资源(在JDK 1.7中支持)等\n     - 泛型:编译器会进行解泛,所以泛型不能进行方法重载\n     - 自动装箱、 拆箱与遍历循环\n     - 条件编译 if 的条件为常量时编译期会被执行\n   * 字节码生成\n     - 字节码生成阶段不仅仅是把前面各个步骤所生成的信息(语法树、 符号表)转化成字节码写到磁盘中,\n       编译器还进行了少量的代码添加和转换工作.\n      \n## 2. 晚期(运行期)优化\n### 2-1. 即时编译器(JIT)\n 1. 为了提高热点代码的执行效率,在运行时,虚拟机将会把这些代码编译成与本地平台相关的机器码,并进行各种层次的优化,\n    完成这个任务的编译器称为即时编译器(Just In Time Compiler)\n 2. 解释器与编译器(sun HotSpot虚拟机为例)\n   * 交互模型\n      ```\n             +---------------即时编译-----------↓\n             ↓                         Client Compiler(C1编译器)\n          解释器(Interpreter)               编译器\n             ↑                         Server Compiler(C2编译器)\n             +----------------逆优化------------↑\n      ```\n   * HotSpot虚拟机同时由解释器与编译器搭配使用(成为混合模式(Mixed Model)),\n     可添加参数-Xint强制虚拟机使用解释模式(Interpreted Mode),可添加参数`-Xcomp`强制虚拟机使用编译模式(Compiled Mode)\n   * 启动参数`-client`启用Client Compiler编译器 参数`-server`启用Server Compiler编译器\n   * HotSpot虚拟机还会逐渐启用分层编译(Tiered Compilation)的策略,分层编译的概念在JDK 1.6时期出现,\n     JDK1.7中Server模式中默认开启,之前需配参数`-XX:+TieredCompilation`启用\n 3. 编译对象与触发条件\n   * 触发条件\n     - 被多次调用的方法\n     - 被多次执行的循环体,这个称为栈上替换(On Stack Replacement,简称为OSR编译)\n   * 热点代码判定\n     - 基于采样的热点探测,周期性检测个线程的栈顶,若某个方法经常在栈顶,则认为是热点方法；\n       优点是实现简单简单,高效,容易获取方法调用关系,缺点是不能准确判定一个方法的热度\n     - 基于计数器的热点探测,虚拟机为每个方法设定计数器,统计方法执行次数,若超过一定阈值则认为是热点方法；\n       优点是能准确判定一个方法的热度,缺点是要为每个方法建立计数器并维护,实现麻烦,也不能获取方法的调用关系\n   * HotSpot虚拟机是基于计数器的热点探测,有2个计数器:方法调用计数器(Invocation Counter)和回边计数器(Back Edge Counter)\n     - 方法调用计数器,Client模式下阈值为1500次,Server模式下阈值为1000次,可由参数`-XX:CompileThreshold`来设置\n       `-XX:-UseCounterDecay`设置关闭热度衰减,`-XX:CounterHalfLifeTime`参数设置半衰周期的时间,单位是秒\n     - 回边计数器,参数`-XX:OnStackReplacePercentage`来间接调整回边计数器的阈值  \n       Client模式下阈值计算公式:  \n       `方法调用计数器阈值(CompileThreshold)×OSR比率(OnStackReplacePercentage)[默认值为933]/100` 默认情况下为13995  \n       Server模式下阈值计算公式:  \n       `方法调用计数器阈值(CompileThreshold)×(OSR比率(OnStackReplacePercentage)[默认值140]-解释器监控比率(InterpreterProfilePercentage)[默认值33]/100`\n       默认情况下为10700\n 4. 编译过程\n   - Client模式下编译过程  \n   ![Client Compiler编译过程](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/optimize/Client-Compiler%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png)\n   - Server模式下编译过程  \n     相当复杂\n 5. 优化技术\n   * 公共子表达式消除\n     - 经典优化技术,如果一个表达式E已经计算过了,并且从先前的计算到现在E中所有变量的值都没有发生变化,那么E的这次出现就成为了公共子表达式. \n       对于这种表达式,没有必要花时间再对它进行计算,只需要直接用前面计算过的表达式结果代替E就可以了\n   * 数组边界检查消除\n     - 语言相关的其他消除操作还有不少,如自动装箱消除(Autobox Elimination)、 安全点消除(Safepoint Elimination)、消除反射(Dereflection)等\n   * 方法内联\n     - 虚拟机最重要的优化手段之一,除了消除方法调用的成本之外,它更重要的意义是为其他优化手段建立良好的基础\n     - 非虚方法直接内联,虚方法引入了一种名为“类型继承关系分析”(Class Hierarchy Analysis,CHA)的技术,\n       检查发现没有多个目标版本可供选择,则也可内联,但需准备一个逃生门,即使有多个版本目标也会默认内联,但在调用时要检查,\n       发现版本目标不一致在取消内联,会从“逃生门”回到解释状态重新执行\n   * 逃逸分析(JDK1.6)\n     - 当下java最前沿的优化技术\n     - 逃逸分析的基本行为就是分析对象动态作用域:当一个对象在方法中被定义后,它可能被外部方法所引用,\n       例如作为调用参数传递到其他方法中,称为方法逃逸. 甚至还有可能被外部线程访问到,\n       譬如赋值给类变量或可以在其他线程中访问的实例变量,称为线程逃逸.\n     - 栈上分配(Stack Allocation),如果证明一个对象不会逃逸到方法之外,则可以将对象分配到方法栈帧内存,这样随着栈帧出栈而销毁,极大地降低了GC系统压力\n     - 同步消除(Synchronization Elimination),如果能证明一个变量不会逃逸出线程,那就可以消除掉同步措施,消除同步带来的消耗\n     - 标量替换(Scalar Replacement)\n       标量(Scalar),是指一个数据已经无法再分解成更小的数据来表示了,如:`int`,`long`,`double`等\n       聚合量(Aggregate),是指一个数据可以被分解,典型的java对象\n       如果证明一个对象不被外界访问,又可拆散的话,那程序在调用的时候就不创建该变量,改为创建多个成员变量来代替,\n       将对象拆分后,除了可以让对象的成员变量在栈上(栈上存储的数据,有很大的概率会被虚拟机分配至物理机器的高速寄存器中存储)\n       分配和读写之外,还可以为后续进一步的优化手段创建条件\n     - 逃逸分析尚不成熟","slug":"java-compile-and-optimize","published":1,"updated":"2018-12-12T15:57:07.862Z","comments":1,"photos":[],"link":"","_id":"cjpmk9viy0006uoil47yfdaqc","content":"<h2 id=\"1-早期-编译期-优化\"><a href=\"#1-早期-编译期-优化\" class=\"headerlink\" title=\"1. 早期(编译期)优化\"></a>1. 早期(编译期)优化</h2><h3 id=\"1-1-概论\"><a href=\"#1-1-概论\" class=\"headerlink\" title=\"1-1. 概论\"></a>1-1. 概论</h3><ol>\n<li>前端编译器:Sun的Javac、 Eclipse JDT中的增量式编译器(ECJ)<ul>\n<li>JIT编译器:HotSpot VM的C1、 C2编译器</li>\n<li>AOT编译器:GNU Compiler for the Java(GCJ)、 Excelsior JET</li>\n</ul>\n</li>\n<li>javac这类编译器几乎不对代码进行性能优化,把性能优化放到了JIT即时编译器内,可为JRuby、Groovy这类语言的代码也同等享有优化带来的好处</li>\n</ol>\n<h3 id=\"1-2-javac编译\"><a href=\"#1-2-javac编译\" class=\"headerlink\" title=\"1-2. javac编译\"></a>1-2. javac编译</h3><h4 id=\"1-2-1-编译过程\"><a href=\"#1-2-1-编译过程\" class=\"headerlink\" title=\"1-2.1. 编译过程\"></a>1-2.1. 编译过程</h4><ol>\n<li>解析与填充符号表过程  <ul>\n<li>词法、语法分析<ul>\n<li>词法分析是将源代码的字符流转变为标记(Token)集合,单个字符是程序编写过程的最小元素,而标记则是编译过程的最小元素,关键字、 变量名、 字面量、 运算符都可以成为标记</li>\n<li>语法分析是根据Token序列构造抽象语法树的过程,抽象语法树(Abstract Syntax Tree,AST)是一种用来描述程序代码语法结构的树形表示方式,语法树的每一个节点都代表着程序<br>代码中的一个语法结构(Construct),例如包、 类型、 修饰符、 运算符、 接口、 返回值甚至代码注释等都可以是一个语法结构.</li>\n</ul>\n</li>\n<li>填充符号表<ul>\n<li>符号表(Symbol Table)是由一组符号地址和符号信息构成的表格</li>\n<li>在语义分析中,符号表所登记的内容将用于语义检查(如检查一个名字的使用和原先的说明是否一致)和产生中间代码.在目标代码生成阶段,当对符号名进行地址分配时,符号表是地址分配的依据.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>插入式注解处理器的注解处理过程</li>\n<li>分析与字节码生成过程<ul>\n<li>标注检查<ul>\n<li>检查的内容包括诸如变量使用前是否已被声明、 变量与赋值之间的数据类型是否能够匹配等</li>\n<li>常量折叠 如定义了<code>int a = 1 + 2</code>会被编译为<code>int a = 3</code></li>\n</ul>\n</li>\n<li>数据及控制流分析<ul>\n<li>数据及控制流分析是对程序上下文逻辑更进一步的验证,它可以检查出诸如程序局部变量在使用前是否有赋值、<br>方法的每条路径是否都有返回值、 是否所有的受查异常都被正确处理了等问题.</li>\n</ul>\n</li>\n<li>语法糖<ul>\n<li>语法糖:也称糖衣语法,是由英国计算机科学家彼得·约翰·兰达(Peter J.Landin)发明的一个术语,<br>指在计算机语言中添加的某种语法,这种语法对语言的功能并没有影响,但是更方便程序员使用.<br>通常来说,使用语法糖能够增加程序的可读性,从而减少程序代码出错的机会.</li>\n<li>java语法糖:泛型、变长参数、 自动装箱/拆箱等 内部类、 枚举类、 断言语句、 对枚举和字符串(在JDK 1.7中支持)<br>的switch支持、 try语句中定义和关闭资源(在JDK 1.7中支持)等</li>\n<li>泛型:编译器会进行解泛,所以泛型不能进行方法重载</li>\n<li>自动装箱、 拆箱与遍历循环</li>\n<li>条件编译 if 的条件为常量时编译期会被执行</li>\n</ul>\n</li>\n<li>字节码生成<ul>\n<li>字节码生成阶段不仅仅是把前面各个步骤所生成的信息(语法树、 符号表)转化成字节码写到磁盘中,<br>编译器还进行了少量的代码添加和转换工作.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-晚期-运行期-优化\"><a href=\"#2-晚期-运行期-优化\" class=\"headerlink\" title=\"2. 晚期(运行期)优化\"></a>2. 晚期(运行期)优化</h2><h3 id=\"2-1-即时编译器-JIT\"><a href=\"#2-1-即时编译器-JIT\" class=\"headerlink\" title=\"2-1. 即时编译器(JIT)\"></a>2-1. 即时编译器(JIT)</h3><ol>\n<li>为了提高热点代码的执行效率,在运行时,虚拟机将会把这些代码编译成与本地平台相关的机器码,并进行各种层次的优化,<br>完成这个任务的编译器称为即时编译器(Just In Time Compiler)</li>\n<li><p>解释器与编译器(sun HotSpot虚拟机为例)</p>\n<ul>\n<li><p>交互模型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">   +---------------即时编译-----------↓</span><br><span class=\"line\">   ↓                         Client Compiler(C1编译器)</span><br><span class=\"line\">解释器(Interpreter)               编译器</span><br><span class=\"line\">   ↑                         Server Compiler(C2编译器)</span><br><span class=\"line\">   +----------------逆优化------------↑</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HotSpot虚拟机同时由解释器与编译器搭配使用(成为混合模式(Mixed Model)),<br>可添加参数-Xint强制虚拟机使用解释模式(Interpreted Mode),可添加参数<code>-Xcomp</code>强制虚拟机使用编译模式(Compiled Mode)</p>\n</li>\n<li>启动参数<code>-client</code>启用Client Compiler编译器 参数<code>-server</code>启用Server Compiler编译器</li>\n<li>HotSpot虚拟机还会逐渐启用分层编译(Tiered Compilation)的策略,分层编译的概念在JDK 1.6时期出现,<br>JDK1.7中Server模式中默认开启,之前需配参数<code>-XX:+TieredCompilation</code>启用</li>\n</ul>\n</li>\n<li>编译对象与触发条件<ul>\n<li>触发条件<ul>\n<li>被多次调用的方法</li>\n<li>被多次执行的循环体,这个称为栈上替换(On Stack Replacement,简称为OSR编译)</li>\n</ul>\n</li>\n<li>热点代码判定<ul>\n<li>基于采样的热点探测,周期性检测个线程的栈顶,若某个方法经常在栈顶,则认为是热点方法；<br>优点是实现简单简单,高效,容易获取方法调用关系,缺点是不能准确判定一个方法的热度</li>\n<li>基于计数器的热点探测,虚拟机为每个方法设定计数器,统计方法执行次数,若超过一定阈值则认为是热点方法；<br>优点是能准确判定一个方法的热度,缺点是要为每个方法建立计数器并维护,实现麻烦,也不能获取方法的调用关系</li>\n</ul>\n</li>\n<li>HotSpot虚拟机是基于计数器的热点探测,有2个计数器:方法调用计数器(Invocation Counter)和回边计数器(Back Edge Counter)<ul>\n<li>方法调用计数器,Client模式下阈值为1500次,Server模式下阈值为1000次,可由参数<code>-XX:CompileThreshold</code>来设置<br><code>-XX:-UseCounterDecay</code>设置关闭热度衰减,<code>-XX:CounterHalfLifeTime</code>参数设置半衰周期的时间,单位是秒</li>\n<li>回边计数器,参数<code>-XX:OnStackReplacePercentage</code>来间接调整回边计数器的阈值<br>Client模式下阈值计算公式:<br><code>方法调用计数器阈值(CompileThreshold)×OSR比率(OnStackReplacePercentage)[默认值为933]/100</code> 默认情况下为13995<br>Server模式下阈值计算公式:<br><code>方法调用计数器阈值(CompileThreshold)×(OSR比率(OnStackReplacePercentage)[默认值140]-解释器监控比率(InterpreterProfilePercentage)[默认值33]/100</code><br>默认情况下为10700</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>编译过程<ul>\n<li>Client模式下编译过程<br><img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/optimize/Client-Compiler%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png\" alt=\"Client Compiler编译过程\"></li>\n<li>Server模式下编译过程<br>相当复杂</li>\n</ul>\n</li>\n<li>优化技术<ul>\n<li>公共子表达式消除<ul>\n<li>经典优化技术,如果一个表达式E已经计算过了,并且从先前的计算到现在E中所有变量的值都没有发生变化,那么E的这次出现就成为了公共子表达式.<br>对于这种表达式,没有必要花时间再对它进行计算,只需要直接用前面计算过的表达式结果代替E就可以了</li>\n</ul>\n</li>\n<li>数组边界检查消除<ul>\n<li>语言相关的其他消除操作还有不少,如自动装箱消除(Autobox Elimination)、 安全点消除(Safepoint Elimination)、消除反射(Dereflection)等</li>\n</ul>\n</li>\n<li>方法内联<ul>\n<li>虚拟机最重要的优化手段之一,除了消除方法调用的成本之外,它更重要的意义是为其他优化手段建立良好的基础</li>\n<li>非虚方法直接内联,虚方法引入了一种名为“类型继承关系分析”(Class Hierarchy Analysis,CHA)的技术,<br>检查发现没有多个目标版本可供选择,则也可内联,但需准备一个逃生门,即使有多个版本目标也会默认内联,但在调用时要检查,<br>发现版本目标不一致在取消内联,会从“逃生门”回到解释状态重新执行</li>\n</ul>\n</li>\n<li>逃逸分析(JDK1.6)<ul>\n<li>当下java最前沿的优化技术</li>\n<li>逃逸分析的基本行为就是分析对象动态作用域:当一个对象在方法中被定义后,它可能被外部方法所引用,<br>例如作为调用参数传递到其他方法中,称为方法逃逸. 甚至还有可能被外部线程访问到,<br>譬如赋值给类变量或可以在其他线程中访问的实例变量,称为线程逃逸.</li>\n<li>栈上分配(Stack Allocation),如果证明一个对象不会逃逸到方法之外,则可以将对象分配到方法栈帧内存,这样随着栈帧出栈而销毁,极大地降低了GC系统压力</li>\n<li>同步消除(Synchronization Elimination),如果能证明一个变量不会逃逸出线程,那就可以消除掉同步措施,消除同步带来的消耗</li>\n<li>标量替换(Scalar Replacement)<br>标量(Scalar),是指一个数据已经无法再分解成更小的数据来表示了,如:<code>int</code>,<code>long</code>,<code>double</code>等<br>聚合量(Aggregate),是指一个数据可以被分解,典型的java对象<br>如果证明一个对象不被外界访问,又可拆散的话,那程序在调用的时候就不创建该变量,改为创建多个成员变量来代替,<br>将对象拆分后,除了可以让对象的成员变量在栈上(栈上存储的数据,有很大的概率会被虚拟机分配至物理机器的高速寄存器中存储)<br>分配和读写之外,还可以为后续进一步的优化手段创建条件</li>\n<li>逃逸分析尚不成熟</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-早期-编译期-优化\"><a href=\"#1-早期-编译期-优化\" class=\"headerlink\" title=\"1. 早期(编译期)优化\"></a>1. 早期(编译期)优化</h2><h3 id=\"1-1-概论\"><a href=\"#1-1-概论\" class=\"headerlink\" title=\"1-1. 概论\"></a>1-1. 概论</h3><ol>\n<li>前端编译器:Sun的Javac、 Eclipse JDT中的增量式编译器(ECJ)<ul>\n<li>JIT编译器:HotSpot VM的C1、 C2编译器</li>\n<li>AOT编译器:GNU Compiler for the Java(GCJ)、 Excelsior JET</li>\n</ul>\n</li>\n<li>javac这类编译器几乎不对代码进行性能优化,把性能优化放到了JIT即时编译器内,可为JRuby、Groovy这类语言的代码也同等享有优化带来的好处</li>\n</ol>\n<h3 id=\"1-2-javac编译\"><a href=\"#1-2-javac编译\" class=\"headerlink\" title=\"1-2. javac编译\"></a>1-2. javac编译</h3><h4 id=\"1-2-1-编译过程\"><a href=\"#1-2-1-编译过程\" class=\"headerlink\" title=\"1-2.1. 编译过程\"></a>1-2.1. 编译过程</h4><ol>\n<li>解析与填充符号表过程  <ul>\n<li>词法、语法分析<ul>\n<li>词法分析是将源代码的字符流转变为标记(Token)集合,单个字符是程序编写过程的最小元素,而标记则是编译过程的最小元素,关键字、 变量名、 字面量、 运算符都可以成为标记</li>\n<li>语法分析是根据Token序列构造抽象语法树的过程,抽象语法树(Abstract Syntax Tree,AST)是一种用来描述程序代码语法结构的树形表示方式,语法树的每一个节点都代表着程序<br>代码中的一个语法结构(Construct),例如包、 类型、 修饰符、 运算符、 接口、 返回值甚至代码注释等都可以是一个语法结构.</li>\n</ul>\n</li>\n<li>填充符号表<ul>\n<li>符号表(Symbol Table)是由一组符号地址和符号信息构成的表格</li>\n<li>在语义分析中,符号表所登记的内容将用于语义检查(如检查一个名字的使用和原先的说明是否一致)和产生中间代码.在目标代码生成阶段,当对符号名进行地址分配时,符号表是地址分配的依据.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>插入式注解处理器的注解处理过程</li>\n<li>分析与字节码生成过程<ul>\n<li>标注检查<ul>\n<li>检查的内容包括诸如变量使用前是否已被声明、 变量与赋值之间的数据类型是否能够匹配等</li>\n<li>常量折叠 如定义了<code>int a = 1 + 2</code>会被编译为<code>int a = 3</code></li>\n</ul>\n</li>\n<li>数据及控制流分析<ul>\n<li>数据及控制流分析是对程序上下文逻辑更进一步的验证,它可以检查出诸如程序局部变量在使用前是否有赋值、<br>方法的每条路径是否都有返回值、 是否所有的受查异常都被正确处理了等问题.</li>\n</ul>\n</li>\n<li>语法糖<ul>\n<li>语法糖:也称糖衣语法,是由英国计算机科学家彼得·约翰·兰达(Peter J.Landin)发明的一个术语,<br>指在计算机语言中添加的某种语法,这种语法对语言的功能并没有影响,但是更方便程序员使用.<br>通常来说,使用语法糖能够增加程序的可读性,从而减少程序代码出错的机会.</li>\n<li>java语法糖:泛型、变长参数、 自动装箱/拆箱等 内部类、 枚举类、 断言语句、 对枚举和字符串(在JDK 1.7中支持)<br>的switch支持、 try语句中定义和关闭资源(在JDK 1.7中支持)等</li>\n<li>泛型:编译器会进行解泛,所以泛型不能进行方法重载</li>\n<li>自动装箱、 拆箱与遍历循环</li>\n<li>条件编译 if 的条件为常量时编译期会被执行</li>\n</ul>\n</li>\n<li>字节码生成<ul>\n<li>字节码生成阶段不仅仅是把前面各个步骤所生成的信息(语法树、 符号表)转化成字节码写到磁盘中,<br>编译器还进行了少量的代码添加和转换工作.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-晚期-运行期-优化\"><a href=\"#2-晚期-运行期-优化\" class=\"headerlink\" title=\"2. 晚期(运行期)优化\"></a>2. 晚期(运行期)优化</h2><h3 id=\"2-1-即时编译器-JIT\"><a href=\"#2-1-即时编译器-JIT\" class=\"headerlink\" title=\"2-1. 即时编译器(JIT)\"></a>2-1. 即时编译器(JIT)</h3><ol>\n<li>为了提高热点代码的执行效率,在运行时,虚拟机将会把这些代码编译成与本地平台相关的机器码,并进行各种层次的优化,<br>完成这个任务的编译器称为即时编译器(Just In Time Compiler)</li>\n<li><p>解释器与编译器(sun HotSpot虚拟机为例)</p>\n<ul>\n<li><p>交互模型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">   +---------------即时编译-----------↓</span><br><span class=\"line\">   ↓                         Client Compiler(C1编译器)</span><br><span class=\"line\">解释器(Interpreter)               编译器</span><br><span class=\"line\">   ↑                         Server Compiler(C2编译器)</span><br><span class=\"line\">   +----------------逆优化------------↑</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HotSpot虚拟机同时由解释器与编译器搭配使用(成为混合模式(Mixed Model)),<br>可添加参数-Xint强制虚拟机使用解释模式(Interpreted Mode),可添加参数<code>-Xcomp</code>强制虚拟机使用编译模式(Compiled Mode)</p>\n</li>\n<li>启动参数<code>-client</code>启用Client Compiler编译器 参数<code>-server</code>启用Server Compiler编译器</li>\n<li>HotSpot虚拟机还会逐渐启用分层编译(Tiered Compilation)的策略,分层编译的概念在JDK 1.6时期出现,<br>JDK1.7中Server模式中默认开启,之前需配参数<code>-XX:+TieredCompilation</code>启用</li>\n</ul>\n</li>\n<li>编译对象与触发条件<ul>\n<li>触发条件<ul>\n<li>被多次调用的方法</li>\n<li>被多次执行的循环体,这个称为栈上替换(On Stack Replacement,简称为OSR编译)</li>\n</ul>\n</li>\n<li>热点代码判定<ul>\n<li>基于采样的热点探测,周期性检测个线程的栈顶,若某个方法经常在栈顶,则认为是热点方法；<br>优点是实现简单简单,高效,容易获取方法调用关系,缺点是不能准确判定一个方法的热度</li>\n<li>基于计数器的热点探测,虚拟机为每个方法设定计数器,统计方法执行次数,若超过一定阈值则认为是热点方法；<br>优点是能准确判定一个方法的热度,缺点是要为每个方法建立计数器并维护,实现麻烦,也不能获取方法的调用关系</li>\n</ul>\n</li>\n<li>HotSpot虚拟机是基于计数器的热点探测,有2个计数器:方法调用计数器(Invocation Counter)和回边计数器(Back Edge Counter)<ul>\n<li>方法调用计数器,Client模式下阈值为1500次,Server模式下阈值为1000次,可由参数<code>-XX:CompileThreshold</code>来设置<br><code>-XX:-UseCounterDecay</code>设置关闭热度衰减,<code>-XX:CounterHalfLifeTime</code>参数设置半衰周期的时间,单位是秒</li>\n<li>回边计数器,参数<code>-XX:OnStackReplacePercentage</code>来间接调整回边计数器的阈值<br>Client模式下阈值计算公式:<br><code>方法调用计数器阈值(CompileThreshold)×OSR比率(OnStackReplacePercentage)[默认值为933]/100</code> 默认情况下为13995<br>Server模式下阈值计算公式:<br><code>方法调用计数器阈值(CompileThreshold)×(OSR比率(OnStackReplacePercentage)[默认值140]-解释器监控比率(InterpreterProfilePercentage)[默认值33]/100</code><br>默认情况下为10700</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>编译过程<ul>\n<li>Client模式下编译过程<br><img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/optimize/Client-Compiler%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png\" alt=\"Client Compiler编译过程\"></li>\n<li>Server模式下编译过程<br>相当复杂</li>\n</ul>\n</li>\n<li>优化技术<ul>\n<li>公共子表达式消除<ul>\n<li>经典优化技术,如果一个表达式E已经计算过了,并且从先前的计算到现在E中所有变量的值都没有发生变化,那么E的这次出现就成为了公共子表达式.<br>对于这种表达式,没有必要花时间再对它进行计算,只需要直接用前面计算过的表达式结果代替E就可以了</li>\n</ul>\n</li>\n<li>数组边界检查消除<ul>\n<li>语言相关的其他消除操作还有不少,如自动装箱消除(Autobox Elimination)、 安全点消除(Safepoint Elimination)、消除反射(Dereflection)等</li>\n</ul>\n</li>\n<li>方法内联<ul>\n<li>虚拟机最重要的优化手段之一,除了消除方法调用的成本之外,它更重要的意义是为其他优化手段建立良好的基础</li>\n<li>非虚方法直接内联,虚方法引入了一种名为“类型继承关系分析”(Class Hierarchy Analysis,CHA)的技术,<br>检查发现没有多个目标版本可供选择,则也可内联,但需准备一个逃生门,即使有多个版本目标也会默认内联,但在调用时要检查,<br>发现版本目标不一致在取消内联,会从“逃生门”回到解释状态重新执行</li>\n</ul>\n</li>\n<li>逃逸分析(JDK1.6)<ul>\n<li>当下java最前沿的优化技术</li>\n<li>逃逸分析的基本行为就是分析对象动态作用域:当一个对象在方法中被定义后,它可能被外部方法所引用,<br>例如作为调用参数传递到其他方法中,称为方法逃逸. 甚至还有可能被外部线程访问到,<br>譬如赋值给类变量或可以在其他线程中访问的实例变量,称为线程逃逸.</li>\n<li>栈上分配(Stack Allocation),如果证明一个对象不会逃逸到方法之外,则可以将对象分配到方法栈帧内存,这样随着栈帧出栈而销毁,极大地降低了GC系统压力</li>\n<li>同步消除(Synchronization Elimination),如果能证明一个变量不会逃逸出线程,那就可以消除掉同步措施,消除同步带来的消耗</li>\n<li>标量替换(Scalar Replacement)<br>标量(Scalar),是指一个数据已经无法再分解成更小的数据来表示了,如:<code>int</code>,<code>long</code>,<code>double</code>等<br>聚合量(Aggregate),是指一个数据可以被分解,典型的java对象<br>如果证明一个对象不被外界访问,又可拆散的话,那程序在调用的时候就不创建该变量,改为创建多个成员变量来代替,<br>将对象拆分后,除了可以让对象的成员变量在栈上(栈上存储的数据,有很大的概率会被虚拟机分配至物理机器的高速寄存器中存储)<br>分配和读写之外,还可以为后续进一步的优化手段创建条件</li>\n<li>逃逸分析尚不成熟</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"layout":"post","title":"Java Concurrent","thumbnail":"/images/material/maoxian.png","date":"2018-06-15T04:15:27.000Z","author":"Crab2Died","_content":"\n## 1. JAVA与线程\n### 1.1 线程的实现\n   1. 实现方式:使用内核线程实现、 使用用户线程实现和使用用户线程加轻量级进程混合实现.\n   2. JDK1.2之前是基于用户线程实现的，JDK1.2及以后是基于操作系统原生线程模型实现的.\n   \n### 1.2 Java线程调度\n   1. 线程调度是指系统为线程分配处理器使用权的过程,主要调度方式有两种,分别是协同式线程调度(Cooperative Threads-Scheduling)\n      和抢占式线程调度(Preemptive ThreadsScheduling)\n   2. 协同式线程调度:线程的执行时间由线程本身来控制,线程把自己的工作执行完了之后,要主动通知系统切换到另外一个线程上;\n      优点是实现简单,缺点是线程执行时间不可控制,容易线程阻塞\n   3. 每个线程将由系统来分配执行时间,线程的切换不由线程本身来决定(在Java中,Thread.yield()可以让出执行时间,但是要获取执行时\n      间的话,线程本身是没有什么办法的);优点是线程的执行时间是系统可控的,也不会有一个线程导致整个进程阻塞的问题.\n   4. JAVA线程有10个优先级(Thread.MIN_PRIORITY至Thread.MAX_PRIORITY)\n   \n### 1.3 线程转换状态\n   1. JAVA线程定义了6个状态:  \n      * 新建(New):创建后尚未启动的线程处于这种状态.\n      * 运行(Runable):Runable包括了操作系统线程状态中的Running和Ready,也就是处于此状态的线程有可能正在执行,也有可能正在等待着CPU为它分配执行时间.\n      * 无限期等待(Waiting):处于这种状态的线程不会被分配CPU执行时间,它们要等待被其他线程显式地唤醒. 以下方法会让线程陷入无限期的等待状态:  \n        ● 没有设置Timeout参数的Object.wait()方法.  \n        ● 没有设置Timeout参数的Thread.join()方法.  \n        ● LockSupport.park()方法.  \n      * 限期等待(Timed Waiting):处于这种状态的线程也不会被分配CPU执行时间,不过无须等待被其他线程显式地唤醒,在一定时间之后它们会由系统自动唤醒. 以下方法会让线程进入限期等待状态:  \n        ● Thread.sleep()方法.  \n        ● 设置了Timeout参数的Object.wait()方法.  \n        ● 设置了Timeout参数的Thread.join()方法.  \n        ● LockSupport.parkNanos()方法.  \n        ● LockSupport.parkUntil()方法 \n      * 阻塞(Blocked):该状态程序在等待获取一个排他锁，程序在同步时会在该状态 \n      * 结束(Terminated):已终止线程的线程状态,线程已经结束执行.\n   2. 线程状态转换关系图  \n      ![线程状态转换关系](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png)\n   \n## 2. 线程安全与锁优化\n### 2.1 JAVA中的线程安全\n   1. 共享数据分类\n      * 不可变(Immutable):不可变对象一定是线程安全的,典型的final\n      * 绝对线程安全:\n      * 相对线程安全: java大部分的线程安全都是相对线程安全的\n      * 线程兼容:\n      * 线程对立:\n\n### 2.2 synchronized的优化\n   1. synchronized自JDK1.6后引入偏向锁和轻量级锁后大大提升了并发的性能\n   2. synchronized锁升级`偏向锁 -> 轻量级锁 -> 重量级锁` 所以在锁高竞争下Lock性能更高\n   \n## 3. 锁介绍\n### 3.1 自旋锁\n   1. 自旋锁可以使线程在没有取得锁的时候，不被挂起，而转去执行一个空循环，（即所谓的自旋，就是自己执行空循环），若在若干个空循环后，线\n      程如果可以获得锁，则继续执行。若线程依然不能获得锁，才会被挂起。使用自旋锁后，线程被挂起的几率相对减少，线程执行的连贯性相对加\n      强。因此，对于那些锁竞争不是很激烈，锁占用时间很短的并发线程，具有一定的积极意义，但对于锁竞争激烈，单线程锁占用很长时间的并发\n      程序，自旋锁在自旋等待后，往往毅然无法获得对应的锁，不仅仅白白浪费了CPU时间，最终还是免不了被挂起的操作 ，反而浪费了系统的资源。\n      在JDK1.6中，Java虚拟机提供`-XX:+UseSpinning`参数来开启自旋锁，使用`-XX:PreBlockSpin`参数来设置自旋锁等待的次数。在JDK1.7\n      开始，自旋锁的参数被取消，虚拟机不再支持由用户配置自旋锁，自旋锁总是会执行，自旋锁次数也由虚拟机自动调整。  \n   2. 问题：  \n      - 可能白占用CPU时间\n      - 死锁问题，自己占用锁，还在等待锁释放\n      \n### 3.2 阻塞锁\n   1. 让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进\n      入运行状态。JAVA中，能够进入\\退出、阻塞状态或包含阻塞锁的方法有 ，`synchronized` 关键字（其中的重量锁），`ReentrantLock`，\n      `Object.wait()\\notify() `\n\n### 3.3 可重入锁\n   1. 可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。    \n      在JAVA环境下 `ReentrantLock` 和`synchronized` 都是 可重入锁\n\n### 3.4 乐观锁和悲观锁\n   1. 悲观锁: 每次拿数据都上锁，如行锁、表锁、读锁、写锁\n   2. 乐观锁: 每次拿数据都不上锁，只是在修改前验证下数据在此期间有无更新，如版本号控制\n\n### 3.5 轮询锁和定时锁\n   1. 由tryLock实现，与无条件获取锁模式相比，它们具有更完善的错误恢复机制。可避免死锁的发生：  \n     `boolean tryLock()`:仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回值true。如果锁不可用，则此方法将立即返回\n     值false。`boolean tryLock(long time, TimeUnit unit) throws InterruptedException`:如果锁在给定的等待时间内空闲，并且当前\n     线程未被中断，则获取锁。\n      \n### 3.6 显示锁和内置锁\n   1. 显示锁用`Lock`来定义、内置锁用`synchronized`。\n   \n### 3.7 对象锁和类锁\n   1. 对象锁是用于实例对象(可有多个实例对象)方法上的\n   2. 类锁是作用于对象的静态方法和Class(一个类只有一个Class对象)对象上的\n\n### 3.8 互斥锁\n   1. 互斥锁, 指的是一次最多只能有一个线程持有的锁。如Java的Lock\n   \n### 3.9 锁粗化\n   1. 将多个连续的锁操作合并成一个整体的锁\n\n### 3.10 锁消除\n   1. 通过逃逸分析，能证明堆上数据不会逃逸出当前线程，则认为是线程安全的，不必要加锁操作\n  \n## 4. java线程池\n### 4.1 线程池实现类\n  ```      \n   (C)ThreadPoolExecutor -->  (AC)AbstractExecutorService --> (I)ExecutorService --> (I)Executor\n  ```\n\n### 4.2 ThreadPoolExecutor构造参数说明\n  ```java\n    // corePoolSize 核心线程数，当任务多于核心线程数时会进入缓冲阻塞队列workQueue\n    // maximunPoolSize 线程池最大线程数\n    // keepAliveTime 多于核心线程数的空闲线程最长存活时间量级与unit参数配合使用\n    // unit 线程等待时间的单位级\n    // workQueue 任务缓冲队列\n    // threadFactory 线程工厂，用于创建线程\n    // handler 表示拒接处理任务的策略有一下4种：\n    //  - ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常\n    //  - ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常\n    //  - ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\n    //  - ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务\n    \n    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n            BlockingQueue<Runnable> workQueue);\n    \n    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n            BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory);\n    \n    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n            BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler);\n    \n    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n        BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);\n  ```\n\n### 4.3 实现原理\n   1. 线程池状态：  \n     - **RUNNING**: 线程池初始化时就是RUNNING状态，表示线程池能够接受任务并处理，并且线程池中线程数默认为0(可以通过调用方法\n       `prestartAllCoreThreads() #创建核心线程`或者`prestartCoreThread() #创建一个核心线程`来初始化线程数)\n     - **SHUTDOWN**: 线程处于SHUTDOWN状态时,不接收新任务,但能处理已添加的任务;状态切换调用`shutdown()`时从`RUNNING-> SHUTDOWN`\n     - **STOP**: 线程处于STOP状态时，不接收新任务，不处理已添加任务，并会终止正在执行的任务;状态切换调用`shutdownNow()`时从\n       `RUNNING or SHUTDOWN -> STOP`\n     - **TIDYING**: 当所有任务已终止，任务数量为0时，线程池会进入TIDYING状态，并且会执行钩子函数`terminated()`，用户可重载该方法\n       实现自己的业务逻辑;状态切换是所有任务终止就进入TIDYING状态\n     - **TERMINATED**: 线程池彻底终止状态;状态切换是TIDYING的钩子函数执行完毕后进入TERMINATED状态\n   \n   2. 任务执行过程\n     - 当任务提交给线程池时，线程首先判断当前池内线程数是否大于corePoolSize(核心线程数)，如果小于这值就会创建一个新的线程来执行该任务；\n     - 当线程数大于核心线程数时，则会尝试将任务放入缓冲队列(workQueue)内，若添加成功，则该任务会被等待的空闲线程取去执行，\n       若添加失败，则会尝试创建新的线程去执行该任务；\n     - 如果线程池内线程数达到了maximumPoolSize(最大线程数)时，则会采取handler(拒绝策略)处理\n     - 如果线程池内的线程数大于corePoolSize时，当线程空闲超时keepAliveTime时，线程将被终止，直到线程数等于corePoolSize；\n       如果允许核心线程数也有超时时间，则当核心线程数内的线程超时时也会被终止，直至线程数为0\n   \n   3. 线程池中的线程初始化\n     - `prestartCoreThread()`：初始化一个核心线程\n     - `prestartAllCoreThreads()`：初始化所有核心线程\n     - 初始化后线程会执行workQueue的`take()`方法，该方法是阻塞的，直到有任务提交\n   \n   4. 任务缓存队列及排队策略\n     - **ArrayBlockingQueue**：基于数组的FIFO阻塞队列,必须有最大容量的参数\n     - **LinkedBlockingQueue**: 基于链表的FIFO阻塞队列,容量动态扩展\n     - **SynchronousQueue**: 该队列不保存提交的任务，而是直接新建队列来执行任务\n   \n   5. 任务拒绝策略\n  ```\n    ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常\n    ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常\n    ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\n    ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务\n  ```\n   \n   6. 线程池的关闭\n     - `shutdown()`：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务 \n     - `shutdownNow()`: 立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务\n   \n   7. 线程池容量动态调整\n     - `setCorePoolSize()`：设置核心池大小\n     - `setMaximumPoolSize()`：设置线程池最大能创建的线程数目大小\n\n### 4.4 Executors\n   - **newFixedThreadPool**: 定容量的线程池，核心线程数与最大线程数相等\n   - **newSingleThreadExecutor**: 单线程线程池，线程池内核心线程数与最大线程数为1\n   - **newCachedThreadPool**: 无线大小线程池，核心线程数为0，最大线程数为`Integer.MAX_VALUE`, 缓冲队列为`SynchronousQueue`\n   - **newScheduledThreadPool**：创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为`Integer.MAX_VALUE`,内部是\n     一个DelayedWorkQueue实现\n   - **newSingleThreadScheduledExecutor**: 创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为`Integer.MAX_VALUE`,\n     内部是一个DelayedWorkQueue实现  \n\n## 5. AbstractQueuedSynchronizer\n   内部类：\n   - ConditionObject：\n   - Node：存放线程信息队列\n        \n### 5.1 AQS之ReentrantLock独占锁源码分析\n   - [AbstractQueuedSynchronizer独占锁](http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer)\n   - `ReentrantLock.lock()`保证在`ReentrantLock.unlock()`之间的代码只有一个线程在执行；ReentrantLock为可重入锁，它有一个与\n     锁相关的获取计数器，如果拥有锁的某个线程再次得到锁，那么获取计数器就加1，然后锁需要被释放两次才能获得真正释放。\n   - 内部类`Syn`实现了`AbstractQueuedSynchronizer`接口\n   - 构造方法有公平锁和非公平锁，公平锁与非公平锁的区别在于公平锁在尝试获取锁时会放入等待队列的后面，获取锁的顺序是按先后顺序执行的，\n     而非公平锁在尝试获取锁时首先会去尝试获取锁，若获取失败在进入等待队列按顺序执行。\n   \n### 5.2 AQS之CountDownLatch共享锁源码分析\n   - [AbstractQueuedSynchronizer共享锁](http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer)\n   - `CountDownLatch.countDown()`实现锁计数-1，直到减至0是，唤醒`CountDownLatch.await()`等待线程\n\n### 5.3 公平锁和非公平锁\n   公平锁是严格按照FIFO队列获得锁，但带来了大量的线程切换的消耗，非公平锁极大的降低了线程切换带来的消耗，虽然可能造成线程饥饿的情况，但也提高了吞吐量。\n\n## 6. synchronized与Lock比较\n   1. `synchronized`是JVM层面实现的'重量级锁'，可通过监控工具监控`synchronized`的锁定，而且代码出现异常时会自动释放锁\n   2. `Lock`是纯JAVA实现的，为多种实现留下空间，可以实现不同的调度算法、性能特性或者锁定语义，`Lock`必须自己手动的释放锁\n      形如`finally{lock.unlock();}`\n   3. 当锁竞争激烈时用`Lock`,锁竞争较弱时用`synchronized`\n\n## 7. 阻塞队列BlockingQueue\n   1. 阻塞队列是一个FIFO队列\n   2. 主要方法   \n   \n|   Ops   |    Throws Exception    |      Special Value     |           Blocks Times Out          |\n|:-------:|:----------------------:|:----------------------:|:-----------------------------------:|\n|Insert   |    add(o)              |     offer(o)           |put(o) & offer(o, timeout, timeUnit) |  \n|Remove   |   remove(o)            |     poll()             |take()\t& poll(timeout, timeUnit)     |\n|Examine  |   element()            |     peek()             |                -                    |\n\n   3. 主要实现  \n     - **ArrayBlockingQueue**：基于数组的有界阻塞队列，必须指定长度\n     - **LinkedBlockingQueue**: 基于链表的有界阻塞队列，长度可指定也可动态扩张，默认长度为`Integer.MAX_VALUE`\n     - **SynchronousQueue**: 无缓冲区的阻塞队列，`put()`要阻塞等待`take()`\n     - **PriorityBlockingQueue**: 优先级阻塞队列，队列元素必须实现`Comparator`接口，基于数组，自动扩展长度\n     - **DelayQueue**：一个使用优先级队列实现的无界阻塞队列\n     - **LinkedTransferQueue**：一个由链表结构组成的无界阻塞队列\n     - **LinkedBlockingDeque**：一个由链表结构组成的双向阻塞队列\n   \n   4. 注意  \n   如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且使用offer方法时，该方法永远返回true。\n   \n## 8. ConcurrentLinkedQueue\n   非阻塞线程安全的FIFO队列，基于单向链表实现，循环CAS操作实现，由于是根据Node.NEXT是否为NULL来判断是否为TAIL节点，因此队列的元素值不可为NULL。\n   ","source":"_posts/java-concurrent.md","raw":"---\nlayout: post\ntitle: Java Concurrent\nthumbnail: /images/material/maoxian.png\ndate: 2018-06-15 12:15:27 +0800\nauthor: Crab2Died\ncategories: Java\ntags: \n  - Java\n  - Concurrent\n---\n\n## 1. JAVA与线程\n### 1.1 线程的实现\n   1. 实现方式:使用内核线程实现、 使用用户线程实现和使用用户线程加轻量级进程混合实现.\n   2. JDK1.2之前是基于用户线程实现的，JDK1.2及以后是基于操作系统原生线程模型实现的.\n   \n### 1.2 Java线程调度\n   1. 线程调度是指系统为线程分配处理器使用权的过程,主要调度方式有两种,分别是协同式线程调度(Cooperative Threads-Scheduling)\n      和抢占式线程调度(Preemptive ThreadsScheduling)\n   2. 协同式线程调度:线程的执行时间由线程本身来控制,线程把自己的工作执行完了之后,要主动通知系统切换到另外一个线程上;\n      优点是实现简单,缺点是线程执行时间不可控制,容易线程阻塞\n   3. 每个线程将由系统来分配执行时间,线程的切换不由线程本身来决定(在Java中,Thread.yield()可以让出执行时间,但是要获取执行时\n      间的话,线程本身是没有什么办法的);优点是线程的执行时间是系统可控的,也不会有一个线程导致整个进程阻塞的问题.\n   4. JAVA线程有10个优先级(Thread.MIN_PRIORITY至Thread.MAX_PRIORITY)\n   \n### 1.3 线程转换状态\n   1. JAVA线程定义了6个状态:  \n      * 新建(New):创建后尚未启动的线程处于这种状态.\n      * 运行(Runable):Runable包括了操作系统线程状态中的Running和Ready,也就是处于此状态的线程有可能正在执行,也有可能正在等待着CPU为它分配执行时间.\n      * 无限期等待(Waiting):处于这种状态的线程不会被分配CPU执行时间,它们要等待被其他线程显式地唤醒. 以下方法会让线程陷入无限期的等待状态:  \n        ● 没有设置Timeout参数的Object.wait()方法.  \n        ● 没有设置Timeout参数的Thread.join()方法.  \n        ● LockSupport.park()方法.  \n      * 限期等待(Timed Waiting):处于这种状态的线程也不会被分配CPU执行时间,不过无须等待被其他线程显式地唤醒,在一定时间之后它们会由系统自动唤醒. 以下方法会让线程进入限期等待状态:  \n        ● Thread.sleep()方法.  \n        ● 设置了Timeout参数的Object.wait()方法.  \n        ● 设置了Timeout参数的Thread.join()方法.  \n        ● LockSupport.parkNanos()方法.  \n        ● LockSupport.parkUntil()方法 \n      * 阻塞(Blocked):该状态程序在等待获取一个排他锁，程序在同步时会在该状态 \n      * 结束(Terminated):已终止线程的线程状态,线程已经结束执行.\n   2. 线程状态转换关系图  \n      ![线程状态转换关系](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png)\n   \n## 2. 线程安全与锁优化\n### 2.1 JAVA中的线程安全\n   1. 共享数据分类\n      * 不可变(Immutable):不可变对象一定是线程安全的,典型的final\n      * 绝对线程安全:\n      * 相对线程安全: java大部分的线程安全都是相对线程安全的\n      * 线程兼容:\n      * 线程对立:\n\n### 2.2 synchronized的优化\n   1. synchronized自JDK1.6后引入偏向锁和轻量级锁后大大提升了并发的性能\n   2. synchronized锁升级`偏向锁 -> 轻量级锁 -> 重量级锁` 所以在锁高竞争下Lock性能更高\n   \n## 3. 锁介绍\n### 3.1 自旋锁\n   1. 自旋锁可以使线程在没有取得锁的时候，不被挂起，而转去执行一个空循环，（即所谓的自旋，就是自己执行空循环），若在若干个空循环后，线\n      程如果可以获得锁，则继续执行。若线程依然不能获得锁，才会被挂起。使用自旋锁后，线程被挂起的几率相对减少，线程执行的连贯性相对加\n      强。因此，对于那些锁竞争不是很激烈，锁占用时间很短的并发线程，具有一定的积极意义，但对于锁竞争激烈，单线程锁占用很长时间的并发\n      程序，自旋锁在自旋等待后，往往毅然无法获得对应的锁，不仅仅白白浪费了CPU时间，最终还是免不了被挂起的操作 ，反而浪费了系统的资源。\n      在JDK1.6中，Java虚拟机提供`-XX:+UseSpinning`参数来开启自旋锁，使用`-XX:PreBlockSpin`参数来设置自旋锁等待的次数。在JDK1.7\n      开始，自旋锁的参数被取消，虚拟机不再支持由用户配置自旋锁，自旋锁总是会执行，自旋锁次数也由虚拟机自动调整。  \n   2. 问题：  \n      - 可能白占用CPU时间\n      - 死锁问题，自己占用锁，还在等待锁释放\n      \n### 3.2 阻塞锁\n   1. 让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进\n      入运行状态。JAVA中，能够进入\\退出、阻塞状态或包含阻塞锁的方法有 ，`synchronized` 关键字（其中的重量锁），`ReentrantLock`，\n      `Object.wait()\\notify() `\n\n### 3.3 可重入锁\n   1. 可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。    \n      在JAVA环境下 `ReentrantLock` 和`synchronized` 都是 可重入锁\n\n### 3.4 乐观锁和悲观锁\n   1. 悲观锁: 每次拿数据都上锁，如行锁、表锁、读锁、写锁\n   2. 乐观锁: 每次拿数据都不上锁，只是在修改前验证下数据在此期间有无更新，如版本号控制\n\n### 3.5 轮询锁和定时锁\n   1. 由tryLock实现，与无条件获取锁模式相比，它们具有更完善的错误恢复机制。可避免死锁的发生：  \n     `boolean tryLock()`:仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回值true。如果锁不可用，则此方法将立即返回\n     值false。`boolean tryLock(long time, TimeUnit unit) throws InterruptedException`:如果锁在给定的等待时间内空闲，并且当前\n     线程未被中断，则获取锁。\n      \n### 3.6 显示锁和内置锁\n   1. 显示锁用`Lock`来定义、内置锁用`synchronized`。\n   \n### 3.7 对象锁和类锁\n   1. 对象锁是用于实例对象(可有多个实例对象)方法上的\n   2. 类锁是作用于对象的静态方法和Class(一个类只有一个Class对象)对象上的\n\n### 3.8 互斥锁\n   1. 互斥锁, 指的是一次最多只能有一个线程持有的锁。如Java的Lock\n   \n### 3.9 锁粗化\n   1. 将多个连续的锁操作合并成一个整体的锁\n\n### 3.10 锁消除\n   1. 通过逃逸分析，能证明堆上数据不会逃逸出当前线程，则认为是线程安全的，不必要加锁操作\n  \n## 4. java线程池\n### 4.1 线程池实现类\n  ```      \n   (C)ThreadPoolExecutor -->  (AC)AbstractExecutorService --> (I)ExecutorService --> (I)Executor\n  ```\n\n### 4.2 ThreadPoolExecutor构造参数说明\n  ```java\n    // corePoolSize 核心线程数，当任务多于核心线程数时会进入缓冲阻塞队列workQueue\n    // maximunPoolSize 线程池最大线程数\n    // keepAliveTime 多于核心线程数的空闲线程最长存活时间量级与unit参数配合使用\n    // unit 线程等待时间的单位级\n    // workQueue 任务缓冲队列\n    // threadFactory 线程工厂，用于创建线程\n    // handler 表示拒接处理任务的策略有一下4种：\n    //  - ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常\n    //  - ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常\n    //  - ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\n    //  - ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务\n    \n    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n            BlockingQueue<Runnable> workQueue);\n    \n    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n            BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory);\n    \n    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n            BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler);\n    \n    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n        BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);\n  ```\n\n### 4.3 实现原理\n   1. 线程池状态：  \n     - **RUNNING**: 线程池初始化时就是RUNNING状态，表示线程池能够接受任务并处理，并且线程池中线程数默认为0(可以通过调用方法\n       `prestartAllCoreThreads() #创建核心线程`或者`prestartCoreThread() #创建一个核心线程`来初始化线程数)\n     - **SHUTDOWN**: 线程处于SHUTDOWN状态时,不接收新任务,但能处理已添加的任务;状态切换调用`shutdown()`时从`RUNNING-> SHUTDOWN`\n     - **STOP**: 线程处于STOP状态时，不接收新任务，不处理已添加任务，并会终止正在执行的任务;状态切换调用`shutdownNow()`时从\n       `RUNNING or SHUTDOWN -> STOP`\n     - **TIDYING**: 当所有任务已终止，任务数量为0时，线程池会进入TIDYING状态，并且会执行钩子函数`terminated()`，用户可重载该方法\n       实现自己的业务逻辑;状态切换是所有任务终止就进入TIDYING状态\n     - **TERMINATED**: 线程池彻底终止状态;状态切换是TIDYING的钩子函数执行完毕后进入TERMINATED状态\n   \n   2. 任务执行过程\n     - 当任务提交给线程池时，线程首先判断当前池内线程数是否大于corePoolSize(核心线程数)，如果小于这值就会创建一个新的线程来执行该任务；\n     - 当线程数大于核心线程数时，则会尝试将任务放入缓冲队列(workQueue)内，若添加成功，则该任务会被等待的空闲线程取去执行，\n       若添加失败，则会尝试创建新的线程去执行该任务；\n     - 如果线程池内线程数达到了maximumPoolSize(最大线程数)时，则会采取handler(拒绝策略)处理\n     - 如果线程池内的线程数大于corePoolSize时，当线程空闲超时keepAliveTime时，线程将被终止，直到线程数等于corePoolSize；\n       如果允许核心线程数也有超时时间，则当核心线程数内的线程超时时也会被终止，直至线程数为0\n   \n   3. 线程池中的线程初始化\n     - `prestartCoreThread()`：初始化一个核心线程\n     - `prestartAllCoreThreads()`：初始化所有核心线程\n     - 初始化后线程会执行workQueue的`take()`方法，该方法是阻塞的，直到有任务提交\n   \n   4. 任务缓存队列及排队策略\n     - **ArrayBlockingQueue**：基于数组的FIFO阻塞队列,必须有最大容量的参数\n     - **LinkedBlockingQueue**: 基于链表的FIFO阻塞队列,容量动态扩展\n     - **SynchronousQueue**: 该队列不保存提交的任务，而是直接新建队列来执行任务\n   \n   5. 任务拒绝策略\n  ```\n    ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常\n    ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常\n    ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\n    ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务\n  ```\n   \n   6. 线程池的关闭\n     - `shutdown()`：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务 \n     - `shutdownNow()`: 立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务\n   \n   7. 线程池容量动态调整\n     - `setCorePoolSize()`：设置核心池大小\n     - `setMaximumPoolSize()`：设置线程池最大能创建的线程数目大小\n\n### 4.4 Executors\n   - **newFixedThreadPool**: 定容量的线程池，核心线程数与最大线程数相等\n   - **newSingleThreadExecutor**: 单线程线程池，线程池内核心线程数与最大线程数为1\n   - **newCachedThreadPool**: 无线大小线程池，核心线程数为0，最大线程数为`Integer.MAX_VALUE`, 缓冲队列为`SynchronousQueue`\n   - **newScheduledThreadPool**：创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为`Integer.MAX_VALUE`,内部是\n     一个DelayedWorkQueue实现\n   - **newSingleThreadScheduledExecutor**: 创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为`Integer.MAX_VALUE`,\n     内部是一个DelayedWorkQueue实现  \n\n## 5. AbstractQueuedSynchronizer\n   内部类：\n   - ConditionObject：\n   - Node：存放线程信息队列\n        \n### 5.1 AQS之ReentrantLock独占锁源码分析\n   - [AbstractQueuedSynchronizer独占锁](http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer)\n   - `ReentrantLock.lock()`保证在`ReentrantLock.unlock()`之间的代码只有一个线程在执行；ReentrantLock为可重入锁，它有一个与\n     锁相关的获取计数器，如果拥有锁的某个线程再次得到锁，那么获取计数器就加1，然后锁需要被释放两次才能获得真正释放。\n   - 内部类`Syn`实现了`AbstractQueuedSynchronizer`接口\n   - 构造方法有公平锁和非公平锁，公平锁与非公平锁的区别在于公平锁在尝试获取锁时会放入等待队列的后面，获取锁的顺序是按先后顺序执行的，\n     而非公平锁在尝试获取锁时首先会去尝试获取锁，若获取失败在进入等待队列按顺序执行。\n   \n### 5.2 AQS之CountDownLatch共享锁源码分析\n   - [AbstractQueuedSynchronizer共享锁](http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer)\n   - `CountDownLatch.countDown()`实现锁计数-1，直到减至0是，唤醒`CountDownLatch.await()`等待线程\n\n### 5.3 公平锁和非公平锁\n   公平锁是严格按照FIFO队列获得锁，但带来了大量的线程切换的消耗，非公平锁极大的降低了线程切换带来的消耗，虽然可能造成线程饥饿的情况，但也提高了吞吐量。\n\n## 6. synchronized与Lock比较\n   1. `synchronized`是JVM层面实现的'重量级锁'，可通过监控工具监控`synchronized`的锁定，而且代码出现异常时会自动释放锁\n   2. `Lock`是纯JAVA实现的，为多种实现留下空间，可以实现不同的调度算法、性能特性或者锁定语义，`Lock`必须自己手动的释放锁\n      形如`finally{lock.unlock();}`\n   3. 当锁竞争激烈时用`Lock`,锁竞争较弱时用`synchronized`\n\n## 7. 阻塞队列BlockingQueue\n   1. 阻塞队列是一个FIFO队列\n   2. 主要方法   \n   \n|   Ops   |    Throws Exception    |      Special Value     |           Blocks Times Out          |\n|:-------:|:----------------------:|:----------------------:|:-----------------------------------:|\n|Insert   |    add(o)              |     offer(o)           |put(o) & offer(o, timeout, timeUnit) |  \n|Remove   |   remove(o)            |     poll()             |take()\t& poll(timeout, timeUnit)     |\n|Examine  |   element()            |     peek()             |                -                    |\n\n   3. 主要实现  \n     - **ArrayBlockingQueue**：基于数组的有界阻塞队列，必须指定长度\n     - **LinkedBlockingQueue**: 基于链表的有界阻塞队列，长度可指定也可动态扩张，默认长度为`Integer.MAX_VALUE`\n     - **SynchronousQueue**: 无缓冲区的阻塞队列，`put()`要阻塞等待`take()`\n     - **PriorityBlockingQueue**: 优先级阻塞队列，队列元素必须实现`Comparator`接口，基于数组，自动扩展长度\n     - **DelayQueue**：一个使用优先级队列实现的无界阻塞队列\n     - **LinkedTransferQueue**：一个由链表结构组成的无界阻塞队列\n     - **LinkedBlockingDeque**：一个由链表结构组成的双向阻塞队列\n   \n   4. 注意  \n   如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且使用offer方法时，该方法永远返回true。\n   \n## 8. ConcurrentLinkedQueue\n   非阻塞线程安全的FIFO队列，基于单向链表实现，循环CAS操作实现，由于是根据Node.NEXT是否为NULL来判断是否为TAIL节点，因此队列的元素值不可为NULL。\n   ","slug":"java-concurrent","published":1,"updated":"2018-12-12T15:52:26.530Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vj00009uoilz5ah95ie","content":"<h2 id=\"1-JAVA与线程\"><a href=\"#1-JAVA与线程\" class=\"headerlink\" title=\"1. JAVA与线程\"></a>1. JAVA与线程</h2><h3 id=\"1-1-线程的实现\"><a href=\"#1-1-线程的实现\" class=\"headerlink\" title=\"1.1 线程的实现\"></a>1.1 线程的实现</h3><ol>\n<li>实现方式:使用内核线程实现、 使用用户线程实现和使用用户线程加轻量级进程混合实现.</li>\n<li>JDK1.2之前是基于用户线程实现的，JDK1.2及以后是基于操作系统原生线程模型实现的.</li>\n</ol>\n<h3 id=\"1-2-Java线程调度\"><a href=\"#1-2-Java线程调度\" class=\"headerlink\" title=\"1.2 Java线程调度\"></a>1.2 Java线程调度</h3><ol>\n<li>线程调度是指系统为线程分配处理器使用权的过程,主要调度方式有两种,分别是协同式线程调度(Cooperative Threads-Scheduling)<br>和抢占式线程调度(Preemptive ThreadsScheduling)</li>\n<li>协同式线程调度:线程的执行时间由线程本身来控制,线程把自己的工作执行完了之后,要主动通知系统切换到另外一个线程上;<br>优点是实现简单,缺点是线程执行时间不可控制,容易线程阻塞</li>\n<li>每个线程将由系统来分配执行时间,线程的切换不由线程本身来决定(在Java中,Thread.yield()可以让出执行时间,但是要获取执行时<br>间的话,线程本身是没有什么办法的);优点是线程的执行时间是系统可控的,也不会有一个线程导致整个进程阻塞的问题.</li>\n<li>JAVA线程有10个优先级(Thread.MIN_PRIORITY至Thread.MAX_PRIORITY)</li>\n</ol>\n<h3 id=\"1-3-线程转换状态\"><a href=\"#1-3-线程转换状态\" class=\"headerlink\" title=\"1.3 线程转换状态\"></a>1.3 线程转换状态</h3><ol>\n<li>JAVA线程定义了6个状态:  <ul>\n<li>新建(New):创建后尚未启动的线程处于这种状态.</li>\n<li>运行(Runable):Runable包括了操作系统线程状态中的Running和Ready,也就是处于此状态的线程有可能正在执行,也有可能正在等待着CPU为它分配执行时间.</li>\n<li>无限期等待(Waiting):处于这种状态的线程不会被分配CPU执行时间,它们要等待被其他线程显式地唤醒. 以下方法会让线程陷入无限期的等待状态:<br>● 没有设置Timeout参数的Object.wait()方法.<br>● 没有设置Timeout参数的Thread.join()方法.<br>● LockSupport.park()方法.  </li>\n<li>限期等待(Timed Waiting):处于这种状态的线程也不会被分配CPU执行时间,不过无须等待被其他线程显式地唤醒,在一定时间之后它们会由系统自动唤醒. 以下方法会让线程进入限期等待状态:<br>● Thread.sleep()方法.<br>● 设置了Timeout参数的Object.wait()方法.<br>● 设置了Timeout参数的Thread.join()方法.<br>● LockSupport.parkNanos()方法.<br>● LockSupport.parkUntil()方法 </li>\n<li>阻塞(Blocked):该状态程序在等待获取一个排他锁，程序在同步时会在该状态 </li>\n<li>结束(Terminated):已终止线程的线程状态,线程已经结束执行.</li>\n</ul>\n</li>\n<li>线程状态转换关系图<br><img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png\" alt=\"线程状态转换关系\"></li>\n</ol>\n<h2 id=\"2-线程安全与锁优化\"><a href=\"#2-线程安全与锁优化\" class=\"headerlink\" title=\"2. 线程安全与锁优化\"></a>2. 线程安全与锁优化</h2><h3 id=\"2-1-JAVA中的线程安全\"><a href=\"#2-1-JAVA中的线程安全\" class=\"headerlink\" title=\"2.1 JAVA中的线程安全\"></a>2.1 JAVA中的线程安全</h3><ol>\n<li>共享数据分类<ul>\n<li>不可变(Immutable):不可变对象一定是线程安全的,典型的final</li>\n<li>绝对线程安全:</li>\n<li>相对线程安全: java大部分的线程安全都是相对线程安全的</li>\n<li>线程兼容:</li>\n<li>线程对立:</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-2-synchronized的优化\"><a href=\"#2-2-synchronized的优化\" class=\"headerlink\" title=\"2.2 synchronized的优化\"></a>2.2 synchronized的优化</h3><ol>\n<li>synchronized自JDK1.6后引入偏向锁和轻量级锁后大大提升了并发的性能</li>\n<li>synchronized锁升级<code>偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</code> 所以在锁高竞争下Lock性能更高</li>\n</ol>\n<h2 id=\"3-锁介绍\"><a href=\"#3-锁介绍\" class=\"headerlink\" title=\"3. 锁介绍\"></a>3. 锁介绍</h2><h3 id=\"3-1-自旋锁\"><a href=\"#3-1-自旋锁\" class=\"headerlink\" title=\"3.1 自旋锁\"></a>3.1 自旋锁</h3><ol>\n<li>自旋锁可以使线程在没有取得锁的时候，不被挂起，而转去执行一个空循环，（即所谓的自旋，就是自己执行空循环），若在若干个空循环后，线<br>程如果可以获得锁，则继续执行。若线程依然不能获得锁，才会被挂起。使用自旋锁后，线程被挂起的几率相对减少，线程执行的连贯性相对加<br>强。因此，对于那些锁竞争不是很激烈，锁占用时间很短的并发线程，具有一定的积极意义，但对于锁竞争激烈，单线程锁占用很长时间的并发<br>程序，自旋锁在自旋等待后，往往毅然无法获得对应的锁，不仅仅白白浪费了CPU时间，最终还是免不了被挂起的操作 ，反而浪费了系统的资源。<br>在JDK1.6中，Java虚拟机提供<code>-XX:+UseSpinning</code>参数来开启自旋锁，使用<code>-XX:PreBlockSpin</code>参数来设置自旋锁等待的次数。在JDK1.7<br>开始，自旋锁的参数被取消，虚拟机不再支持由用户配置自旋锁，自旋锁总是会执行，自旋锁次数也由虚拟机自动调整。  </li>\n<li>问题：  <ul>\n<li>可能白占用CPU时间</li>\n<li>死锁问题，自己占用锁，还在等待锁释放</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-阻塞锁\"><a href=\"#3-2-阻塞锁\" class=\"headerlink\" title=\"3.2 阻塞锁\"></a>3.2 阻塞锁</h3><ol>\n<li>让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进<br>入运行状态。JAVA中，能够进入\\退出、阻塞状态或包含阻塞锁的方法有 ，<code>synchronized</code> 关键字（其中的重量锁），<code>ReentrantLock</code>，<br><code>Object.wait()\\notify()</code></li>\n</ol>\n<h3 id=\"3-3-可重入锁\"><a href=\"#3-3-可重入锁\" class=\"headerlink\" title=\"3.3 可重入锁\"></a>3.3 可重入锁</h3><ol>\n<li>可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。<br>在JAVA环境下 <code>ReentrantLock</code> 和<code>synchronized</code> 都是 可重入锁</li>\n</ol>\n<h3 id=\"3-4-乐观锁和悲观锁\"><a href=\"#3-4-乐观锁和悲观锁\" class=\"headerlink\" title=\"3.4 乐观锁和悲观锁\"></a>3.4 乐观锁和悲观锁</h3><ol>\n<li>悲观锁: 每次拿数据都上锁，如行锁、表锁、读锁、写锁</li>\n<li>乐观锁: 每次拿数据都不上锁，只是在修改前验证下数据在此期间有无更新，如版本号控制</li>\n</ol>\n<h3 id=\"3-5-轮询锁和定时锁\"><a href=\"#3-5-轮询锁和定时锁\" class=\"headerlink\" title=\"3.5 轮询锁和定时锁\"></a>3.5 轮询锁和定时锁</h3><ol>\n<li>由tryLock实现，与无条件获取锁模式相比，它们具有更完善的错误恢复机制。可避免死锁的发生：<br><code>boolean tryLock()</code>:仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回值true。如果锁不可用，则此方法将立即返回<br>值false。<code>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</code>:如果锁在给定的等待时间内空闲，并且当前<br>线程未被中断，则获取锁。</li>\n</ol>\n<h3 id=\"3-6-显示锁和内置锁\"><a href=\"#3-6-显示锁和内置锁\" class=\"headerlink\" title=\"3.6 显示锁和内置锁\"></a>3.6 显示锁和内置锁</h3><ol>\n<li>显示锁用<code>Lock</code>来定义、内置锁用<code>synchronized</code>。</li>\n</ol>\n<h3 id=\"3-7-对象锁和类锁\"><a href=\"#3-7-对象锁和类锁\" class=\"headerlink\" title=\"3.7 对象锁和类锁\"></a>3.7 对象锁和类锁</h3><ol>\n<li>对象锁是用于实例对象(可有多个实例对象)方法上的</li>\n<li>类锁是作用于对象的静态方法和Class(一个类只有一个Class对象)对象上的</li>\n</ol>\n<h3 id=\"3-8-互斥锁\"><a href=\"#3-8-互斥锁\" class=\"headerlink\" title=\"3.8 互斥锁\"></a>3.8 互斥锁</h3><ol>\n<li>互斥锁, 指的是一次最多只能有一个线程持有的锁。如Java的Lock</li>\n</ol>\n<h3 id=\"3-9-锁粗化\"><a href=\"#3-9-锁粗化\" class=\"headerlink\" title=\"3.9 锁粗化\"></a>3.9 锁粗化</h3><ol>\n<li>将多个连续的锁操作合并成一个整体的锁</li>\n</ol>\n<h3 id=\"3-10-锁消除\"><a href=\"#3-10-锁消除\" class=\"headerlink\" title=\"3.10 锁消除\"></a>3.10 锁消除</h3><ol>\n<li>通过逃逸分析，能证明堆上数据不会逃逸出当前线程，则认为是线程安全的，不必要加锁操作</li>\n</ol>\n<h2 id=\"4-java线程池\"><a href=\"#4-java线程池\" class=\"headerlink\" title=\"4. java线程池\"></a>4. java线程池</h2><h3 id=\"4-1-线程池实现类\"><a href=\"#4-1-线程池实现类\" class=\"headerlink\" title=\"4.1 线程池实现类\"></a>4.1 线程池实现类</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(C)ThreadPoolExecutor --&gt;  (AC)AbstractExecutorService --&gt; (I)ExecutorService --&gt; (I)Executor</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-ThreadPoolExecutor构造参数说明\"><a href=\"#4-2-ThreadPoolExecutor构造参数说明\" class=\"headerlink\" title=\"4.2 ThreadPoolExecutor构造参数说明\"></a>4.2 ThreadPoolExecutor构造参数说明</h3>  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// corePoolSize 核心线程数，当任务多于核心线程数时会进入缓冲阻塞队列workQueue</span></span><br><span class=\"line\"><span class=\"comment\">// maximunPoolSize 线程池最大线程数</span></span><br><span class=\"line\"><span class=\"comment\">// keepAliveTime 多于核心线程数的空闲线程最长存活时间量级与unit参数配合使用</span></span><br><span class=\"line\"><span class=\"comment\">// unit 线程等待时间的单位级</span></span><br><span class=\"line\"><span class=\"comment\">// workQueue 任务缓冲队列</span></span><br><span class=\"line\"><span class=\"comment\">// threadFactory 线程工厂，用于创建线程</span></span><br><span class=\"line\"><span class=\"comment\">// handler 表示拒接处理任务的策略有一下4种：</span></span><br><span class=\"line\"><span class=\"comment\">//  - ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常</span></span><br><span class=\"line\"><span class=\"comment\">//  - ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">//  - ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class=\"line\"><span class=\"comment\">//  - ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-实现原理\"><a href=\"#4-3-实现原理\" class=\"headerlink\" title=\"4.3 实现原理\"></a>4.3 实现原理</h3><ol>\n<li><p>线程池状态：  </p>\n<ul>\n<li><strong>RUNNING</strong>: 线程池初始化时就是RUNNING状态，表示线程池能够接受任务并处理，并且线程池中线程数默认为0(可以通过调用方法<br><code>prestartAllCoreThreads() #创建核心线程</code>或者<code>prestartCoreThread() #创建一个核心线程</code>来初始化线程数)</li>\n<li><strong>SHUTDOWN</strong>: 线程处于SHUTDOWN状态时,不接收新任务,但能处理已添加的任务;状态切换调用<code>shutdown()</code>时从<code>RUNNING-&gt; SHUTDOWN</code></li>\n<li><strong>STOP</strong>: 线程处于STOP状态时，不接收新任务，不处理已添加任务，并会终止正在执行的任务;状态切换调用<code>shutdownNow()</code>时从<br><code>RUNNING or SHUTDOWN -&gt; STOP</code></li>\n<li><strong>TIDYING</strong>: 当所有任务已终止，任务数量为0时，线程池会进入TIDYING状态，并且会执行钩子函数<code>terminated()</code>，用户可重载该方法<br>实现自己的业务逻辑;状态切换是所有任务终止就进入TIDYING状态</li>\n<li><strong>TERMINATED</strong>: 线程池彻底终止状态;状态切换是TIDYING的钩子函数执行完毕后进入TERMINATED状态</li>\n</ul>\n</li>\n<li><p>任务执行过程</p>\n<ul>\n<li>当任务提交给线程池时，线程首先判断当前池内线程数是否大于corePoolSize(核心线程数)，如果小于这值就会创建一个新的线程来执行该任务；</li>\n<li>当线程数大于核心线程数时，则会尝试将任务放入缓冲队列(workQueue)内，若添加成功，则该任务会被等待的空闲线程取去执行，<br>若添加失败，则会尝试创建新的线程去执行该任务；</li>\n<li>如果线程池内线程数达到了maximumPoolSize(最大线程数)时，则会采取handler(拒绝策略)处理</li>\n<li>如果线程池内的线程数大于corePoolSize时，当线程空闲超时keepAliveTime时，线程将被终止，直到线程数等于corePoolSize；<br>如果允许核心线程数也有超时时间，则当核心线程数内的线程超时时也会被终止，直至线程数为0</li>\n</ul>\n</li>\n<li><p>线程池中的线程初始化</p>\n<ul>\n<li><code>prestartCoreThread()</code>：初始化一个核心线程</li>\n<li><code>prestartAllCoreThreads()</code>：初始化所有核心线程</li>\n<li>初始化后线程会执行workQueue的<code>take()</code>方法，该方法是阻塞的，直到有任务提交</li>\n</ul>\n</li>\n<li><p>任务缓存队列及排队策略</p>\n<ul>\n<li><strong>ArrayBlockingQueue</strong>：基于数组的FIFO阻塞队列,必须有最大容量的参数</li>\n<li><strong>LinkedBlockingQueue</strong>: 基于链表的FIFO阻塞队列,容量动态扩展</li>\n<li><strong>SynchronousQueue</strong>: 该队列不保存提交的任务，而是直接新建队列来执行任务</li>\n</ul>\n</li>\n<li><p>任务拒绝策略</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常</span><br><span class=\"line\">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常</span><br><span class=\"line\">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span><br><span class=\"line\">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>线程池的关闭</p>\n<ul>\n<li><code>shutdown()</code>：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务 </li>\n<li><code>shutdownNow()</code>: 立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务</li>\n</ul>\n</li>\n<li><p>线程池容量动态调整</p>\n<ul>\n<li><code>setCorePoolSize()</code>：设置核心池大小</li>\n<li><code>setMaximumPoolSize()</code>：设置线程池最大能创建的线程数目大小</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-4-Executors\"><a href=\"#4-4-Executors\" class=\"headerlink\" title=\"4.4 Executors\"></a>4.4 Executors</h3><ul>\n<li><strong>newFixedThreadPool</strong>: 定容量的线程池，核心线程数与最大线程数相等</li>\n<li><strong>newSingleThreadExecutor</strong>: 单线程线程池，线程池内核心线程数与最大线程数为1</li>\n<li><strong>newCachedThreadPool</strong>: 无线大小线程池，核心线程数为0，最大线程数为<code>Integer.MAX_VALUE</code>, 缓冲队列为<code>SynchronousQueue</code></li>\n<li><strong>newScheduledThreadPool</strong>：创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为<code>Integer.MAX_VALUE</code>,内部是<br>一个DelayedWorkQueue实现</li>\n<li><strong>newSingleThreadScheduledExecutor</strong>: 创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为<code>Integer.MAX_VALUE</code>,<br>内部是一个DelayedWorkQueue实现  </li>\n</ul>\n<h2 id=\"5-AbstractQueuedSynchronizer\"><a href=\"#5-AbstractQueuedSynchronizer\" class=\"headerlink\" title=\"5. AbstractQueuedSynchronizer\"></a>5. AbstractQueuedSynchronizer</h2><p>   内部类：</p>\n<ul>\n<li>ConditionObject：</li>\n<li>Node：存放线程信息队列</li>\n</ul>\n<h3 id=\"5-1-AQS之ReentrantLock独占锁源码分析\"><a href=\"#5-1-AQS之ReentrantLock独占锁源码分析\" class=\"headerlink\" title=\"5.1 AQS之ReentrantLock独占锁源码分析\"></a>5.1 AQS之ReentrantLock独占锁源码分析</h3><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer\" target=\"_blank\" rel=\"noopener\">AbstractQueuedSynchronizer独占锁</a></li>\n<li><code>ReentrantLock.lock()</code>保证在<code>ReentrantLock.unlock()</code>之间的代码只有一个线程在执行；ReentrantLock为可重入锁，它有一个与<br>锁相关的获取计数器，如果拥有锁的某个线程再次得到锁，那么获取计数器就加1，然后锁需要被释放两次才能获得真正释放。</li>\n<li>内部类<code>Syn</code>实现了<code>AbstractQueuedSynchronizer</code>接口</li>\n<li>构造方法有公平锁和非公平锁，公平锁与非公平锁的区别在于公平锁在尝试获取锁时会放入等待队列的后面，获取锁的顺序是按先后顺序执行的，<br>而非公平锁在尝试获取锁时首先会去尝试获取锁，若获取失败在进入等待队列按顺序执行。</li>\n</ul>\n<h3 id=\"5-2-AQS之CountDownLatch共享锁源码分析\"><a href=\"#5-2-AQS之CountDownLatch共享锁源码分析\" class=\"headerlink\" title=\"5.2 AQS之CountDownLatch共享锁源码分析\"></a>5.2 AQS之CountDownLatch共享锁源码分析</h3><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer\" target=\"_blank\" rel=\"noopener\">AbstractQueuedSynchronizer共享锁</a></li>\n<li><code>CountDownLatch.countDown()</code>实现锁计数-1，直到减至0是，唤醒<code>CountDownLatch.await()</code>等待线程</li>\n</ul>\n<h3 id=\"5-3-公平锁和非公平锁\"><a href=\"#5-3-公平锁和非公平锁\" class=\"headerlink\" title=\"5.3 公平锁和非公平锁\"></a>5.3 公平锁和非公平锁</h3><p>   公平锁是严格按照FIFO队列获得锁，但带来了大量的线程切换的消耗，非公平锁极大的降低了线程切换带来的消耗，虽然可能造成线程饥饿的情况，但也提高了吞吐量。</p>\n<h2 id=\"6-synchronized与Lock比较\"><a href=\"#6-synchronized与Lock比较\" class=\"headerlink\" title=\"6. synchronized与Lock比较\"></a>6. synchronized与Lock比较</h2><ol>\n<li><code>synchronized</code>是JVM层面实现的’重量级锁’，可通过监控工具监控<code>synchronized</code>的锁定，而且代码出现异常时会自动释放锁</li>\n<li><code>Lock</code>是纯JAVA实现的，为多种实现留下空间，可以实现不同的调度算法、性能特性或者锁定语义，<code>Lock</code>必须自己手动的释放锁<br>形如<code>finally{lock.unlock();}</code></li>\n<li>当锁竞争激烈时用<code>Lock</code>,锁竞争较弱时用<code>synchronized</code></li>\n</ol>\n<h2 id=\"7-阻塞队列BlockingQueue\"><a href=\"#7-阻塞队列BlockingQueue\" class=\"headerlink\" title=\"7. 阻塞队列BlockingQueue\"></a>7. 阻塞队列BlockingQueue</h2><ol>\n<li>阻塞队列是一个FIFO队列</li>\n<li>主要方法   </li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Ops</th>\n<th style=\"text-align:center\">Throws Exception</th>\n<th style=\"text-align:center\">Special Value</th>\n<th style=\"text-align:center\">Blocks Times Out</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Insert</td>\n<td style=\"text-align:center\">add(o)</td>\n<td style=\"text-align:center\">offer(o)</td>\n<td style=\"text-align:center\">put(o) &amp; offer(o, timeout, timeUnit)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Remove</td>\n<td style=\"text-align:center\">remove(o)</td>\n<td style=\"text-align:center\">poll()</td>\n<td style=\"text-align:center\">take()    &amp; poll(timeout, timeUnit)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Examine</td>\n<td style=\"text-align:center\">element()</td>\n<td style=\"text-align:center\">peek()</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li><p>主要实现  </p>\n<ul>\n<li><strong>ArrayBlockingQueue</strong>：基于数组的有界阻塞队列，必须指定长度</li>\n<li><strong>LinkedBlockingQueue</strong>: 基于链表的有界阻塞队列，长度可指定也可动态扩张，默认长度为<code>Integer.MAX_VALUE</code></li>\n<li><strong>SynchronousQueue</strong>: 无缓冲区的阻塞队列，<code>put()</code>要阻塞等待<code>take()</code></li>\n<li><strong>PriorityBlockingQueue</strong>: 优先级阻塞队列，队列元素必须实现<code>Comparator</code>接口，基于数组，自动扩展长度</li>\n<li><strong>DelayQueue</strong>：一个使用优先级队列实现的无界阻塞队列</li>\n<li><strong>LinkedTransferQueue</strong>：一个由链表结构组成的无界阻塞队列</li>\n<li><strong>LinkedBlockingDeque</strong>：一个由链表结构组成的双向阻塞队列</li>\n</ul>\n</li>\n<li><p>注意<br>如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且使用offer方法时，该方法永远返回true。</p>\n</li>\n</ol>\n<h2 id=\"8-ConcurrentLinkedQueue\"><a href=\"#8-ConcurrentLinkedQueue\" class=\"headerlink\" title=\"8. ConcurrentLinkedQueue\"></a>8. ConcurrentLinkedQueue</h2><p>   非阻塞线程安全的FIFO队列，基于单向链表实现，循环CAS操作实现，由于是根据Node.NEXT是否为NULL来判断是否为TAIL节点，因此队列的元素值不可为NULL。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-JAVA与线程\"><a href=\"#1-JAVA与线程\" class=\"headerlink\" title=\"1. JAVA与线程\"></a>1. JAVA与线程</h2><h3 id=\"1-1-线程的实现\"><a href=\"#1-1-线程的实现\" class=\"headerlink\" title=\"1.1 线程的实现\"></a>1.1 线程的实现</h3><ol>\n<li>实现方式:使用内核线程实现、 使用用户线程实现和使用用户线程加轻量级进程混合实现.</li>\n<li>JDK1.2之前是基于用户线程实现的，JDK1.2及以后是基于操作系统原生线程模型实现的.</li>\n</ol>\n<h3 id=\"1-2-Java线程调度\"><a href=\"#1-2-Java线程调度\" class=\"headerlink\" title=\"1.2 Java线程调度\"></a>1.2 Java线程调度</h3><ol>\n<li>线程调度是指系统为线程分配处理器使用权的过程,主要调度方式有两种,分别是协同式线程调度(Cooperative Threads-Scheduling)<br>和抢占式线程调度(Preemptive ThreadsScheduling)</li>\n<li>协同式线程调度:线程的执行时间由线程本身来控制,线程把自己的工作执行完了之后,要主动通知系统切换到另外一个线程上;<br>优点是实现简单,缺点是线程执行时间不可控制,容易线程阻塞</li>\n<li>每个线程将由系统来分配执行时间,线程的切换不由线程本身来决定(在Java中,Thread.yield()可以让出执行时间,但是要获取执行时<br>间的话,线程本身是没有什么办法的);优点是线程的执行时间是系统可控的,也不会有一个线程导致整个进程阻塞的问题.</li>\n<li>JAVA线程有10个优先级(Thread.MIN_PRIORITY至Thread.MAX_PRIORITY)</li>\n</ol>\n<h3 id=\"1-3-线程转换状态\"><a href=\"#1-3-线程转换状态\" class=\"headerlink\" title=\"1.3 线程转换状态\"></a>1.3 线程转换状态</h3><ol>\n<li>JAVA线程定义了6个状态:  <ul>\n<li>新建(New):创建后尚未启动的线程处于这种状态.</li>\n<li>运行(Runable):Runable包括了操作系统线程状态中的Running和Ready,也就是处于此状态的线程有可能正在执行,也有可能正在等待着CPU为它分配执行时间.</li>\n<li>无限期等待(Waiting):处于这种状态的线程不会被分配CPU执行时间,它们要等待被其他线程显式地唤醒. 以下方法会让线程陷入无限期的等待状态:<br>● 没有设置Timeout参数的Object.wait()方法.<br>● 没有设置Timeout参数的Thread.join()方法.<br>● LockSupport.park()方法.  </li>\n<li>限期等待(Timed Waiting):处于这种状态的线程也不会被分配CPU执行时间,不过无须等待被其他线程显式地唤醒,在一定时间之后它们会由系统自动唤醒. 以下方法会让线程进入限期等待状态:<br>● Thread.sleep()方法.<br>● 设置了Timeout参数的Object.wait()方法.<br>● 设置了Timeout参数的Thread.join()方法.<br>● LockSupport.parkNanos()方法.<br>● LockSupport.parkUntil()方法 </li>\n<li>阻塞(Blocked):该状态程序在等待获取一个排他锁，程序在同步时会在该状态 </li>\n<li>结束(Terminated):已终止线程的线程状态,线程已经结束执行.</li>\n</ul>\n</li>\n<li>线程状态转换关系图<br><img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png\" alt=\"线程状态转换关系\"></li>\n</ol>\n<h2 id=\"2-线程安全与锁优化\"><a href=\"#2-线程安全与锁优化\" class=\"headerlink\" title=\"2. 线程安全与锁优化\"></a>2. 线程安全与锁优化</h2><h3 id=\"2-1-JAVA中的线程安全\"><a href=\"#2-1-JAVA中的线程安全\" class=\"headerlink\" title=\"2.1 JAVA中的线程安全\"></a>2.1 JAVA中的线程安全</h3><ol>\n<li>共享数据分类<ul>\n<li>不可变(Immutable):不可变对象一定是线程安全的,典型的final</li>\n<li>绝对线程安全:</li>\n<li>相对线程安全: java大部分的线程安全都是相对线程安全的</li>\n<li>线程兼容:</li>\n<li>线程对立:</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-2-synchronized的优化\"><a href=\"#2-2-synchronized的优化\" class=\"headerlink\" title=\"2.2 synchronized的优化\"></a>2.2 synchronized的优化</h3><ol>\n<li>synchronized自JDK1.6后引入偏向锁和轻量级锁后大大提升了并发的性能</li>\n<li>synchronized锁升级<code>偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</code> 所以在锁高竞争下Lock性能更高</li>\n</ol>\n<h2 id=\"3-锁介绍\"><a href=\"#3-锁介绍\" class=\"headerlink\" title=\"3. 锁介绍\"></a>3. 锁介绍</h2><h3 id=\"3-1-自旋锁\"><a href=\"#3-1-自旋锁\" class=\"headerlink\" title=\"3.1 自旋锁\"></a>3.1 自旋锁</h3><ol>\n<li>自旋锁可以使线程在没有取得锁的时候，不被挂起，而转去执行一个空循环，（即所谓的自旋，就是自己执行空循环），若在若干个空循环后，线<br>程如果可以获得锁，则继续执行。若线程依然不能获得锁，才会被挂起。使用自旋锁后，线程被挂起的几率相对减少，线程执行的连贯性相对加<br>强。因此，对于那些锁竞争不是很激烈，锁占用时间很短的并发线程，具有一定的积极意义，但对于锁竞争激烈，单线程锁占用很长时间的并发<br>程序，自旋锁在自旋等待后，往往毅然无法获得对应的锁，不仅仅白白浪费了CPU时间，最终还是免不了被挂起的操作 ，反而浪费了系统的资源。<br>在JDK1.6中，Java虚拟机提供<code>-XX:+UseSpinning</code>参数来开启自旋锁，使用<code>-XX:PreBlockSpin</code>参数来设置自旋锁等待的次数。在JDK1.7<br>开始，自旋锁的参数被取消，虚拟机不再支持由用户配置自旋锁，自旋锁总是会执行，自旋锁次数也由虚拟机自动调整。  </li>\n<li>问题：  <ul>\n<li>可能白占用CPU时间</li>\n<li>死锁问题，自己占用锁，还在等待锁释放</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-2-阻塞锁\"><a href=\"#3-2-阻塞锁\" class=\"headerlink\" title=\"3.2 阻塞锁\"></a>3.2 阻塞锁</h3><ol>\n<li>让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进<br>入运行状态。JAVA中，能够进入\\退出、阻塞状态或包含阻塞锁的方法有 ，<code>synchronized</code> 关键字（其中的重量锁），<code>ReentrantLock</code>，<br><code>Object.wait()\\notify()</code></li>\n</ol>\n<h3 id=\"3-3-可重入锁\"><a href=\"#3-3-可重入锁\" class=\"headerlink\" title=\"3.3 可重入锁\"></a>3.3 可重入锁</h3><ol>\n<li>可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。<br>在JAVA环境下 <code>ReentrantLock</code> 和<code>synchronized</code> 都是 可重入锁</li>\n</ol>\n<h3 id=\"3-4-乐观锁和悲观锁\"><a href=\"#3-4-乐观锁和悲观锁\" class=\"headerlink\" title=\"3.4 乐观锁和悲观锁\"></a>3.4 乐观锁和悲观锁</h3><ol>\n<li>悲观锁: 每次拿数据都上锁，如行锁、表锁、读锁、写锁</li>\n<li>乐观锁: 每次拿数据都不上锁，只是在修改前验证下数据在此期间有无更新，如版本号控制</li>\n</ol>\n<h3 id=\"3-5-轮询锁和定时锁\"><a href=\"#3-5-轮询锁和定时锁\" class=\"headerlink\" title=\"3.5 轮询锁和定时锁\"></a>3.5 轮询锁和定时锁</h3><ol>\n<li>由tryLock实现，与无条件获取锁模式相比，它们具有更完善的错误恢复机制。可避免死锁的发生：<br><code>boolean tryLock()</code>:仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回值true。如果锁不可用，则此方法将立即返回<br>值false。<code>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</code>:如果锁在给定的等待时间内空闲，并且当前<br>线程未被中断，则获取锁。</li>\n</ol>\n<h3 id=\"3-6-显示锁和内置锁\"><a href=\"#3-6-显示锁和内置锁\" class=\"headerlink\" title=\"3.6 显示锁和内置锁\"></a>3.6 显示锁和内置锁</h3><ol>\n<li>显示锁用<code>Lock</code>来定义、内置锁用<code>synchronized</code>。</li>\n</ol>\n<h3 id=\"3-7-对象锁和类锁\"><a href=\"#3-7-对象锁和类锁\" class=\"headerlink\" title=\"3.7 对象锁和类锁\"></a>3.7 对象锁和类锁</h3><ol>\n<li>对象锁是用于实例对象(可有多个实例对象)方法上的</li>\n<li>类锁是作用于对象的静态方法和Class(一个类只有一个Class对象)对象上的</li>\n</ol>\n<h3 id=\"3-8-互斥锁\"><a href=\"#3-8-互斥锁\" class=\"headerlink\" title=\"3.8 互斥锁\"></a>3.8 互斥锁</h3><ol>\n<li>互斥锁, 指的是一次最多只能有一个线程持有的锁。如Java的Lock</li>\n</ol>\n<h3 id=\"3-9-锁粗化\"><a href=\"#3-9-锁粗化\" class=\"headerlink\" title=\"3.9 锁粗化\"></a>3.9 锁粗化</h3><ol>\n<li>将多个连续的锁操作合并成一个整体的锁</li>\n</ol>\n<h3 id=\"3-10-锁消除\"><a href=\"#3-10-锁消除\" class=\"headerlink\" title=\"3.10 锁消除\"></a>3.10 锁消除</h3><ol>\n<li>通过逃逸分析，能证明堆上数据不会逃逸出当前线程，则认为是线程安全的，不必要加锁操作</li>\n</ol>\n<h2 id=\"4-java线程池\"><a href=\"#4-java线程池\" class=\"headerlink\" title=\"4. java线程池\"></a>4. java线程池</h2><h3 id=\"4-1-线程池实现类\"><a href=\"#4-1-线程池实现类\" class=\"headerlink\" title=\"4.1 线程池实现类\"></a>4.1 线程池实现类</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(C)ThreadPoolExecutor --&gt;  (AC)AbstractExecutorService --&gt; (I)ExecutorService --&gt; (I)Executor</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-ThreadPoolExecutor构造参数说明\"><a href=\"#4-2-ThreadPoolExecutor构造参数说明\" class=\"headerlink\" title=\"4.2 ThreadPoolExecutor构造参数说明\"></a>4.2 ThreadPoolExecutor构造参数说明</h3>  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// corePoolSize 核心线程数，当任务多于核心线程数时会进入缓冲阻塞队列workQueue</span></span><br><span class=\"line\"><span class=\"comment\">// maximunPoolSize 线程池最大线程数</span></span><br><span class=\"line\"><span class=\"comment\">// keepAliveTime 多于核心线程数的空闲线程最长存活时间量级与unit参数配合使用</span></span><br><span class=\"line\"><span class=\"comment\">// unit 线程等待时间的单位级</span></span><br><span class=\"line\"><span class=\"comment\">// workQueue 任务缓冲队列</span></span><br><span class=\"line\"><span class=\"comment\">// threadFactory 线程工厂，用于创建线程</span></span><br><span class=\"line\"><span class=\"comment\">// handler 表示拒接处理任务的策略有一下4种：</span></span><br><span class=\"line\"><span class=\"comment\">//  - ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常</span></span><br><span class=\"line\"><span class=\"comment\">//  - ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">//  - ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class=\"line\"><span class=\"comment\">//  - ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-实现原理\"><a href=\"#4-3-实现原理\" class=\"headerlink\" title=\"4.3 实现原理\"></a>4.3 实现原理</h3><ol>\n<li><p>线程池状态：  </p>\n<ul>\n<li><strong>RUNNING</strong>: 线程池初始化时就是RUNNING状态，表示线程池能够接受任务并处理，并且线程池中线程数默认为0(可以通过调用方法<br><code>prestartAllCoreThreads() #创建核心线程</code>或者<code>prestartCoreThread() #创建一个核心线程</code>来初始化线程数)</li>\n<li><strong>SHUTDOWN</strong>: 线程处于SHUTDOWN状态时,不接收新任务,但能处理已添加的任务;状态切换调用<code>shutdown()</code>时从<code>RUNNING-&gt; SHUTDOWN</code></li>\n<li><strong>STOP</strong>: 线程处于STOP状态时，不接收新任务，不处理已添加任务，并会终止正在执行的任务;状态切换调用<code>shutdownNow()</code>时从<br><code>RUNNING or SHUTDOWN -&gt; STOP</code></li>\n<li><strong>TIDYING</strong>: 当所有任务已终止，任务数量为0时，线程池会进入TIDYING状态，并且会执行钩子函数<code>terminated()</code>，用户可重载该方法<br>实现自己的业务逻辑;状态切换是所有任务终止就进入TIDYING状态</li>\n<li><strong>TERMINATED</strong>: 线程池彻底终止状态;状态切换是TIDYING的钩子函数执行完毕后进入TERMINATED状态</li>\n</ul>\n</li>\n<li><p>任务执行过程</p>\n<ul>\n<li>当任务提交给线程池时，线程首先判断当前池内线程数是否大于corePoolSize(核心线程数)，如果小于这值就会创建一个新的线程来执行该任务；</li>\n<li>当线程数大于核心线程数时，则会尝试将任务放入缓冲队列(workQueue)内，若添加成功，则该任务会被等待的空闲线程取去执行，<br>若添加失败，则会尝试创建新的线程去执行该任务；</li>\n<li>如果线程池内线程数达到了maximumPoolSize(最大线程数)时，则会采取handler(拒绝策略)处理</li>\n<li>如果线程池内的线程数大于corePoolSize时，当线程空闲超时keepAliveTime时，线程将被终止，直到线程数等于corePoolSize；<br>如果允许核心线程数也有超时时间，则当核心线程数内的线程超时时也会被终止，直至线程数为0</li>\n</ul>\n</li>\n<li><p>线程池中的线程初始化</p>\n<ul>\n<li><code>prestartCoreThread()</code>：初始化一个核心线程</li>\n<li><code>prestartAllCoreThreads()</code>：初始化所有核心线程</li>\n<li>初始化后线程会执行workQueue的<code>take()</code>方法，该方法是阻塞的，直到有任务提交</li>\n</ul>\n</li>\n<li><p>任务缓存队列及排队策略</p>\n<ul>\n<li><strong>ArrayBlockingQueue</strong>：基于数组的FIFO阻塞队列,必须有最大容量的参数</li>\n<li><strong>LinkedBlockingQueue</strong>: 基于链表的FIFO阻塞队列,容量动态扩展</li>\n<li><strong>SynchronousQueue</strong>: 该队列不保存提交的任务，而是直接新建队列来执行任务</li>\n</ul>\n</li>\n<li><p>任务拒绝策略</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常</span><br><span class=\"line\">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常</span><br><span class=\"line\">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span><br><span class=\"line\">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>线程池的关闭</p>\n<ul>\n<li><code>shutdown()</code>：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务 </li>\n<li><code>shutdownNow()</code>: 立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务</li>\n</ul>\n</li>\n<li><p>线程池容量动态调整</p>\n<ul>\n<li><code>setCorePoolSize()</code>：设置核心池大小</li>\n<li><code>setMaximumPoolSize()</code>：设置线程池最大能创建的线程数目大小</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-4-Executors\"><a href=\"#4-4-Executors\" class=\"headerlink\" title=\"4.4 Executors\"></a>4.4 Executors</h3><ul>\n<li><strong>newFixedThreadPool</strong>: 定容量的线程池，核心线程数与最大线程数相等</li>\n<li><strong>newSingleThreadExecutor</strong>: 单线程线程池，线程池内核心线程数与最大线程数为1</li>\n<li><strong>newCachedThreadPool</strong>: 无线大小线程池，核心线程数为0，最大线程数为<code>Integer.MAX_VALUE</code>, 缓冲队列为<code>SynchronousQueue</code></li>\n<li><strong>newScheduledThreadPool</strong>：创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为<code>Integer.MAX_VALUE</code>,内部是<br>一个DelayedWorkQueue实现</li>\n<li><strong>newSingleThreadScheduledExecutor</strong>: 创建一个ScheduledThreadPoolExecutor定时执行线程池,最大线程数为<code>Integer.MAX_VALUE</code>,<br>内部是一个DelayedWorkQueue实现  </li>\n</ul>\n<h2 id=\"5-AbstractQueuedSynchronizer\"><a href=\"#5-AbstractQueuedSynchronizer\" class=\"headerlink\" title=\"5. AbstractQueuedSynchronizer\"></a>5. AbstractQueuedSynchronizer</h2><p>   内部类：</p>\n<ul>\n<li>ConditionObject：</li>\n<li>Node：存放线程信息队列</li>\n</ul>\n<h3 id=\"5-1-AQS之ReentrantLock独占锁源码分析\"><a href=\"#5-1-AQS之ReentrantLock独占锁源码分析\" class=\"headerlink\" title=\"5.1 AQS之ReentrantLock独占锁源码分析\"></a>5.1 AQS之ReentrantLock独占锁源码分析</h3><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer\" target=\"_blank\" rel=\"noopener\">AbstractQueuedSynchronizer独占锁</a></li>\n<li><code>ReentrantLock.lock()</code>保证在<code>ReentrantLock.unlock()</code>之间的代码只有一个线程在执行；ReentrantLock为可重入锁，它有一个与<br>锁相关的获取计数器，如果拥有锁的某个线程再次得到锁，那么获取计数器就加1，然后锁需要被释放两次才能获得真正释放。</li>\n<li>内部类<code>Syn</code>实现了<code>AbstractQueuedSynchronizer</code>接口</li>\n<li>构造方法有公平锁和非公平锁，公平锁与非公平锁的区别在于公平锁在尝试获取锁时会放入等待队列的后面，获取锁的顺序是按先后顺序执行的，<br>而非公平锁在尝试获取锁时首先会去尝试获取锁，若获取失败在进入等待队列按顺序执行。</li>\n</ul>\n<h3 id=\"5-2-AQS之CountDownLatch共享锁源码分析\"><a href=\"#5-2-AQS之CountDownLatch共享锁源码分析\" class=\"headerlink\" title=\"5.2 AQS之CountDownLatch共享锁源码分析\"></a>5.2 AQS之CountDownLatch共享锁源码分析</h3><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer\" target=\"_blank\" rel=\"noopener\">AbstractQueuedSynchronizer共享锁</a></li>\n<li><code>CountDownLatch.countDown()</code>实现锁计数-1，直到减至0是，唤醒<code>CountDownLatch.await()</code>等待线程</li>\n</ul>\n<h3 id=\"5-3-公平锁和非公平锁\"><a href=\"#5-3-公平锁和非公平锁\" class=\"headerlink\" title=\"5.3 公平锁和非公平锁\"></a>5.3 公平锁和非公平锁</h3><p>   公平锁是严格按照FIFO队列获得锁，但带来了大量的线程切换的消耗，非公平锁极大的降低了线程切换带来的消耗，虽然可能造成线程饥饿的情况，但也提高了吞吐量。</p>\n<h2 id=\"6-synchronized与Lock比较\"><a href=\"#6-synchronized与Lock比较\" class=\"headerlink\" title=\"6. synchronized与Lock比较\"></a>6. synchronized与Lock比较</h2><ol>\n<li><code>synchronized</code>是JVM层面实现的’重量级锁’，可通过监控工具监控<code>synchronized</code>的锁定，而且代码出现异常时会自动释放锁</li>\n<li><code>Lock</code>是纯JAVA实现的，为多种实现留下空间，可以实现不同的调度算法、性能特性或者锁定语义，<code>Lock</code>必须自己手动的释放锁<br>形如<code>finally{lock.unlock();}</code></li>\n<li>当锁竞争激烈时用<code>Lock</code>,锁竞争较弱时用<code>synchronized</code></li>\n</ol>\n<h2 id=\"7-阻塞队列BlockingQueue\"><a href=\"#7-阻塞队列BlockingQueue\" class=\"headerlink\" title=\"7. 阻塞队列BlockingQueue\"></a>7. 阻塞队列BlockingQueue</h2><ol>\n<li>阻塞队列是一个FIFO队列</li>\n<li>主要方法   </li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Ops</th>\n<th style=\"text-align:center\">Throws Exception</th>\n<th style=\"text-align:center\">Special Value</th>\n<th style=\"text-align:center\">Blocks Times Out</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Insert</td>\n<td style=\"text-align:center\">add(o)</td>\n<td style=\"text-align:center\">offer(o)</td>\n<td style=\"text-align:center\">put(o) &amp; offer(o, timeout, timeUnit)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Remove</td>\n<td style=\"text-align:center\">remove(o)</td>\n<td style=\"text-align:center\">poll()</td>\n<td style=\"text-align:center\">take()    &amp; poll(timeout, timeUnit)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Examine</td>\n<td style=\"text-align:center\">element()</td>\n<td style=\"text-align:center\">peek()</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li><p>主要实现  </p>\n<ul>\n<li><strong>ArrayBlockingQueue</strong>：基于数组的有界阻塞队列，必须指定长度</li>\n<li><strong>LinkedBlockingQueue</strong>: 基于链表的有界阻塞队列，长度可指定也可动态扩张，默认长度为<code>Integer.MAX_VALUE</code></li>\n<li><strong>SynchronousQueue</strong>: 无缓冲区的阻塞队列，<code>put()</code>要阻塞等待<code>take()</code></li>\n<li><strong>PriorityBlockingQueue</strong>: 优先级阻塞队列，队列元素必须实现<code>Comparator</code>接口，基于数组，自动扩展长度</li>\n<li><strong>DelayQueue</strong>：一个使用优先级队列实现的无界阻塞队列</li>\n<li><strong>LinkedTransferQueue</strong>：一个由链表结构组成的无界阻塞队列</li>\n<li><strong>LinkedBlockingDeque</strong>：一个由链表结构组成的双向阻塞队列</li>\n</ul>\n</li>\n<li><p>注意<br>如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且使用offer方法时，该方法永远返回true。</p>\n</li>\n</ol>\n<h2 id=\"8-ConcurrentLinkedQueue\"><a href=\"#8-ConcurrentLinkedQueue\" class=\"headerlink\" title=\"8. ConcurrentLinkedQueue\"></a>8. ConcurrentLinkedQueue</h2><p>   非阻塞线程安全的FIFO队列，基于单向链表实现，循环CAS操作实现，由于是根据Node.NEXT是否为NULL来判断是否为TAIL节点，因此队列的元素值不可为NULL。</p>\n"},{"layout":"post","title":"Java GC","thumbnail":"/images/java/java_01.jpg","date":"2018-06-15T05:15:27.000Z","author":"Crab2Died","_content":"\n## 一. Java虚拟机内存区域\n### 1. 运行时数据区\n   ![java运行时数据区](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png)\n\n### 2. 程序计数器(Program Counter Register)\n   - 1、程序计数器是线程内(每个线程都有唯一的、封闭的)一小块内存区域\n   - 2、计数器指定的是当前虚拟机执行指令的地址\n   - 3、当虚拟机执行的是Native方法时,计数器值为空(Undefined),此内存区域是唯一一个在Java虚拟机规范中没有规定任何`OutOfMemoryError`\n        情况的区域.\n\n### 3. Java虚拟机栈(Java Virtual Machine Stacks)\n   - 1、虚拟机栈是线程内部的、封闭的\n   - 2、虚拟机栈描述的是java方法执行的内存模型\n   - 3、每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息\n   - 4、java方法的执行就是入栈与出栈的过程\n   - 5、如果虚拟机栈深度超出了虚拟机允许深度将会抛出`StackOverflowError`异常,现代虚拟机大多数支持动态扩展(也允许固定长度),当虚拟机申\n        请扩展时申请不到足够的内存时,将会抛出`OutOfMemoryError`异常\n   \n### 4. 本地方法栈(Native Method Stack)\n   - 1、为虚拟机调用本地Native方法提供服务\n   - 2、也有虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一\n   - 3、也会抛出`StackOverflowError`异常和`OutOfMemoryError`异常\n\n### 5. Java堆(Java Heap) GC堆\n   - 1、线程共享的最大一块内存区域\n   - 2、此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存,虚拟机规范所有的对象实例与数据都在堆上分配\n   - 3、随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、 标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐\n        变得不是那么“绝对”了\n\n### 6. 方法区(Method Area)\n   - 1、存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据\n   - 2、这区域的内存回收目标主要是针对常量池的回收和对类型的卸载\n\n### 7. 运行时常量池(Runtime Constant Pool)\n   - 1、Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成\n        的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放\n   - 2、`String.intern()`也会放入运行时常量池中\n\n### 8. 直接内存(Direct Memory)\n   - 1、NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据\n   \n## 二. Java对象\n### 1. 对象的创建\n   - 1、指针碰撞(Bump the Pointer)\n   - 2、空闲列表(Free List)\n\n### 2. 对象再内存中的布局\n   - 1、分为3块区域:对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)\n   - 2、对象头包含:轻量级锁定、 重量级锁定、 GC标记、 可偏向\n   \n### 3. 对象的访问定位\n   - 1、句柄访问  \n      ![句柄访问对象](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE.png)\n   - 2、直接指针访问   \n      ![直接指针访问](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE.png)  \n   \n## 三. 垃圾回收与内存分配\n### 1. 引用计数法(虚拟机未使用)\n   - 1、互相引用将无法得到正常回收\n\n### 2. 可达性分析算法(Reachability Analysis)\n   - 1、通过GC Root节点向下搜索,搜索走过的路径称为引用链(Reference Chain),当一个对象没有一个引用链经过,则表示该对象是不可用的,可以回收\n   - 2、可作为GC Root对象的有:   \n        * 虚拟机栈(栈帧中的本地变量表)中引用的对象 \n        * 方法区中类静态属性引用的对象  \n        * 方法区中常量引用的对象  \n        * 本地方法栈中JNI(即一般说的Native方法)引用的对象  \n        \n### 3. 引用\n   - 1、**强引用(Strong Reference)**: new 关键字\n   - 2、**软引用(Soft Reference)**:当要发生内存溢出时会将软引用对象加入回收队列中\n   - 3、**弱引用(Weak Reference)**:只能活到下次GC前\n   - 4、**虚引用(Phantom Reference)**:幽灵引用或者幻影引用\n   \n### 4. 回收方法区\n   - 1、主要回收永久代的废弃的常量和无用的类   \n   - 2、无用的类判定条件:  \n        * 该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例.\n        * 加载该类的ClassLoader已经被回收.\n        * 该类对应的`java.lang.Class`对象没有在任何地方被引用,无法在任何地方通过反射访问该类的方法.\n\n## 四. 垃圾回收算法\n### 1. 标记-清除算法(Mark-Sweep)\n   - 1、标记与清除2个过程\n   - 2、标记与清除效率都不高,还可能产生大量空间碎片导致大对象找不到连续可用的空间\n   \n### 2. 复制算法(Copying)\n   - 1、将堆内存分为大小相等的2块,每次只是用其中一块,当一块内存用完时将还活着的对象移动到另一块,然后清理该块内存\n   - 2、消除了内存碎片化,代价是牺牲了一半可用堆内存\n   - 3、商用虚拟机都采用这种,但并不是按1:1来划分空间而是将内存分为一块较大的Eden空间和两块较小的Survivor空间,每次使用Eden和其中\n        一块Survivor.当回收时,将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上,最后清理掉Eden和刚才用过的\n        Survivor空间. HotSpot虚拟机默认Eden和Survivor的大小比例是8:1,也就是每次新生代中可用内存空间为整个新生代容量的\n        90%(80%+10%),只有10%的内存会被“浪费”. 当然,98%的对象可回收只是一般场景下的数据,我们没有办法保证每次回收都只有不多于\n        10%的对象存活,当Survivor空间不够用时,需要依赖其他内存(这里指老年代)进行分配担保(Handle Promotion).\n   - 4、当存活率高时将会出现大量的内存复制操作还有可能导致进行分配担保\n   \n### 3. 标记-整理算法(Mark-Compact)\n   - 1、老年代内存,标记可回收对象之后,将存活的对象移向一端,然后清理掉端边界以外的内存\n   \n### 4. 分代收集算法(Generational Collection)\n   - 1、将堆内存分为老年代和新生代\n   - 2、老年代对象存活率高,再采用标记-清理或标记-整理算法进行GC\n   - 3、新生代存活率低,采用复制算法将少量的存活对象进行复制操作   \n\n## 五. HotSpot算法实现\n### 1. 枚举根节点\n   - 1、虚拟机内OopMap存有对象引用信息，可以得到GC Root根节点\n\n### 2. 安全点\n   - 1、虚拟机会在如方法调用、 循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint\n   - 2、中断方式  \n     * 抢先式中断(基本弃用): 给出中断指令，有线程发现未到达安全点则继续执行至下一个安全点\n     * 主动式中断: 给定一个中断标志，每个线程都会去轮询该标志，为真时中断\n   \n### 3. 安全区域\n   - 1、安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的\n   - 2、在线程执行到安全区域时首先会标记自己进入安全区域，出安全区域前必须等到枚举根节点或整个GC完成，没有则都等到可以出安全区域信号为止\n   \n## 六. 垃圾回收器  \n   ![HotSpot虚拟机垃圾回收器](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/HotSpot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png)\n   \n### 1. Serial收集器\n   - 1、JDK1.3.1之前是虚拟机新生代收集的唯一选择\n   - 2、单线程、Stop The World(STW)、复制算法\n   - 3、Client模式下新生代默认的垃圾收集器\n   \n### 2. PerNew收集器\n   - 1、Serial收集器的多线程版,其他一样\n   - 2、是许多虚拟机Server模式下新生代的首选收集器\n   - 3、ParNew收集器也是使用`-XX:+UseConcMarkSweepGC`选项后的默认新生代收集器,也可以使用`-XX:+UseParNewGC`选项来强制指定它\n   - 4、单核下效果不一定比Serial效果好,多核更适合,`-XX:ParallelGCThreads`参数来限制垃圾收集的线程数\n   \n### 3. Parallel Scavenge收集器\n   - 1、新生代收集器,采用复制算法,并行的多线程收集器,吞吐量优先   \n   - 2、追求可控的吞吐量, 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)\n   - 3、控制最大垃圾收集停顿时间的`-XX:MaxGCPauseMillis`参数以及直接设置吞吐量大小的`-XX:GCTimeRatio`参数.\n   \n### 4. Serial Old收集器\n   - 1、Serial老年代版本、单线程、标记-整理算法\n   - 2、给Client模式下虚拟机用\n\n### 5. Parallel Old收集器\n   - 1、Parallel Scavenge收集器的老年代版本,使用多线程和“标记-整理”算法,JDK1.6开始提供\n  \n### 6. CMS收集器\n   - 1、CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器. \n   - 2、标记-清除算法实现  \n        * 初始标记(CMS initial mark)，有短时的STW\n        * 并发标记(CMS concurrent mark)\n        * 重新标记(CMS remark)，有短时的STW\n        * 并发清除(CMS concurrent sweep)\n   - 3、并发收集、 低停顿,Sun公司的一些官方文档中也称之为并发低停顿收集器\n   - 4、`-XX：+UseCMSCompactAtFullCollection`默认开启，表示CMS进行Full GC的时候开启内存碎片的合并整理，该过程无法并发停顿时间变长\n   - 5、`-XX：CMSFullGCsBeforeCompaction`表示执行多少次不压缩的Full GC后跟着来一次压缩的Full GC，默认是0，每次都压缩\n\n### 7. G1收集器\n   - 1、G1(Garbage-First)收集器是当今收集器技术发展的最前沿成果之一,面向服务端应用 \n   - 2、特点: \n        * 并发与并行:充分利用cpu与多核等硬件优势\n        * 分代收集:\n        * 空间整理:标记-整理算法\n        * 可预测的停顿:将堆内存分为多个区域(Region),还保留有老年代与新生代\n   - 3、不计算维护Remembered Set的操作,G1收集器的运作大致可划分为以下几个步骤:  \n        * 初始标记(Initial Marking)\n        * 并发标记(Concurrent Marking)\n        * 最终标记(Final Marking)\n        * 筛选回收(Live Data Counting and Evacuation) \n        \n### 8. 垃圾收集器参数  \n\n  |        参数            |                      描述                                      |\n  |:-----------------------|:--------------------------------------------------------------|\n  |UseSerialGC             |Client模式下默认,使用Serial+Serial Old组合                       |\n  |UseParNewGC             |ParNew+Serial Old组合                                          |\n  |UseConMarkSweepGC       |ParNew+CMS+Serial Old组合,Serial Old作为CMS失败后备用            |\n  |UseParallelGC           |Server模式默认,Parallel Scavenge+Serial Old(PS Mark Sweep)组合  |\n  |UseParallelOldGC        |Parallel Scavenge+Parallel Old组合                             |\n  |UseG1GC                 |使用G1                                                         |\n  \n## 七. 内存分配与回收策略\n### 1. 对象优先在Eden分配\n   - 对象优先在Eden新生代分配,内存不足将发生一次Minor GC\n\n### 2. 大对象直接进入老年代\n   - `-XX:PretenureSizeThreshold`参数,令大于这个设置值的对象直接在老年代分配,避免大量内存复制\n\n### 3. 长期存活的对象将进入老年代\n   - 对象晋升老年代的年龄阈值,可以通过参数`-XX:MaxTenuringThreshold`设置,默认15,每次Minor GC对象没死+1\n\n### 4. 动态对象年龄判定\n   - 如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半,年龄大于或等于该年龄的对象就可以直接进入老年代,无须等\n     到MaxTenuringThreshold中要求的年龄\n\n### 5. 空间分配担保\n   - Minor GC前先判断老年代可用空间是否大于新生代对象总空间,如果大于则确保安全,如果小于则查看HandlePromotionFailure设置的值是否\n     允许担保失败,若允许则会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小,如果大于,将尝试着进行一次Minor \n     GC,尽管这次Minor GC是有风险的;如果小于,或者HandlePromotionFailure设置不允许冒险,那这时也要改为进行一次Full GC.\n\n### 八. Minor GC、Major GC与Full GC\n   - Minor GC表示新生代GC、Major GC是指老年代GC、Full GC为全部堆内存GC。\n   - 往往他们之间相互影响，相互触发\n","source":"_posts/java-gc.md","raw":"---\nlayout: post\ntitle: Java GC\nthumbnail: /images/java/java_01.jpg\ndate: 2018-06-15 13:15:27 +0800\nauthor: Crab2Died\ncategories: Java\ntags: \n  - JVM\n  - Java\n  - GC\n---\n\n## 一. Java虚拟机内存区域\n### 1. 运行时数据区\n   ![java运行时数据区](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png)\n\n### 2. 程序计数器(Program Counter Register)\n   - 1、程序计数器是线程内(每个线程都有唯一的、封闭的)一小块内存区域\n   - 2、计数器指定的是当前虚拟机执行指令的地址\n   - 3、当虚拟机执行的是Native方法时,计数器值为空(Undefined),此内存区域是唯一一个在Java虚拟机规范中没有规定任何`OutOfMemoryError`\n        情况的区域.\n\n### 3. Java虚拟机栈(Java Virtual Machine Stacks)\n   - 1、虚拟机栈是线程内部的、封闭的\n   - 2、虚拟机栈描述的是java方法执行的内存模型\n   - 3、每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息\n   - 4、java方法的执行就是入栈与出栈的过程\n   - 5、如果虚拟机栈深度超出了虚拟机允许深度将会抛出`StackOverflowError`异常,现代虚拟机大多数支持动态扩展(也允许固定长度),当虚拟机申\n        请扩展时申请不到足够的内存时,将会抛出`OutOfMemoryError`异常\n   \n### 4. 本地方法栈(Native Method Stack)\n   - 1、为虚拟机调用本地Native方法提供服务\n   - 2、也有虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一\n   - 3、也会抛出`StackOverflowError`异常和`OutOfMemoryError`异常\n\n### 5. Java堆(Java Heap) GC堆\n   - 1、线程共享的最大一块内存区域\n   - 2、此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存,虚拟机规范所有的对象实例与数据都在堆上分配\n   - 3、随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、 标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐\n        变得不是那么“绝对”了\n\n### 6. 方法区(Method Area)\n   - 1、存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据\n   - 2、这区域的内存回收目标主要是针对常量池的回收和对类型的卸载\n\n### 7. 运行时常量池(Runtime Constant Pool)\n   - 1、Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成\n        的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放\n   - 2、`String.intern()`也会放入运行时常量池中\n\n### 8. 直接内存(Direct Memory)\n   - 1、NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据\n   \n## 二. Java对象\n### 1. 对象的创建\n   - 1、指针碰撞(Bump the Pointer)\n   - 2、空闲列表(Free List)\n\n### 2. 对象再内存中的布局\n   - 1、分为3块区域:对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)\n   - 2、对象头包含:轻量级锁定、 重量级锁定、 GC标记、 可偏向\n   \n### 3. 对象的访问定位\n   - 1、句柄访问  \n      ![句柄访问对象](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE.png)\n   - 2、直接指针访问   \n      ![直接指针访问](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE.png)  \n   \n## 三. 垃圾回收与内存分配\n### 1. 引用计数法(虚拟机未使用)\n   - 1、互相引用将无法得到正常回收\n\n### 2. 可达性分析算法(Reachability Analysis)\n   - 1、通过GC Root节点向下搜索,搜索走过的路径称为引用链(Reference Chain),当一个对象没有一个引用链经过,则表示该对象是不可用的,可以回收\n   - 2、可作为GC Root对象的有:   \n        * 虚拟机栈(栈帧中的本地变量表)中引用的对象 \n        * 方法区中类静态属性引用的对象  \n        * 方法区中常量引用的对象  \n        * 本地方法栈中JNI(即一般说的Native方法)引用的对象  \n        \n### 3. 引用\n   - 1、**强引用(Strong Reference)**: new 关键字\n   - 2、**软引用(Soft Reference)**:当要发生内存溢出时会将软引用对象加入回收队列中\n   - 3、**弱引用(Weak Reference)**:只能活到下次GC前\n   - 4、**虚引用(Phantom Reference)**:幽灵引用或者幻影引用\n   \n### 4. 回收方法区\n   - 1、主要回收永久代的废弃的常量和无用的类   \n   - 2、无用的类判定条件:  \n        * 该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例.\n        * 加载该类的ClassLoader已经被回收.\n        * 该类对应的`java.lang.Class`对象没有在任何地方被引用,无法在任何地方通过反射访问该类的方法.\n\n## 四. 垃圾回收算法\n### 1. 标记-清除算法(Mark-Sweep)\n   - 1、标记与清除2个过程\n   - 2、标记与清除效率都不高,还可能产生大量空间碎片导致大对象找不到连续可用的空间\n   \n### 2. 复制算法(Copying)\n   - 1、将堆内存分为大小相等的2块,每次只是用其中一块,当一块内存用完时将还活着的对象移动到另一块,然后清理该块内存\n   - 2、消除了内存碎片化,代价是牺牲了一半可用堆内存\n   - 3、商用虚拟机都采用这种,但并不是按1:1来划分空间而是将内存分为一块较大的Eden空间和两块较小的Survivor空间,每次使用Eden和其中\n        一块Survivor.当回收时,将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上,最后清理掉Eden和刚才用过的\n        Survivor空间. HotSpot虚拟机默认Eden和Survivor的大小比例是8:1,也就是每次新生代中可用内存空间为整个新生代容量的\n        90%(80%+10%),只有10%的内存会被“浪费”. 当然,98%的对象可回收只是一般场景下的数据,我们没有办法保证每次回收都只有不多于\n        10%的对象存活,当Survivor空间不够用时,需要依赖其他内存(这里指老年代)进行分配担保(Handle Promotion).\n   - 4、当存活率高时将会出现大量的内存复制操作还有可能导致进行分配担保\n   \n### 3. 标记-整理算法(Mark-Compact)\n   - 1、老年代内存,标记可回收对象之后,将存活的对象移向一端,然后清理掉端边界以外的内存\n   \n### 4. 分代收集算法(Generational Collection)\n   - 1、将堆内存分为老年代和新生代\n   - 2、老年代对象存活率高,再采用标记-清理或标记-整理算法进行GC\n   - 3、新生代存活率低,采用复制算法将少量的存活对象进行复制操作   \n\n## 五. HotSpot算法实现\n### 1. 枚举根节点\n   - 1、虚拟机内OopMap存有对象引用信息，可以得到GC Root根节点\n\n### 2. 安全点\n   - 1、虚拟机会在如方法调用、 循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint\n   - 2、中断方式  \n     * 抢先式中断(基本弃用): 给出中断指令，有线程发现未到达安全点则继续执行至下一个安全点\n     * 主动式中断: 给定一个中断标志，每个线程都会去轮询该标志，为真时中断\n   \n### 3. 安全区域\n   - 1、安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的\n   - 2、在线程执行到安全区域时首先会标记自己进入安全区域，出安全区域前必须等到枚举根节点或整个GC完成，没有则都等到可以出安全区域信号为止\n   \n## 六. 垃圾回收器  \n   ![HotSpot虚拟机垃圾回收器](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/HotSpot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png)\n   \n### 1. Serial收集器\n   - 1、JDK1.3.1之前是虚拟机新生代收集的唯一选择\n   - 2、单线程、Stop The World(STW)、复制算法\n   - 3、Client模式下新生代默认的垃圾收集器\n   \n### 2. PerNew收集器\n   - 1、Serial收集器的多线程版,其他一样\n   - 2、是许多虚拟机Server模式下新生代的首选收集器\n   - 3、ParNew收集器也是使用`-XX:+UseConcMarkSweepGC`选项后的默认新生代收集器,也可以使用`-XX:+UseParNewGC`选项来强制指定它\n   - 4、单核下效果不一定比Serial效果好,多核更适合,`-XX:ParallelGCThreads`参数来限制垃圾收集的线程数\n   \n### 3. Parallel Scavenge收集器\n   - 1、新生代收集器,采用复制算法,并行的多线程收集器,吞吐量优先   \n   - 2、追求可控的吞吐量, 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)\n   - 3、控制最大垃圾收集停顿时间的`-XX:MaxGCPauseMillis`参数以及直接设置吞吐量大小的`-XX:GCTimeRatio`参数.\n   \n### 4. Serial Old收集器\n   - 1、Serial老年代版本、单线程、标记-整理算法\n   - 2、给Client模式下虚拟机用\n\n### 5. Parallel Old收集器\n   - 1、Parallel Scavenge收集器的老年代版本,使用多线程和“标记-整理”算法,JDK1.6开始提供\n  \n### 6. CMS收集器\n   - 1、CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器. \n   - 2、标记-清除算法实现  \n        * 初始标记(CMS initial mark)，有短时的STW\n        * 并发标记(CMS concurrent mark)\n        * 重新标记(CMS remark)，有短时的STW\n        * 并发清除(CMS concurrent sweep)\n   - 3、并发收集、 低停顿,Sun公司的一些官方文档中也称之为并发低停顿收集器\n   - 4、`-XX：+UseCMSCompactAtFullCollection`默认开启，表示CMS进行Full GC的时候开启内存碎片的合并整理，该过程无法并发停顿时间变长\n   - 5、`-XX：CMSFullGCsBeforeCompaction`表示执行多少次不压缩的Full GC后跟着来一次压缩的Full GC，默认是0，每次都压缩\n\n### 7. G1收集器\n   - 1、G1(Garbage-First)收集器是当今收集器技术发展的最前沿成果之一,面向服务端应用 \n   - 2、特点: \n        * 并发与并行:充分利用cpu与多核等硬件优势\n        * 分代收集:\n        * 空间整理:标记-整理算法\n        * 可预测的停顿:将堆内存分为多个区域(Region),还保留有老年代与新生代\n   - 3、不计算维护Remembered Set的操作,G1收集器的运作大致可划分为以下几个步骤:  \n        * 初始标记(Initial Marking)\n        * 并发标记(Concurrent Marking)\n        * 最终标记(Final Marking)\n        * 筛选回收(Live Data Counting and Evacuation) \n        \n### 8. 垃圾收集器参数  \n\n  |        参数            |                      描述                                      |\n  |:-----------------------|:--------------------------------------------------------------|\n  |UseSerialGC             |Client模式下默认,使用Serial+Serial Old组合                       |\n  |UseParNewGC             |ParNew+Serial Old组合                                          |\n  |UseConMarkSweepGC       |ParNew+CMS+Serial Old组合,Serial Old作为CMS失败后备用            |\n  |UseParallelGC           |Server模式默认,Parallel Scavenge+Serial Old(PS Mark Sweep)组合  |\n  |UseParallelOldGC        |Parallel Scavenge+Parallel Old组合                             |\n  |UseG1GC                 |使用G1                                                         |\n  \n## 七. 内存分配与回收策略\n### 1. 对象优先在Eden分配\n   - 对象优先在Eden新生代分配,内存不足将发生一次Minor GC\n\n### 2. 大对象直接进入老年代\n   - `-XX:PretenureSizeThreshold`参数,令大于这个设置值的对象直接在老年代分配,避免大量内存复制\n\n### 3. 长期存活的对象将进入老年代\n   - 对象晋升老年代的年龄阈值,可以通过参数`-XX:MaxTenuringThreshold`设置,默认15,每次Minor GC对象没死+1\n\n### 4. 动态对象年龄判定\n   - 如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半,年龄大于或等于该年龄的对象就可以直接进入老年代,无须等\n     到MaxTenuringThreshold中要求的年龄\n\n### 5. 空间分配担保\n   - Minor GC前先判断老年代可用空间是否大于新生代对象总空间,如果大于则确保安全,如果小于则查看HandlePromotionFailure设置的值是否\n     允许担保失败,若允许则会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小,如果大于,将尝试着进行一次Minor \n     GC,尽管这次Minor GC是有风险的;如果小于,或者HandlePromotionFailure设置不允许冒险,那这时也要改为进行一次Full GC.\n\n### 八. Minor GC、Major GC与Full GC\n   - Minor GC表示新生代GC、Major GC是指老年代GC、Full GC为全部堆内存GC。\n   - 往往他们之间相互影响，相互触发\n","slug":"java-gc","published":1,"updated":"2018-12-12T13:12:15.589Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vj2000auoiljv2webgv","content":"<h2 id=\"一-Java虚拟机内存区域\"><a href=\"#一-Java虚拟机内存区域\" class=\"headerlink\" title=\"一. Java虚拟机内存区域\"></a>一. Java虚拟机内存区域</h2><h3 id=\"1-运行时数据区\"><a href=\"#1-运行时数据区\" class=\"headerlink\" title=\"1. 运行时数据区\"></a>1. 运行时数据区</h3><p>   <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"java运行时数据区\"></p>\n<h3 id=\"2-程序计数器-Program-Counter-Register\"><a href=\"#2-程序计数器-Program-Counter-Register\" class=\"headerlink\" title=\"2. 程序计数器(Program Counter Register)\"></a>2. 程序计数器(Program Counter Register)</h3><ul>\n<li>1、程序计数器是线程内(每个线程都有唯一的、封闭的)一小块内存区域</li>\n<li>2、计数器指定的是当前虚拟机执行指令的地址</li>\n<li>3、当虚拟机执行的是Native方法时,计数器值为空(Undefined),此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code><br>   情况的区域.</li>\n</ul>\n<h3 id=\"3-Java虚拟机栈-Java-Virtual-Machine-Stacks\"><a href=\"#3-Java虚拟机栈-Java-Virtual-Machine-Stacks\" class=\"headerlink\" title=\"3. Java虚拟机栈(Java Virtual Machine Stacks)\"></a>3. Java虚拟机栈(Java Virtual Machine Stacks)</h3><ul>\n<li>1、虚拟机栈是线程内部的、封闭的</li>\n<li>2、虚拟机栈描述的是java方法执行的内存模型</li>\n<li>3、每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息</li>\n<li>4、java方法的执行就是入栈与出栈的过程</li>\n<li>5、如果虚拟机栈深度超出了虚拟机允许深度将会抛出<code>StackOverflowError</code>异常,现代虚拟机大多数支持动态扩展(也允许固定长度),当虚拟机申<br>   请扩展时申请不到足够的内存时,将会抛出<code>OutOfMemoryError</code>异常</li>\n</ul>\n<h3 id=\"4-本地方法栈-Native-Method-Stack\"><a href=\"#4-本地方法栈-Native-Method-Stack\" class=\"headerlink\" title=\"4. 本地方法栈(Native Method Stack)\"></a>4. 本地方法栈(Native Method Stack)</h3><ul>\n<li>1、为虚拟机调用本地Native方法提供服务</li>\n<li>2、也有虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一</li>\n<li>3、也会抛出<code>StackOverflowError</code>异常和<code>OutOfMemoryError</code>异常</li>\n</ul>\n<h3 id=\"5-Java堆-Java-Heap-GC堆\"><a href=\"#5-Java堆-Java-Heap-GC堆\" class=\"headerlink\" title=\"5. Java堆(Java Heap) GC堆\"></a>5. Java堆(Java Heap) GC堆</h3><ul>\n<li>1、线程共享的最大一块内存区域</li>\n<li>2、此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存,虚拟机规范所有的对象实例与数据都在堆上分配</li>\n<li>3、随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、 标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐<br>   变得不是那么“绝对”了</li>\n</ul>\n<h3 id=\"6-方法区-Method-Area\"><a href=\"#6-方法区-Method-Area\" class=\"headerlink\" title=\"6. 方法区(Method Area)\"></a>6. 方法区(Method Area)</h3><ul>\n<li>1、存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据</li>\n<li>2、这区域的内存回收目标主要是针对常量池的回收和对类型的卸载</li>\n</ul>\n<h3 id=\"7-运行时常量池-Runtime-Constant-Pool\"><a href=\"#7-运行时常量池-Runtime-Constant-Pool\" class=\"headerlink\" title=\"7. 运行时常量池(Runtime Constant Pool)\"></a>7. 运行时常量池(Runtime Constant Pool)</h3><ul>\n<li>1、Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成<br>   的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放</li>\n<li>2、<code>String.intern()</code>也会放入运行时常量池中</li>\n</ul>\n<h3 id=\"8-直接内存-Direct-Memory\"><a href=\"#8-直接内存-Direct-Memory\" class=\"headerlink\" title=\"8. 直接内存(Direct Memory)\"></a>8. 直接内存(Direct Memory)</h3><ul>\n<li>1、NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据</li>\n</ul>\n<h2 id=\"二-Java对象\"><a href=\"#二-Java对象\" class=\"headerlink\" title=\"二. Java对象\"></a>二. Java对象</h2><h3 id=\"1-对象的创建\"><a href=\"#1-对象的创建\" class=\"headerlink\" title=\"1. 对象的创建\"></a>1. 对象的创建</h3><ul>\n<li>1、指针碰撞(Bump the Pointer)</li>\n<li>2、空闲列表(Free List)</li>\n</ul>\n<h3 id=\"2-对象再内存中的布局\"><a href=\"#2-对象再内存中的布局\" class=\"headerlink\" title=\"2. 对象再内存中的布局\"></a>2. 对象再内存中的布局</h3><ul>\n<li>1、分为3块区域:对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)</li>\n<li>2、对象头包含:轻量级锁定、 重量级锁定、 GC标记、 可偏向</li>\n</ul>\n<h3 id=\"3-对象的访问定位\"><a href=\"#3-对象的访问定位\" class=\"headerlink\" title=\"3. 对象的访问定位\"></a>3. 对象的访问定位</h3><ul>\n<li>1、句柄访问<br> <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE.png\" alt=\"句柄访问对象\"></li>\n<li>2、直接指针访问<br> <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE.png\" alt=\"直接指针访问\">  </li>\n</ul>\n<h2 id=\"三-垃圾回收与内存分配\"><a href=\"#三-垃圾回收与内存分配\" class=\"headerlink\" title=\"三. 垃圾回收与内存分配\"></a>三. 垃圾回收与内存分配</h2><h3 id=\"1-引用计数法-虚拟机未使用\"><a href=\"#1-引用计数法-虚拟机未使用\" class=\"headerlink\" title=\"1. 引用计数法(虚拟机未使用)\"></a>1. 引用计数法(虚拟机未使用)</h3><ul>\n<li>1、互相引用将无法得到正常回收</li>\n</ul>\n<h3 id=\"2-可达性分析算法-Reachability-Analysis\"><a href=\"#2-可达性分析算法-Reachability-Analysis\" class=\"headerlink\" title=\"2. 可达性分析算法(Reachability Analysis)\"></a>2. 可达性分析算法(Reachability Analysis)</h3><ul>\n<li>1、通过GC Root节点向下搜索,搜索走过的路径称为引用链(Reference Chain),当一个对象没有一个引用链经过,则表示该对象是不可用的,可以回收</li>\n<li>2、可作为GC Root对象的有:   <ul>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象 </li>\n<li>方法区中类静态属性引用的对象  </li>\n<li>方法区中常量引用的对象  </li>\n<li>本地方法栈中JNI(即一般说的Native方法)引用的对象  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3. 引用\"></a>3. 引用</h3><ul>\n<li>1、<strong>强引用(Strong Reference)</strong>: new 关键字</li>\n<li>2、<strong>软引用(Soft Reference)</strong>:当要发生内存溢出时会将软引用对象加入回收队列中</li>\n<li>3、<strong>弱引用(Weak Reference)</strong>:只能活到下次GC前</li>\n<li>4、<strong>虚引用(Phantom Reference)</strong>:幽灵引用或者幻影引用</li>\n</ul>\n<h3 id=\"4-回收方法区\"><a href=\"#4-回收方法区\" class=\"headerlink\" title=\"4. 回收方法区\"></a>4. 回收方法区</h3><ul>\n<li>1、主要回收永久代的废弃的常量和无用的类   </li>\n<li>2、无用的类判定条件:  <ul>\n<li>该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例.</li>\n<li>加载该类的ClassLoader已经被回收.</li>\n<li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用,无法在任何地方通过反射访问该类的方法.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四-垃圾回收算法\"><a href=\"#四-垃圾回收算法\" class=\"headerlink\" title=\"四. 垃圾回收算法\"></a>四. 垃圾回收算法</h2><h3 id=\"1-标记-清除算法-Mark-Sweep\"><a href=\"#1-标记-清除算法-Mark-Sweep\" class=\"headerlink\" title=\"1. 标记-清除算法(Mark-Sweep)\"></a>1. 标记-清除算法(Mark-Sweep)</h3><ul>\n<li>1、标记与清除2个过程</li>\n<li>2、标记与清除效率都不高,还可能产生大量空间碎片导致大对象找不到连续可用的空间</li>\n</ul>\n<h3 id=\"2-复制算法-Copying\"><a href=\"#2-复制算法-Copying\" class=\"headerlink\" title=\"2. 复制算法(Copying)\"></a>2. 复制算法(Copying)</h3><ul>\n<li>1、将堆内存分为大小相等的2块,每次只是用其中一块,当一块内存用完时将还活着的对象移动到另一块,然后清理该块内存</li>\n<li>2、消除了内存碎片化,代价是牺牲了一半可用堆内存</li>\n<li>3、商用虚拟机都采用这种,但并不是按1:1来划分空间而是将内存分为一块较大的Eden空间和两块较小的Survivor空间,每次使用Eden和其中<br>   一块Survivor.当回收时,将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上,最后清理掉Eden和刚才用过的<br>   Survivor空间. HotSpot虚拟机默认Eden和Survivor的大小比例是8:1,也就是每次新生代中可用内存空间为整个新生代容量的<br>   90%(80%+10%),只有10%的内存会被“浪费”. 当然,98%的对象可回收只是一般场景下的数据,我们没有办法保证每次回收都只有不多于<br>   10%的对象存活,当Survivor空间不够用时,需要依赖其他内存(这里指老年代)进行分配担保(Handle Promotion).</li>\n<li>4、当存活率高时将会出现大量的内存复制操作还有可能导致进行分配担保</li>\n</ul>\n<h3 id=\"3-标记-整理算法-Mark-Compact\"><a href=\"#3-标记-整理算法-Mark-Compact\" class=\"headerlink\" title=\"3. 标记-整理算法(Mark-Compact)\"></a>3. 标记-整理算法(Mark-Compact)</h3><ul>\n<li>1、老年代内存,标记可回收对象之后,将存活的对象移向一端,然后清理掉端边界以外的内存</li>\n</ul>\n<h3 id=\"4-分代收集算法-Generational-Collection\"><a href=\"#4-分代收集算法-Generational-Collection\" class=\"headerlink\" title=\"4. 分代收集算法(Generational Collection)\"></a>4. 分代收集算法(Generational Collection)</h3><ul>\n<li>1、将堆内存分为老年代和新生代</li>\n<li>2、老年代对象存活率高,再采用标记-清理或标记-整理算法进行GC</li>\n<li>3、新生代存活率低,采用复制算法将少量的存活对象进行复制操作   </li>\n</ul>\n<h2 id=\"五-HotSpot算法实现\"><a href=\"#五-HotSpot算法实现\" class=\"headerlink\" title=\"五. HotSpot算法实现\"></a>五. HotSpot算法实现</h2><h3 id=\"1-枚举根节点\"><a href=\"#1-枚举根节点\" class=\"headerlink\" title=\"1. 枚举根节点\"></a>1. 枚举根节点</h3><ul>\n<li>1、虚拟机内OopMap存有对象引用信息，可以得到GC Root根节点</li>\n</ul>\n<h3 id=\"2-安全点\"><a href=\"#2-安全点\" class=\"headerlink\" title=\"2. 安全点\"></a>2. 安全点</h3><ul>\n<li>1、虚拟机会在如方法调用、 循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint</li>\n<li>2、中断方式  <ul>\n<li>抢先式中断(基本弃用): 给出中断指令，有线程发现未到达安全点则继续执行至下一个安全点</li>\n<li>主动式中断: 给定一个中断标志，每个线程都会去轮询该标志，为真时中断</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-安全区域\"><a href=\"#3-安全区域\" class=\"headerlink\" title=\"3. 安全区域\"></a>3. 安全区域</h3><ul>\n<li>1、安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的</li>\n<li>2、在线程执行到安全区域时首先会标记自己进入安全区域，出安全区域前必须等到枚举根节点或整个GC完成，没有则都等到可以出安全区域信号为止</li>\n</ul>\n<h2 id=\"六-垃圾回收器\"><a href=\"#六-垃圾回收器\" class=\"headerlink\" title=\"六. 垃圾回收器\"></a>六. 垃圾回收器</h2><p>   <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/HotSpot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png\" alt=\"HotSpot虚拟机垃圾回收器\"></p>\n<h3 id=\"1-Serial收集器\"><a href=\"#1-Serial收集器\" class=\"headerlink\" title=\"1. Serial收集器\"></a>1. Serial收集器</h3><ul>\n<li>1、JDK1.3.1之前是虚拟机新生代收集的唯一选择</li>\n<li>2、单线程、Stop The World(STW)、复制算法</li>\n<li>3、Client模式下新生代默认的垃圾收集器</li>\n</ul>\n<h3 id=\"2-PerNew收集器\"><a href=\"#2-PerNew收集器\" class=\"headerlink\" title=\"2. PerNew收集器\"></a>2. PerNew收集器</h3><ul>\n<li>1、Serial收集器的多线程版,其他一样</li>\n<li>2、是许多虚拟机Server模式下新生代的首选收集器</li>\n<li>3、ParNew收集器也是使用<code>-XX:+UseConcMarkSweepGC</code>选项后的默认新生代收集器,也可以使用<code>-XX:+UseParNewGC</code>选项来强制指定它</li>\n<li>4、单核下效果不一定比Serial效果好,多核更适合,<code>-XX:ParallelGCThreads</code>参数来限制垃圾收集的线程数</li>\n</ul>\n<h3 id=\"3-Parallel-Scavenge收集器\"><a href=\"#3-Parallel-Scavenge收集器\" class=\"headerlink\" title=\"3. Parallel Scavenge收集器\"></a>3. Parallel Scavenge收集器</h3><ul>\n<li>1、新生代收集器,采用复制算法,并行的多线程收集器,吞吐量优先   </li>\n<li>2、追求可控的吞吐量, 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)</li>\n<li>3、控制最大垃圾收集停顿时间的<code>-XX:MaxGCPauseMillis</code>参数以及直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>参数.</li>\n</ul>\n<h3 id=\"4-Serial-Old收集器\"><a href=\"#4-Serial-Old收集器\" class=\"headerlink\" title=\"4. Serial Old收集器\"></a>4. Serial Old收集器</h3><ul>\n<li>1、Serial老年代版本、单线程、标记-整理算法</li>\n<li>2、给Client模式下虚拟机用</li>\n</ul>\n<h3 id=\"5-Parallel-Old收集器\"><a href=\"#5-Parallel-Old收集器\" class=\"headerlink\" title=\"5. Parallel Old收集器\"></a>5. Parallel Old收集器</h3><ul>\n<li>1、Parallel Scavenge收集器的老年代版本,使用多线程和“标记-整理”算法,JDK1.6开始提供</li>\n</ul>\n<h3 id=\"6-CMS收集器\"><a href=\"#6-CMS收集器\" class=\"headerlink\" title=\"6. CMS收集器\"></a>6. CMS收集器</h3><ul>\n<li>1、CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器. </li>\n<li>2、标记-清除算法实现  <ul>\n<li>初始标记(CMS initial mark)，有短时的STW</li>\n<li>并发标记(CMS concurrent mark)</li>\n<li>重新标记(CMS remark)，有短时的STW</li>\n<li>并发清除(CMS concurrent sweep)</li>\n</ul>\n</li>\n<li>3、并发收集、 低停顿,Sun公司的一些官方文档中也称之为并发低停顿收集器</li>\n<li>4、<code>-XX：+UseCMSCompactAtFullCollection</code>默认开启，表示CMS进行Full GC的时候开启内存碎片的合并整理，该过程无法并发停顿时间变长</li>\n<li>5、<code>-XX：CMSFullGCsBeforeCompaction</code>表示执行多少次不压缩的Full GC后跟着来一次压缩的Full GC，默认是0，每次都压缩</li>\n</ul>\n<h3 id=\"7-G1收集器\"><a href=\"#7-G1收集器\" class=\"headerlink\" title=\"7. G1收集器\"></a>7. G1收集器</h3><ul>\n<li>1、G1(Garbage-First)收集器是当今收集器技术发展的最前沿成果之一,面向服务端应用 </li>\n<li>2、特点: <ul>\n<li>并发与并行:充分利用cpu与多核等硬件优势</li>\n<li>分代收集:</li>\n<li>空间整理:标记-整理算法</li>\n<li>可预测的停顿:将堆内存分为多个区域(Region),还保留有老年代与新生代</li>\n</ul>\n</li>\n<li>3、不计算维护Remembered Set的操作,G1收集器的运作大致可划分为以下几个步骤:  <ul>\n<li>初始标记(Initial Marking)</li>\n<li>并发标记(Concurrent Marking)</li>\n<li>最终标记(Final Marking)</li>\n<li>筛选回收(Live Data Counting and Evacuation) </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-垃圾收集器参数\"><a href=\"#8-垃圾收集器参数\" class=\"headerlink\" title=\"8. 垃圾收集器参数\"></a>8. 垃圾收集器参数</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">UseSerialGC</td>\n<td style=\"text-align:left\">Client模式下默认,使用Serial+Serial Old组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseParNewGC</td>\n<td style=\"text-align:left\">ParNew+Serial Old组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseConMarkSweepGC</td>\n<td style=\"text-align:left\">ParNew+CMS+Serial Old组合,Serial Old作为CMS失败后备用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseParallelGC</td>\n<td style=\"text-align:left\">Server模式默认,Parallel Scavenge+Serial Old(PS Mark Sweep)组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseParallelOldGC</td>\n<td style=\"text-align:left\">Parallel Scavenge+Parallel Old组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseG1GC</td>\n<td style=\"text-align:left\">使用G1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"七-内存分配与回收策略\"><a href=\"#七-内存分配与回收策略\" class=\"headerlink\" title=\"七. 内存分配与回收策略\"></a>七. 内存分配与回收策略</h2><h3 id=\"1-对象优先在Eden分配\"><a href=\"#1-对象优先在Eden分配\" class=\"headerlink\" title=\"1. 对象优先在Eden分配\"></a>1. 对象优先在Eden分配</h3><ul>\n<li>对象优先在Eden新生代分配,内存不足将发生一次Minor GC</li>\n</ul>\n<h3 id=\"2-大对象直接进入老年代\"><a href=\"#2-大对象直接进入老年代\" class=\"headerlink\" title=\"2. 大对象直接进入老年代\"></a>2. 大对象直接进入老年代</h3><ul>\n<li><code>-XX:PretenureSizeThreshold</code>参数,令大于这个设置值的对象直接在老年代分配,避免大量内存复制</li>\n</ul>\n<h3 id=\"3-长期存活的对象将进入老年代\"><a href=\"#3-长期存活的对象将进入老年代\" class=\"headerlink\" title=\"3. 长期存活的对象将进入老年代\"></a>3. 长期存活的对象将进入老年代</h3><ul>\n<li>对象晋升老年代的年龄阈值,可以通过参数<code>-XX:MaxTenuringThreshold</code>设置,默认15,每次Minor GC对象没死+1</li>\n</ul>\n<h3 id=\"4-动态对象年龄判定\"><a href=\"#4-动态对象年龄判定\" class=\"headerlink\" title=\"4. 动态对象年龄判定\"></a>4. 动态对象年龄判定</h3><ul>\n<li>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半,年龄大于或等于该年龄的对象就可以直接进入老年代,无须等<br>到MaxTenuringThreshold中要求的年龄</li>\n</ul>\n<h3 id=\"5-空间分配担保\"><a href=\"#5-空间分配担保\" class=\"headerlink\" title=\"5. 空间分配担保\"></a>5. 空间分配担保</h3><ul>\n<li>Minor GC前先判断老年代可用空间是否大于新生代对象总空间,如果大于则确保安全,如果小于则查看HandlePromotionFailure设置的值是否<br>允许担保失败,若允许则会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小,如果大于,将尝试着进行一次Minor<br>GC,尽管这次Minor GC是有风险的;如果小于,或者HandlePromotionFailure设置不允许冒险,那这时也要改为进行一次Full GC.</li>\n</ul>\n<h3 id=\"八-Minor-GC、Major-GC与Full-GC\"><a href=\"#八-Minor-GC、Major-GC与Full-GC\" class=\"headerlink\" title=\"八. Minor GC、Major GC与Full GC\"></a>八. Minor GC、Major GC与Full GC</h3><ul>\n<li>Minor GC表示新生代GC、Major GC是指老年代GC、Full GC为全部堆内存GC。</li>\n<li>往往他们之间相互影响，相互触发</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-Java虚拟机内存区域\"><a href=\"#一-Java虚拟机内存区域\" class=\"headerlink\" title=\"一. Java虚拟机内存区域\"></a>一. Java虚拟机内存区域</h2><h3 id=\"1-运行时数据区\"><a href=\"#1-运行时数据区\" class=\"headerlink\" title=\"1. 运行时数据区\"></a>1. 运行时数据区</h3><p>   <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"java运行时数据区\"></p>\n<h3 id=\"2-程序计数器-Program-Counter-Register\"><a href=\"#2-程序计数器-Program-Counter-Register\" class=\"headerlink\" title=\"2. 程序计数器(Program Counter Register)\"></a>2. 程序计数器(Program Counter Register)</h3><ul>\n<li>1、程序计数器是线程内(每个线程都有唯一的、封闭的)一小块内存区域</li>\n<li>2、计数器指定的是当前虚拟机执行指令的地址</li>\n<li>3、当虚拟机执行的是Native方法时,计数器值为空(Undefined),此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code><br>   情况的区域.</li>\n</ul>\n<h3 id=\"3-Java虚拟机栈-Java-Virtual-Machine-Stacks\"><a href=\"#3-Java虚拟机栈-Java-Virtual-Machine-Stacks\" class=\"headerlink\" title=\"3. Java虚拟机栈(Java Virtual Machine Stacks)\"></a>3. Java虚拟机栈(Java Virtual Machine Stacks)</h3><ul>\n<li>1、虚拟机栈是线程内部的、封闭的</li>\n<li>2、虚拟机栈描述的是java方法执行的内存模型</li>\n<li>3、每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息</li>\n<li>4、java方法的执行就是入栈与出栈的过程</li>\n<li>5、如果虚拟机栈深度超出了虚拟机允许深度将会抛出<code>StackOverflowError</code>异常,现代虚拟机大多数支持动态扩展(也允许固定长度),当虚拟机申<br>   请扩展时申请不到足够的内存时,将会抛出<code>OutOfMemoryError</code>异常</li>\n</ul>\n<h3 id=\"4-本地方法栈-Native-Method-Stack\"><a href=\"#4-本地方法栈-Native-Method-Stack\" class=\"headerlink\" title=\"4. 本地方法栈(Native Method Stack)\"></a>4. 本地方法栈(Native Method Stack)</h3><ul>\n<li>1、为虚拟机调用本地Native方法提供服务</li>\n<li>2、也有虚拟机(譬如Sun HotSpot虚拟机)直接就把本地方法栈和虚拟机栈合二为一</li>\n<li>3、也会抛出<code>StackOverflowError</code>异常和<code>OutOfMemoryError</code>异常</li>\n</ul>\n<h3 id=\"5-Java堆-Java-Heap-GC堆\"><a href=\"#5-Java堆-Java-Heap-GC堆\" class=\"headerlink\" title=\"5. Java堆(Java Heap) GC堆\"></a>5. Java堆(Java Heap) GC堆</h3><ul>\n<li>1、线程共享的最大一块内存区域</li>\n<li>2、此内存区域的唯一目的就是存放对象实例,几乎所有的对象实例都在这里分配内存,虚拟机规范所有的对象实例与数据都在堆上分配</li>\n<li>3、随着JIT编译器的发展与逃逸分析技术逐渐成熟,栈上分配、 标量替换优化技术将会导致一些微妙的变化发生,所有的对象都分配在堆上也渐渐<br>   变得不是那么“绝对”了</li>\n</ul>\n<h3 id=\"6-方法区-Method-Area\"><a href=\"#6-方法区-Method-Area\" class=\"headerlink\" title=\"6. 方法区(Method Area)\"></a>6. 方法区(Method Area)</h3><ul>\n<li>1、存储已被虚拟机加载的类信息、 常量、 静态变量、 即时编译器编译后的代码等数据</li>\n<li>2、这区域的内存回收目标主要是针对常量池的回收和对类型的卸载</li>\n</ul>\n<h3 id=\"7-运行时常量池-Runtime-Constant-Pool\"><a href=\"#7-运行时常量池-Runtime-Constant-Pool\" class=\"headerlink\" title=\"7. 运行时常量池(Runtime Constant Pool)\"></a>7. 运行时常量池(Runtime Constant Pool)</h3><ul>\n<li>1、Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外,还有一项信息是常量池(Constant Pool Table),用于存放编译期生成<br>   的各种字面量和符号引用,这部分内容将在类加载后进入方法区的运行时常量池中存放</li>\n<li>2、<code>String.intern()</code>也会放入运行时常量池中</li>\n</ul>\n<h3 id=\"8-直接内存-Direct-Memory\"><a href=\"#8-直接内存-Direct-Memory\" class=\"headerlink\" title=\"8. 直接内存(Direct Memory)\"></a>8. 直接内存(Direct Memory)</h3><ul>\n<li>1、NIO的DirectByteBuffer对象使用直接内存,这样能在一些场景中显著提高性能,因为避免了在Java堆和Native堆中来回复制数据</li>\n</ul>\n<h2 id=\"二-Java对象\"><a href=\"#二-Java对象\" class=\"headerlink\" title=\"二. Java对象\"></a>二. Java对象</h2><h3 id=\"1-对象的创建\"><a href=\"#1-对象的创建\" class=\"headerlink\" title=\"1. 对象的创建\"></a>1. 对象的创建</h3><ul>\n<li>1、指针碰撞(Bump the Pointer)</li>\n<li>2、空闲列表(Free List)</li>\n</ul>\n<h3 id=\"2-对象再内存中的布局\"><a href=\"#2-对象再内存中的布局\" class=\"headerlink\" title=\"2. 对象再内存中的布局\"></a>2. 对象再内存中的布局</h3><ul>\n<li>1、分为3块区域:对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)</li>\n<li>2、对象头包含:轻量级锁定、 重量级锁定、 GC标记、 可偏向</li>\n</ul>\n<h3 id=\"3-对象的访问定位\"><a href=\"#3-对象的访问定位\" class=\"headerlink\" title=\"3. 对象的访问定位\"></a>3. 对象的访问定位</h3><ul>\n<li>1、句柄访问<br> <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE.png\" alt=\"句柄访问对象\"></li>\n<li>2、直接指针访问<br> <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE.png\" alt=\"直接指针访问\">  </li>\n</ul>\n<h2 id=\"三-垃圾回收与内存分配\"><a href=\"#三-垃圾回收与内存分配\" class=\"headerlink\" title=\"三. 垃圾回收与内存分配\"></a>三. 垃圾回收与内存分配</h2><h3 id=\"1-引用计数法-虚拟机未使用\"><a href=\"#1-引用计数法-虚拟机未使用\" class=\"headerlink\" title=\"1. 引用计数法(虚拟机未使用)\"></a>1. 引用计数法(虚拟机未使用)</h3><ul>\n<li>1、互相引用将无法得到正常回收</li>\n</ul>\n<h3 id=\"2-可达性分析算法-Reachability-Analysis\"><a href=\"#2-可达性分析算法-Reachability-Analysis\" class=\"headerlink\" title=\"2. 可达性分析算法(Reachability Analysis)\"></a>2. 可达性分析算法(Reachability Analysis)</h3><ul>\n<li>1、通过GC Root节点向下搜索,搜索走过的路径称为引用链(Reference Chain),当一个对象没有一个引用链经过,则表示该对象是不可用的,可以回收</li>\n<li>2、可作为GC Root对象的有:   <ul>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象 </li>\n<li>方法区中类静态属性引用的对象  </li>\n<li>方法区中常量引用的对象  </li>\n<li>本地方法栈中JNI(即一般说的Native方法)引用的对象  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3. 引用\"></a>3. 引用</h3><ul>\n<li>1、<strong>强引用(Strong Reference)</strong>: new 关键字</li>\n<li>2、<strong>软引用(Soft Reference)</strong>:当要发生内存溢出时会将软引用对象加入回收队列中</li>\n<li>3、<strong>弱引用(Weak Reference)</strong>:只能活到下次GC前</li>\n<li>4、<strong>虚引用(Phantom Reference)</strong>:幽灵引用或者幻影引用</li>\n</ul>\n<h3 id=\"4-回收方法区\"><a href=\"#4-回收方法区\" class=\"headerlink\" title=\"4. 回收方法区\"></a>4. 回收方法区</h3><ul>\n<li>1、主要回收永久代的废弃的常量和无用的类   </li>\n<li>2、无用的类判定条件:  <ul>\n<li>该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例.</li>\n<li>加载该类的ClassLoader已经被回收.</li>\n<li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用,无法在任何地方通过反射访问该类的方法.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四-垃圾回收算法\"><a href=\"#四-垃圾回收算法\" class=\"headerlink\" title=\"四. 垃圾回收算法\"></a>四. 垃圾回收算法</h2><h3 id=\"1-标记-清除算法-Mark-Sweep\"><a href=\"#1-标记-清除算法-Mark-Sweep\" class=\"headerlink\" title=\"1. 标记-清除算法(Mark-Sweep)\"></a>1. 标记-清除算法(Mark-Sweep)</h3><ul>\n<li>1、标记与清除2个过程</li>\n<li>2、标记与清除效率都不高,还可能产生大量空间碎片导致大对象找不到连续可用的空间</li>\n</ul>\n<h3 id=\"2-复制算法-Copying\"><a href=\"#2-复制算法-Copying\" class=\"headerlink\" title=\"2. 复制算法(Copying)\"></a>2. 复制算法(Copying)</h3><ul>\n<li>1、将堆内存分为大小相等的2块,每次只是用其中一块,当一块内存用完时将还活着的对象移动到另一块,然后清理该块内存</li>\n<li>2、消除了内存碎片化,代价是牺牲了一半可用堆内存</li>\n<li>3、商用虚拟机都采用这种,但并不是按1:1来划分空间而是将内存分为一块较大的Eden空间和两块较小的Survivor空间,每次使用Eden和其中<br>   一块Survivor.当回收时,将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上,最后清理掉Eden和刚才用过的<br>   Survivor空间. HotSpot虚拟机默认Eden和Survivor的大小比例是8:1,也就是每次新生代中可用内存空间为整个新生代容量的<br>   90%(80%+10%),只有10%的内存会被“浪费”. 当然,98%的对象可回收只是一般场景下的数据,我们没有办法保证每次回收都只有不多于<br>   10%的对象存活,当Survivor空间不够用时,需要依赖其他内存(这里指老年代)进行分配担保(Handle Promotion).</li>\n<li>4、当存活率高时将会出现大量的内存复制操作还有可能导致进行分配担保</li>\n</ul>\n<h3 id=\"3-标记-整理算法-Mark-Compact\"><a href=\"#3-标记-整理算法-Mark-Compact\" class=\"headerlink\" title=\"3. 标记-整理算法(Mark-Compact)\"></a>3. 标记-整理算法(Mark-Compact)</h3><ul>\n<li>1、老年代内存,标记可回收对象之后,将存活的对象移向一端,然后清理掉端边界以外的内存</li>\n</ul>\n<h3 id=\"4-分代收集算法-Generational-Collection\"><a href=\"#4-分代收集算法-Generational-Collection\" class=\"headerlink\" title=\"4. 分代收集算法(Generational Collection)\"></a>4. 分代收集算法(Generational Collection)</h3><ul>\n<li>1、将堆内存分为老年代和新生代</li>\n<li>2、老年代对象存活率高,再采用标记-清理或标记-整理算法进行GC</li>\n<li>3、新生代存活率低,采用复制算法将少量的存活对象进行复制操作   </li>\n</ul>\n<h2 id=\"五-HotSpot算法实现\"><a href=\"#五-HotSpot算法实现\" class=\"headerlink\" title=\"五. HotSpot算法实现\"></a>五. HotSpot算法实现</h2><h3 id=\"1-枚举根节点\"><a href=\"#1-枚举根节点\" class=\"headerlink\" title=\"1. 枚举根节点\"></a>1. 枚举根节点</h3><ul>\n<li>1、虚拟机内OopMap存有对象引用信息，可以得到GC Root根节点</li>\n</ul>\n<h3 id=\"2-安全点\"><a href=\"#2-安全点\" class=\"headerlink\" title=\"2. 安全点\"></a>2. 安全点</h3><ul>\n<li>1、虚拟机会在如方法调用、 循环跳转、 异常跳转等，所以具有这些功能的指令才会产生Safepoint</li>\n<li>2、中断方式  <ul>\n<li>抢先式中断(基本弃用): 给出中断指令，有线程发现未到达安全点则继续执行至下一个安全点</li>\n<li>主动式中断: 给定一个中断标志，每个线程都会去轮询该标志，为真时中断</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-安全区域\"><a href=\"#3-安全区域\" class=\"headerlink\" title=\"3. 安全区域\"></a>3. 安全区域</h3><ul>\n<li>1、安全区域是指在一段代码片段之中，引用关系不会发生变化。 在这个区域中的任意地方开始GC都是安全的</li>\n<li>2、在线程执行到安全区域时首先会标记自己进入安全区域，出安全区域前必须等到枚举根节点或整个GC完成，没有则都等到可以出安全区域信号为止</li>\n</ul>\n<h2 id=\"六-垃圾回收器\"><a href=\"#六-垃圾回收器\" class=\"headerlink\" title=\"六. 垃圾回收器\"></a>六. 垃圾回收器</h2><p>   <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/gc/HotSpot%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png\" alt=\"HotSpot虚拟机垃圾回收器\"></p>\n<h3 id=\"1-Serial收集器\"><a href=\"#1-Serial收集器\" class=\"headerlink\" title=\"1. Serial收集器\"></a>1. Serial收集器</h3><ul>\n<li>1、JDK1.3.1之前是虚拟机新生代收集的唯一选择</li>\n<li>2、单线程、Stop The World(STW)、复制算法</li>\n<li>3、Client模式下新生代默认的垃圾收集器</li>\n</ul>\n<h3 id=\"2-PerNew收集器\"><a href=\"#2-PerNew收集器\" class=\"headerlink\" title=\"2. PerNew收集器\"></a>2. PerNew收集器</h3><ul>\n<li>1、Serial收集器的多线程版,其他一样</li>\n<li>2、是许多虚拟机Server模式下新生代的首选收集器</li>\n<li>3、ParNew收集器也是使用<code>-XX:+UseConcMarkSweepGC</code>选项后的默认新生代收集器,也可以使用<code>-XX:+UseParNewGC</code>选项来强制指定它</li>\n<li>4、单核下效果不一定比Serial效果好,多核更适合,<code>-XX:ParallelGCThreads</code>参数来限制垃圾收集的线程数</li>\n</ul>\n<h3 id=\"3-Parallel-Scavenge收集器\"><a href=\"#3-Parallel-Scavenge收集器\" class=\"headerlink\" title=\"3. Parallel Scavenge收集器\"></a>3. Parallel Scavenge收集器</h3><ul>\n<li>1、新生代收集器,采用复制算法,并行的多线程收集器,吞吐量优先   </li>\n<li>2、追求可控的吞吐量, 吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)</li>\n<li>3、控制最大垃圾收集停顿时间的<code>-XX:MaxGCPauseMillis</code>参数以及直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>参数.</li>\n</ul>\n<h3 id=\"4-Serial-Old收集器\"><a href=\"#4-Serial-Old收集器\" class=\"headerlink\" title=\"4. Serial Old收集器\"></a>4. Serial Old收集器</h3><ul>\n<li>1、Serial老年代版本、单线程、标记-整理算法</li>\n<li>2、给Client模式下虚拟机用</li>\n</ul>\n<h3 id=\"5-Parallel-Old收集器\"><a href=\"#5-Parallel-Old收集器\" class=\"headerlink\" title=\"5. Parallel Old收集器\"></a>5. Parallel Old收集器</h3><ul>\n<li>1、Parallel Scavenge收集器的老年代版本,使用多线程和“标记-整理”算法,JDK1.6开始提供</li>\n</ul>\n<h3 id=\"6-CMS收集器\"><a href=\"#6-CMS收集器\" class=\"headerlink\" title=\"6. CMS收集器\"></a>6. CMS收集器</h3><ul>\n<li>1、CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器. </li>\n<li>2、标记-清除算法实现  <ul>\n<li>初始标记(CMS initial mark)，有短时的STW</li>\n<li>并发标记(CMS concurrent mark)</li>\n<li>重新标记(CMS remark)，有短时的STW</li>\n<li>并发清除(CMS concurrent sweep)</li>\n</ul>\n</li>\n<li>3、并发收集、 低停顿,Sun公司的一些官方文档中也称之为并发低停顿收集器</li>\n<li>4、<code>-XX：+UseCMSCompactAtFullCollection</code>默认开启，表示CMS进行Full GC的时候开启内存碎片的合并整理，该过程无法并发停顿时间变长</li>\n<li>5、<code>-XX：CMSFullGCsBeforeCompaction</code>表示执行多少次不压缩的Full GC后跟着来一次压缩的Full GC，默认是0，每次都压缩</li>\n</ul>\n<h3 id=\"7-G1收集器\"><a href=\"#7-G1收集器\" class=\"headerlink\" title=\"7. G1收集器\"></a>7. G1收集器</h3><ul>\n<li>1、G1(Garbage-First)收集器是当今收集器技术发展的最前沿成果之一,面向服务端应用 </li>\n<li>2、特点: <ul>\n<li>并发与并行:充分利用cpu与多核等硬件优势</li>\n<li>分代收集:</li>\n<li>空间整理:标记-整理算法</li>\n<li>可预测的停顿:将堆内存分为多个区域(Region),还保留有老年代与新生代</li>\n</ul>\n</li>\n<li>3、不计算维护Remembered Set的操作,G1收集器的运作大致可划分为以下几个步骤:  <ul>\n<li>初始标记(Initial Marking)</li>\n<li>并发标记(Concurrent Marking)</li>\n<li>最终标记(Final Marking)</li>\n<li>筛选回收(Live Data Counting and Evacuation) </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-垃圾收集器参数\"><a href=\"#8-垃圾收集器参数\" class=\"headerlink\" title=\"8. 垃圾收集器参数\"></a>8. 垃圾收集器参数</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">UseSerialGC</td>\n<td style=\"text-align:left\">Client模式下默认,使用Serial+Serial Old组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseParNewGC</td>\n<td style=\"text-align:left\">ParNew+Serial Old组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseConMarkSweepGC</td>\n<td style=\"text-align:left\">ParNew+CMS+Serial Old组合,Serial Old作为CMS失败后备用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseParallelGC</td>\n<td style=\"text-align:left\">Server模式默认,Parallel Scavenge+Serial Old(PS Mark Sweep)组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseParallelOldGC</td>\n<td style=\"text-align:left\">Parallel Scavenge+Parallel Old组合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UseG1GC</td>\n<td style=\"text-align:left\">使用G1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"七-内存分配与回收策略\"><a href=\"#七-内存分配与回收策略\" class=\"headerlink\" title=\"七. 内存分配与回收策略\"></a>七. 内存分配与回收策略</h2><h3 id=\"1-对象优先在Eden分配\"><a href=\"#1-对象优先在Eden分配\" class=\"headerlink\" title=\"1. 对象优先在Eden分配\"></a>1. 对象优先在Eden分配</h3><ul>\n<li>对象优先在Eden新生代分配,内存不足将发生一次Minor GC</li>\n</ul>\n<h3 id=\"2-大对象直接进入老年代\"><a href=\"#2-大对象直接进入老年代\" class=\"headerlink\" title=\"2. 大对象直接进入老年代\"></a>2. 大对象直接进入老年代</h3><ul>\n<li><code>-XX:PretenureSizeThreshold</code>参数,令大于这个设置值的对象直接在老年代分配,避免大量内存复制</li>\n</ul>\n<h3 id=\"3-长期存活的对象将进入老年代\"><a href=\"#3-长期存活的对象将进入老年代\" class=\"headerlink\" title=\"3. 长期存活的对象将进入老年代\"></a>3. 长期存活的对象将进入老年代</h3><ul>\n<li>对象晋升老年代的年龄阈值,可以通过参数<code>-XX:MaxTenuringThreshold</code>设置,默认15,每次Minor GC对象没死+1</li>\n</ul>\n<h3 id=\"4-动态对象年龄判定\"><a href=\"#4-动态对象年龄判定\" class=\"headerlink\" title=\"4. 动态对象年龄判定\"></a>4. 动态对象年龄判定</h3><ul>\n<li>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半,年龄大于或等于该年龄的对象就可以直接进入老年代,无须等<br>到MaxTenuringThreshold中要求的年龄</li>\n</ul>\n<h3 id=\"5-空间分配担保\"><a href=\"#5-空间分配担保\" class=\"headerlink\" title=\"5. 空间分配担保\"></a>5. 空间分配担保</h3><ul>\n<li>Minor GC前先判断老年代可用空间是否大于新生代对象总空间,如果大于则确保安全,如果小于则查看HandlePromotionFailure设置的值是否<br>允许担保失败,若允许则会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小,如果大于,将尝试着进行一次Minor<br>GC,尽管这次Minor GC是有风险的;如果小于,或者HandlePromotionFailure设置不允许冒险,那这时也要改为进行一次Full GC.</li>\n</ul>\n<h3 id=\"八-Minor-GC、Major-GC与Full-GC\"><a href=\"#八-Minor-GC、Major-GC与Full-GC\" class=\"headerlink\" title=\"八. Minor GC、Major GC与Full GC\"></a>八. Minor GC、Major GC与Full GC</h3><ul>\n<li>Minor GC表示新生代GC、Major GC是指老年代GC、Full GC为全部堆内存GC。</li>\n<li>往往他们之间相互影响，相互触发</li>\n</ul>\n"},{"layout":"post","title":"Java Memory Model","thumbnail":"/images/material/super_computer.jpg","date":"2018-06-15T03:11:27.000Z","author":"Crab2Died","_content":"\n## 1. 内存模型(JMM)\n ![内存模型](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png)\n\n## 2. 内存间的交互操作\n### 2.1. 定义操作\n   * **lock(锁定)**：作用于主内存的变量,它把一个变量标识为一条线程独占的状态.\n   * **unlock(解锁**)：作用于主内存的变量,它把一个处于锁定状态的变量释放出来,释放后的变量才可以被其他线程锁定.\n   * **read(读取**)：作用于主内存的变量,它把一个变量的值从主内存传输到线程的工作内存中,以便随后的load动作使用.\n   * **load(载入)**：作用于工作内存的变量,它把read操作从主内存中得到的变量值放入工作内存的变量副本中.\n   * use(使用)：作用于工作内存的变量,它把工作内存中一个变量的值传递给执行引擎,每当虚拟机遇到一个需要使用到 变量的值的字节码指令时将会执行这个操作.\n   * **assign(赋值)**：作用于工作内存的变量,它把一个从执行引擎接收到的值赋给工作内存的变量,每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作.\n   * **store(存储)**：作用于工作内存的变量,它把工作内存中一个变量的值传送到主内存中,以便随后的write操作使用.\n   * **write(写入)**：作用于主内存的变量,它把store操作从工作内存中得到的变量的值放入主内存的变量中.\n   \n### 2.2. 约束条件\n   1. read和load、store和write必须保证顺序操作,不能单独出现,但不需要连续操作,中间可隔有其他操作\n   2. 不允许一个线程丢弃它的最近的assign操作,即变量在工作内存中改变了之后必须把该变化同步回主内存.\n   3. 不允许一个线程无原因地(没有发生过任何assign操作)把数据从线程的工作内存同步回主内存中.\n   4. 一个新的变量只能在主内存中“诞生”,不允许在工作内存中直接使用一个未被初始化(load或assign)的变量,换句话说,就是对一个变量实施use、\n   store操作之前,必须先执行过了assign和load操作.\n   5. 一个变量在同一个时刻只允许一条线程对其进行lock操作,但lock操作可以被同一条线程重复执行多次,多次执行lock后,只有执行相同次数的\n   unlock操作,变量才会被解锁\n   6. 如果对一个变量执行lock操作,那将会清空工作内存中此变量的值,在执行引擎使用这个变量前,需要重新执行load或assign操作初始化变量的值.\n   7. 如果一个变量事先没有被lock操作锁定,那就不允许对它执行unlock操作,也不允许去unlock一个被其他线程锁定住的变量.\n   8. 对一个变量执行unlock操作之前,必须先把此变量同步回主内存中(执行store、 write操作)\n   \n### 2.3. volatile\n   &emsp;&emsp;假定T表示一个线程,V和W分别表示两个volatile型变量,那么在进行read、 load、 use、 assign、store和write操作时需要满足如下规则:  \n   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是load的时候,线程T才能对变量V执行use动作;并且,只有当线程T对变量V执行的后一个动作是use\n   的时候,线程T才能对变量V执行load动作. 线程T对变量V的use动作可以认为是和线程T对变量V的load、 read动作相关联,必须连续一起出现\n   (这条规则要求在工作内存中,每次使用V前都必须先从主内存刷新最新的值,用于保证能看见其他线程对变量V所做的修改后的值).  \n   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是assign的时候,线程T才能对变量V执行store动作;并且,只有当线程T对变量V执行的后一个动作\n   是store的时候,线程T才能对变量V执行assign动作. 线程T对变量V的assign动作可以认为是和线程T对变量V的store、 write动作相关联,必须连续一\n   起出现(这条规则要求在工作内存中,每次修改V后都必须立刻同步回主内存中,用于保证其他线程可以看到自己对变量V所做的修改)  \n   &emsp;&emsp;假定动作A是线程T对变量V实施的use或assign动作,假定动作F是和动作A相关联的load或store动作,假定动作P是和动作F相应的对变量V\n   的read或write动作;类似的,假定动作B是线程T对变量W实施的use或assign动作,假定动作G是和动作B相关联的load或store动作,假定动作\n   Q是和动作G相应的对变量W的read或write动作. 如果A先于B,那么P先于Q(这条规则要求volatile修饰的变量不会被指令重排序优化,保证代码的执行\n   顺序与程序的顺序相同).  \n   &emsp;&emsp;volatile不仅保证了共享变量的可见性，还通过内存屏障保证了代码执行顺序与程序顺序相同，通过内存屏障来使变量不被指令重排优化\n   \n### 2.4. long和double的非原子性协定\n  读写操作可分为2次32位操作,所以一定不是原子操作  \n  **_注：现在商用虚拟机本身几乎都已经实现了原子操作,所以不用volatile修饰符_**\n  \n### 2.5 原子性\n  变量操作的read、load、use、assign、store、write不保证了原子性\n  通过synchronized对lock、unlock操作也保证了原子性\n  \n### 2.6 可见性\n  volatile保证在读取共享变量之前去主内存刷最新值，还保证了最新值能及时同步至主内存\n  \n### 2.7 有序性\n  在本线程内观察所有操作都是有序的，在另一个线程观察所有操作都是无序的\n  \n### 2.8 先发性\n  先发生的线程对修改了共享变量的值、发送了消息或调用了方法会被后发生的线程所观察到  \n\n### 2.9 先行发生(happens-before)规则\n   《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。 \n  - 1、程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。\n  - 2、监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。\n  - 3、volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。\n  - 4、传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。\n  - 5、start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。\n  - 6、join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。\n\n## 3. 常见比较\n### 3.1 volatile与synchronized比较\n  - 1、被volatile描述的共享变量通过内存屏障是代码不被指令重排优化，从而保证了共享变量在线程间的可见性，更新变量时会及时的将最新值\n  同步至主内存，读变量时会及时的去主内存获取最新值，volatile只能修饰变量，只保证可见性，不保证原子性，不能用来同步。\n  - 2、synchronized是通过对象头的锁标志位来实现加锁与释放锁，不仅保证可见性，还保证了原子性，只有获得了对象锁的线程才能进入临界区，\n  其他线程会阻塞等待锁释放后再争抢锁。\n \n### 3.2 Lock(ReentrantLock)与synchronized比较\n  - 1、synchronized是JAVA关键字，Lock是一个java接口，ReentrantLock实现了该接口\n  - 2、Lock锁需要在finally{}代码里手动释放，synchronized会自动释放锁\n  - 3、Lock根据实现不同有多种锁类型，如公平锁、非公平锁(默认非公平锁)\n  - 4、性能方面，在锁竞争很大的情况下Lock性能更优于synchronized\n","source":"_posts/java-memory-model.md","raw":"---\nlayout: post\ntitle: Java Memory Model\nthumbnail: /images/material/super_computer.jpg\ndate: 2018-06-15 11:11:27 +0800\nauthor: Crab2Died\ncategories: Java\ntags: \n  - JVM\n  - Java\n  - JMM\n---\n\n## 1. 内存模型(JMM)\n ![内存模型](https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png)\n\n## 2. 内存间的交互操作\n### 2.1. 定义操作\n   * **lock(锁定)**：作用于主内存的变量,它把一个变量标识为一条线程独占的状态.\n   * **unlock(解锁**)：作用于主内存的变量,它把一个处于锁定状态的变量释放出来,释放后的变量才可以被其他线程锁定.\n   * **read(读取**)：作用于主内存的变量,它把一个变量的值从主内存传输到线程的工作内存中,以便随后的load动作使用.\n   * **load(载入)**：作用于工作内存的变量,它把read操作从主内存中得到的变量值放入工作内存的变量副本中.\n   * use(使用)：作用于工作内存的变量,它把工作内存中一个变量的值传递给执行引擎,每当虚拟机遇到一个需要使用到 变量的值的字节码指令时将会执行这个操作.\n   * **assign(赋值)**：作用于工作内存的变量,它把一个从执行引擎接收到的值赋给工作内存的变量,每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作.\n   * **store(存储)**：作用于工作内存的变量,它把工作内存中一个变量的值传送到主内存中,以便随后的write操作使用.\n   * **write(写入)**：作用于主内存的变量,它把store操作从工作内存中得到的变量的值放入主内存的变量中.\n   \n### 2.2. 约束条件\n   1. read和load、store和write必须保证顺序操作,不能单独出现,但不需要连续操作,中间可隔有其他操作\n   2. 不允许一个线程丢弃它的最近的assign操作,即变量在工作内存中改变了之后必须把该变化同步回主内存.\n   3. 不允许一个线程无原因地(没有发生过任何assign操作)把数据从线程的工作内存同步回主内存中.\n   4. 一个新的变量只能在主内存中“诞生”,不允许在工作内存中直接使用一个未被初始化(load或assign)的变量,换句话说,就是对一个变量实施use、\n   store操作之前,必须先执行过了assign和load操作.\n   5. 一个变量在同一个时刻只允许一条线程对其进行lock操作,但lock操作可以被同一条线程重复执行多次,多次执行lock后,只有执行相同次数的\n   unlock操作,变量才会被解锁\n   6. 如果对一个变量执行lock操作,那将会清空工作内存中此变量的值,在执行引擎使用这个变量前,需要重新执行load或assign操作初始化变量的值.\n   7. 如果一个变量事先没有被lock操作锁定,那就不允许对它执行unlock操作,也不允许去unlock一个被其他线程锁定住的变量.\n   8. 对一个变量执行unlock操作之前,必须先把此变量同步回主内存中(执行store、 write操作)\n   \n### 2.3. volatile\n   &emsp;&emsp;假定T表示一个线程,V和W分别表示两个volatile型变量,那么在进行read、 load、 use、 assign、store和write操作时需要满足如下规则:  \n   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是load的时候,线程T才能对变量V执行use动作;并且,只有当线程T对变量V执行的后一个动作是use\n   的时候,线程T才能对变量V执行load动作. 线程T对变量V的use动作可以认为是和线程T对变量V的load、 read动作相关联,必须连续一起出现\n   (这条规则要求在工作内存中,每次使用V前都必须先从主内存刷新最新的值,用于保证能看见其他线程对变量V所做的修改后的值).  \n   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是assign的时候,线程T才能对变量V执行store动作;并且,只有当线程T对变量V执行的后一个动作\n   是store的时候,线程T才能对变量V执行assign动作. 线程T对变量V的assign动作可以认为是和线程T对变量V的store、 write动作相关联,必须连续一\n   起出现(这条规则要求在工作内存中,每次修改V后都必须立刻同步回主内存中,用于保证其他线程可以看到自己对变量V所做的修改)  \n   &emsp;&emsp;假定动作A是线程T对变量V实施的use或assign动作,假定动作F是和动作A相关联的load或store动作,假定动作P是和动作F相应的对变量V\n   的read或write动作;类似的,假定动作B是线程T对变量W实施的use或assign动作,假定动作G是和动作B相关联的load或store动作,假定动作\n   Q是和动作G相应的对变量W的read或write动作. 如果A先于B,那么P先于Q(这条规则要求volatile修饰的变量不会被指令重排序优化,保证代码的执行\n   顺序与程序的顺序相同).  \n   &emsp;&emsp;volatile不仅保证了共享变量的可见性，还通过内存屏障保证了代码执行顺序与程序顺序相同，通过内存屏障来使变量不被指令重排优化\n   \n### 2.4. long和double的非原子性协定\n  读写操作可分为2次32位操作,所以一定不是原子操作  \n  **_注：现在商用虚拟机本身几乎都已经实现了原子操作,所以不用volatile修饰符_**\n  \n### 2.5 原子性\n  变量操作的read、load、use、assign、store、write不保证了原子性\n  通过synchronized对lock、unlock操作也保证了原子性\n  \n### 2.6 可见性\n  volatile保证在读取共享变量之前去主内存刷最新值，还保证了最新值能及时同步至主内存\n  \n### 2.7 有序性\n  在本线程内观察所有操作都是有序的，在另一个线程观察所有操作都是无序的\n  \n### 2.8 先发性\n  先发生的线程对修改了共享变量的值、发送了消息或调用了方法会被后发生的线程所观察到  \n\n### 2.9 先行发生(happens-before)规则\n   《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。 \n  - 1、程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。\n  - 2、监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。\n  - 3、volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。\n  - 4、传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。\n  - 5、start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。\n  - 6、join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。\n\n## 3. 常见比较\n### 3.1 volatile与synchronized比较\n  - 1、被volatile描述的共享变量通过内存屏障是代码不被指令重排优化，从而保证了共享变量在线程间的可见性，更新变量时会及时的将最新值\n  同步至主内存，读变量时会及时的去主内存获取最新值，volatile只能修饰变量，只保证可见性，不保证原子性，不能用来同步。\n  - 2、synchronized是通过对象头的锁标志位来实现加锁与释放锁，不仅保证可见性，还保证了原子性，只有获得了对象锁的线程才能进入临界区，\n  其他线程会阻塞等待锁释放后再争抢锁。\n \n### 3.2 Lock(ReentrantLock)与synchronized比较\n  - 1、synchronized是JAVA关键字，Lock是一个java接口，ReentrantLock实现了该接口\n  - 2、Lock锁需要在finally{}代码里手动释放，synchronized会自动释放锁\n  - 3、Lock根据实现不同有多种锁类型，如公平锁、非公平锁(默认非公平锁)\n  - 4、性能方面，在锁竞争很大的情况下Lock性能更优于synchronized\n","slug":"java-memory-model","published":1,"updated":"2018-12-12T15:46:37.695Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vj7000euoilgbs4wvjs","content":"<h2 id=\"1-内存模型-JMM\"><a href=\"#1-内存模型-JMM\" class=\"headerlink\" title=\"1. 内存模型(JMM)\"></a>1. 内存模型(JMM)</h2><p> <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png\" alt=\"内存模型\"></p>\n<h2 id=\"2-内存间的交互操作\"><a href=\"#2-内存间的交互操作\" class=\"headerlink\" title=\"2. 内存间的交互操作\"></a>2. 内存间的交互操作</h2><h3 id=\"2-1-定义操作\"><a href=\"#2-1-定义操作\" class=\"headerlink\" title=\"2.1. 定义操作\"></a>2.1. 定义操作</h3><ul>\n<li><strong>lock(锁定)</strong>：作用于主内存的变量,它把一个变量标识为一条线程独占的状态.</li>\n<li><strong>unlock(解锁</strong>)：作用于主内存的变量,它把一个处于锁定状态的变量释放出来,释放后的变量才可以被其他线程锁定.</li>\n<li><strong>read(读取</strong>)：作用于主内存的变量,它把一个变量的值从主内存传输到线程的工作内存中,以便随后的load动作使用.</li>\n<li><strong>load(载入)</strong>：作用于工作内存的变量,它把read操作从主内存中得到的变量值放入工作内存的变量副本中.</li>\n<li>use(使用)：作用于工作内存的变量,它把工作内存中一个变量的值传递给执行引擎,每当虚拟机遇到一个需要使用到 变量的值的字节码指令时将会执行这个操作.</li>\n<li><strong>assign(赋值)</strong>：作用于工作内存的变量,它把一个从执行引擎接收到的值赋给工作内存的变量,每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作.</li>\n<li><strong>store(存储)</strong>：作用于工作内存的变量,它把工作内存中一个变量的值传送到主内存中,以便随后的write操作使用.</li>\n<li><strong>write(写入)</strong>：作用于主内存的变量,它把store操作从工作内存中得到的变量的值放入主内存的变量中.</li>\n</ul>\n<h3 id=\"2-2-约束条件\"><a href=\"#2-2-约束条件\" class=\"headerlink\" title=\"2.2. 约束条件\"></a>2.2. 约束条件</h3><ol>\n<li>read和load、store和write必须保证顺序操作,不能单独出现,但不需要连续操作,中间可隔有其他操作</li>\n<li>不允许一个线程丢弃它的最近的assign操作,即变量在工作内存中改变了之后必须把该变化同步回主内存.</li>\n<li>不允许一个线程无原因地(没有发生过任何assign操作)把数据从线程的工作内存同步回主内存中.</li>\n<li>一个新的变量只能在主内存中“诞生”,不允许在工作内存中直接使用一个未被初始化(load或assign)的变量,换句话说,就是对一个变量实施use、<br>store操作之前,必须先执行过了assign和load操作.</li>\n<li>一个变量在同一个时刻只允许一条线程对其进行lock操作,但lock操作可以被同一条线程重复执行多次,多次执行lock后,只有执行相同次数的<br>unlock操作,变量才会被解锁</li>\n<li>如果对一个变量执行lock操作,那将会清空工作内存中此变量的值,在执行引擎使用这个变量前,需要重新执行load或assign操作初始化变量的值.</li>\n<li>如果一个变量事先没有被lock操作锁定,那就不允许对它执行unlock操作,也不允许去unlock一个被其他线程锁定住的变量.</li>\n<li>对一个变量执行unlock操作之前,必须先把此变量同步回主内存中(执行store、 write操作)</li>\n</ol>\n<h3 id=\"2-3-volatile\"><a href=\"#2-3-volatile\" class=\"headerlink\" title=\"2.3. volatile\"></a>2.3. volatile</h3><p>   &emsp;&emsp;假定T表示一个线程,V和W分别表示两个volatile型变量,那么在进行read、 load、 use、 assign、store和write操作时需要满足如下规则:<br>   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是load的时候,线程T才能对变量V执行use动作;并且,只有当线程T对变量V执行的后一个动作是use<br>   的时候,线程T才能对变量V执行load动作. 线程T对变量V的use动作可以认为是和线程T对变量V的load、 read动作相关联,必须连续一起出现<br>   (这条规则要求在工作内存中,每次使用V前都必须先从主内存刷新最新的值,用于保证能看见其他线程对变量V所做的修改后的值).<br>   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是assign的时候,线程T才能对变量V执行store动作;并且,只有当线程T对变量V执行的后一个动作<br>   是store的时候,线程T才能对变量V执行assign动作. 线程T对变量V的assign动作可以认为是和线程T对变量V的store、 write动作相关联,必须连续一<br>   起出现(这条规则要求在工作内存中,每次修改V后都必须立刻同步回主内存中,用于保证其他线程可以看到自己对变量V所做的修改)<br>   &emsp;&emsp;假定动作A是线程T对变量V实施的use或assign动作,假定动作F是和动作A相关联的load或store动作,假定动作P是和动作F相应的对变量V<br>   的read或write动作;类似的,假定动作B是线程T对变量W实施的use或assign动作,假定动作G是和动作B相关联的load或store动作,假定动作<br>   Q是和动作G相应的对变量W的read或write动作. 如果A先于B,那么P先于Q(这条规则要求volatile修饰的变量不会被指令重排序优化,保证代码的执行<br>   顺序与程序的顺序相同).<br>   &emsp;&emsp;volatile不仅保证了共享变量的可见性，还通过内存屏障保证了代码执行顺序与程序顺序相同，通过内存屏障来使变量不被指令重排优化</p>\n<h3 id=\"2-4-long和double的非原子性协定\"><a href=\"#2-4-long和double的非原子性协定\" class=\"headerlink\" title=\"2.4. long和double的非原子性协定\"></a>2.4. long和double的非原子性协定</h3><p>  读写操作可分为2次32位操作,所以一定不是原子操作<br>  <strong><em>注：现在商用虚拟机本身几乎都已经实现了原子操作,所以不用volatile修饰符</em></strong></p>\n<h3 id=\"2-5-原子性\"><a href=\"#2-5-原子性\" class=\"headerlink\" title=\"2.5 原子性\"></a>2.5 原子性</h3><p>  变量操作的read、load、use、assign、store、write不保证了原子性<br>  通过synchronized对lock、unlock操作也保证了原子性</p>\n<h3 id=\"2-6-可见性\"><a href=\"#2-6-可见性\" class=\"headerlink\" title=\"2.6 可见性\"></a>2.6 可见性</h3><p>  volatile保证在读取共享变量之前去主内存刷最新值，还保证了最新值能及时同步至主内存</p>\n<h3 id=\"2-7-有序性\"><a href=\"#2-7-有序性\" class=\"headerlink\" title=\"2.7 有序性\"></a>2.7 有序性</h3><p>  在本线程内观察所有操作都是有序的，在另一个线程观察所有操作都是无序的</p>\n<h3 id=\"2-8-先发性\"><a href=\"#2-8-先发性\" class=\"headerlink\" title=\"2.8 先发性\"></a>2.8 先发性</h3><p>  先发生的线程对修改了共享变量的值、发送了消息或调用了方法会被后发生的线程所观察到  </p>\n<h3 id=\"2-9-先行发生-happens-before-规则\"><a href=\"#2-9-先行发生-happens-before-规则\" class=\"headerlink\" title=\"2.9 先行发生(happens-before)规则\"></a>2.9 先行发生(happens-before)规则</h3><p>   《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。 </p>\n<ul>\n<li>1、程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li>\n<li>2、监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li>\n<li>3、volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li>\n<li>4、传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li>\n<li>5、start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。</li>\n<li>6、join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li>\n</ul>\n<h2 id=\"3-常见比较\"><a href=\"#3-常见比较\" class=\"headerlink\" title=\"3. 常见比较\"></a>3. 常见比较</h2><h3 id=\"3-1-volatile与synchronized比较\"><a href=\"#3-1-volatile与synchronized比较\" class=\"headerlink\" title=\"3.1 volatile与synchronized比较\"></a>3.1 volatile与synchronized比较</h3><ul>\n<li>1、被volatile描述的共享变量通过内存屏障是代码不被指令重排优化，从而保证了共享变量在线程间的可见性，更新变量时会及时的将最新值<br>同步至主内存，读变量时会及时的去主内存获取最新值，volatile只能修饰变量，只保证可见性，不保证原子性，不能用来同步。</li>\n<li>2、synchronized是通过对象头的锁标志位来实现加锁与释放锁，不仅保证可见性，还保证了原子性，只有获得了对象锁的线程才能进入临界区，<br>其他线程会阻塞等待锁释放后再争抢锁。</li>\n</ul>\n<h3 id=\"3-2-Lock-ReentrantLock-与synchronized比较\"><a href=\"#3-2-Lock-ReentrantLock-与synchronized比较\" class=\"headerlink\" title=\"3.2 Lock(ReentrantLock)与synchronized比较\"></a>3.2 Lock(ReentrantLock)与synchronized比较</h3><ul>\n<li>1、synchronized是JAVA关键字，Lock是一个java接口，ReentrantLock实现了该接口</li>\n<li>2、Lock锁需要在finally{}代码里手动释放，synchronized会自动释放锁</li>\n<li>3、Lock根据实现不同有多种锁类型，如公平锁、非公平锁(默认非公平锁)</li>\n<li>4、性能方面，在锁竞争很大的情况下Lock性能更优于synchronized</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-内存模型-JMM\"><a href=\"#1-内存模型-JMM\" class=\"headerlink\" title=\"1. 内存模型(JMM)\"></a>1. 内存模型(JMM)</h2><p> <img src=\"https://raw.githubusercontent.com/Crab2died/jdepth/master/src/main/java/com/github/jvm/concurrent/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png\" alt=\"内存模型\"></p>\n<h2 id=\"2-内存间的交互操作\"><a href=\"#2-内存间的交互操作\" class=\"headerlink\" title=\"2. 内存间的交互操作\"></a>2. 内存间的交互操作</h2><h3 id=\"2-1-定义操作\"><a href=\"#2-1-定义操作\" class=\"headerlink\" title=\"2.1. 定义操作\"></a>2.1. 定义操作</h3><ul>\n<li><strong>lock(锁定)</strong>：作用于主内存的变量,它把一个变量标识为一条线程独占的状态.</li>\n<li><strong>unlock(解锁</strong>)：作用于主内存的变量,它把一个处于锁定状态的变量释放出来,释放后的变量才可以被其他线程锁定.</li>\n<li><strong>read(读取</strong>)：作用于主内存的变量,它把一个变量的值从主内存传输到线程的工作内存中,以便随后的load动作使用.</li>\n<li><strong>load(载入)</strong>：作用于工作内存的变量,它把read操作从主内存中得到的变量值放入工作内存的变量副本中.</li>\n<li>use(使用)：作用于工作内存的变量,它把工作内存中一个变量的值传递给执行引擎,每当虚拟机遇到一个需要使用到 变量的值的字节码指令时将会执行这个操作.</li>\n<li><strong>assign(赋值)</strong>：作用于工作内存的变量,它把一个从执行引擎接收到的值赋给工作内存的变量,每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作.</li>\n<li><strong>store(存储)</strong>：作用于工作内存的变量,它把工作内存中一个变量的值传送到主内存中,以便随后的write操作使用.</li>\n<li><strong>write(写入)</strong>：作用于主内存的变量,它把store操作从工作内存中得到的变量的值放入主内存的变量中.</li>\n</ul>\n<h3 id=\"2-2-约束条件\"><a href=\"#2-2-约束条件\" class=\"headerlink\" title=\"2.2. 约束条件\"></a>2.2. 约束条件</h3><ol>\n<li>read和load、store和write必须保证顺序操作,不能单独出现,但不需要连续操作,中间可隔有其他操作</li>\n<li>不允许一个线程丢弃它的最近的assign操作,即变量在工作内存中改变了之后必须把该变化同步回主内存.</li>\n<li>不允许一个线程无原因地(没有发生过任何assign操作)把数据从线程的工作内存同步回主内存中.</li>\n<li>一个新的变量只能在主内存中“诞生”,不允许在工作内存中直接使用一个未被初始化(load或assign)的变量,换句话说,就是对一个变量实施use、<br>store操作之前,必须先执行过了assign和load操作.</li>\n<li>一个变量在同一个时刻只允许一条线程对其进行lock操作,但lock操作可以被同一条线程重复执行多次,多次执行lock后,只有执行相同次数的<br>unlock操作,变量才会被解锁</li>\n<li>如果对一个变量执行lock操作,那将会清空工作内存中此变量的值,在执行引擎使用这个变量前,需要重新执行load或assign操作初始化变量的值.</li>\n<li>如果一个变量事先没有被lock操作锁定,那就不允许对它执行unlock操作,也不允许去unlock一个被其他线程锁定住的变量.</li>\n<li>对一个变量执行unlock操作之前,必须先把此变量同步回主内存中(执行store、 write操作)</li>\n</ol>\n<h3 id=\"2-3-volatile\"><a href=\"#2-3-volatile\" class=\"headerlink\" title=\"2.3. volatile\"></a>2.3. volatile</h3><p>   &emsp;&emsp;假定T表示一个线程,V和W分别表示两个volatile型变量,那么在进行read、 load、 use、 assign、store和write操作时需要满足如下规则:<br>   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是load的时候,线程T才能对变量V执行use动作;并且,只有当线程T对变量V执行的后一个动作是use<br>   的时候,线程T才能对变量V执行load动作. 线程T对变量V的use动作可以认为是和线程T对变量V的load、 read动作相关联,必须连续一起出现<br>   (这条规则要求在工作内存中,每次使用V前都必须先从主内存刷新最新的值,用于保证能看见其他线程对变量V所做的修改后的值).<br>   &emsp;&emsp;只有当线程T对变量V执行的前一个动作是assign的时候,线程T才能对变量V执行store动作;并且,只有当线程T对变量V执行的后一个动作<br>   是store的时候,线程T才能对变量V执行assign动作. 线程T对变量V的assign动作可以认为是和线程T对变量V的store、 write动作相关联,必须连续一<br>   起出现(这条规则要求在工作内存中,每次修改V后都必须立刻同步回主内存中,用于保证其他线程可以看到自己对变量V所做的修改)<br>   &emsp;&emsp;假定动作A是线程T对变量V实施的use或assign动作,假定动作F是和动作A相关联的load或store动作,假定动作P是和动作F相应的对变量V<br>   的read或write动作;类似的,假定动作B是线程T对变量W实施的use或assign动作,假定动作G是和动作B相关联的load或store动作,假定动作<br>   Q是和动作G相应的对变量W的read或write动作. 如果A先于B,那么P先于Q(这条规则要求volatile修饰的变量不会被指令重排序优化,保证代码的执行<br>   顺序与程序的顺序相同).<br>   &emsp;&emsp;volatile不仅保证了共享变量的可见性，还通过内存屏障保证了代码执行顺序与程序顺序相同，通过内存屏障来使变量不被指令重排优化</p>\n<h3 id=\"2-4-long和double的非原子性协定\"><a href=\"#2-4-long和double的非原子性协定\" class=\"headerlink\" title=\"2.4. long和double的非原子性协定\"></a>2.4. long和double的非原子性协定</h3><p>  读写操作可分为2次32位操作,所以一定不是原子操作<br>  <strong><em>注：现在商用虚拟机本身几乎都已经实现了原子操作,所以不用volatile修饰符</em></strong></p>\n<h3 id=\"2-5-原子性\"><a href=\"#2-5-原子性\" class=\"headerlink\" title=\"2.5 原子性\"></a>2.5 原子性</h3><p>  变量操作的read、load、use、assign、store、write不保证了原子性<br>  通过synchronized对lock、unlock操作也保证了原子性</p>\n<h3 id=\"2-6-可见性\"><a href=\"#2-6-可见性\" class=\"headerlink\" title=\"2.6 可见性\"></a>2.6 可见性</h3><p>  volatile保证在读取共享变量之前去主内存刷最新值，还保证了最新值能及时同步至主内存</p>\n<h3 id=\"2-7-有序性\"><a href=\"#2-7-有序性\" class=\"headerlink\" title=\"2.7 有序性\"></a>2.7 有序性</h3><p>  在本线程内观察所有操作都是有序的，在另一个线程观察所有操作都是无序的</p>\n<h3 id=\"2-8-先发性\"><a href=\"#2-8-先发性\" class=\"headerlink\" title=\"2.8 先发性\"></a>2.8 先发性</h3><p>  先发生的线程对修改了共享变量的值、发送了消息或调用了方法会被后发生的线程所观察到  </p>\n<h3 id=\"2-9-先行发生-happens-before-规则\"><a href=\"#2-9-先行发生-happens-before-规则\" class=\"headerlink\" title=\"2.9 先行发生(happens-before)规则\"></a>2.9 先行发生(happens-before)规则</h3><p>   《JSR-133:Java Memory Model and Thread Specification》定义了如下happens-before规则。 </p>\n<ul>\n<li>1、程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li>\n<li>2、监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li>\n<li>3、volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li>\n<li>4、传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li>\n<li>5、start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。</li>\n<li>6、join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li>\n</ul>\n<h2 id=\"3-常见比较\"><a href=\"#3-常见比较\" class=\"headerlink\" title=\"3. 常见比较\"></a>3. 常见比较</h2><h3 id=\"3-1-volatile与synchronized比较\"><a href=\"#3-1-volatile与synchronized比较\" class=\"headerlink\" title=\"3.1 volatile与synchronized比较\"></a>3.1 volatile与synchronized比较</h3><ul>\n<li>1、被volatile描述的共享变量通过内存屏障是代码不被指令重排优化，从而保证了共享变量在线程间的可见性，更新变量时会及时的将最新值<br>同步至主内存，读变量时会及时的去主内存获取最新值，volatile只能修饰变量，只保证可见性，不保证原子性，不能用来同步。</li>\n<li>2、synchronized是通过对象头的锁标志位来实现加锁与释放锁，不仅保证可见性，还保证了原子性，只有获得了对象锁的线程才能进入临界区，<br>其他线程会阻塞等待锁释放后再争抢锁。</li>\n</ul>\n<h3 id=\"3-2-Lock-ReentrantLock-与synchronized比较\"><a href=\"#3-2-Lock-ReentrantLock-与synchronized比较\" class=\"headerlink\" title=\"3.2 Lock(ReentrantLock)与synchronized比较\"></a>3.2 Lock(ReentrantLock)与synchronized比较</h3><ul>\n<li>1、synchronized是JAVA关键字，Lock是一个java接口，ReentrantLock实现了该接口</li>\n<li>2、Lock锁需要在finally{}代码里手动释放，synchronized会自动释放锁</li>\n<li>3、Lock根据实现不同有多种锁类型，如公平锁、非公平锁(默认非公平锁)</li>\n<li>4、性能方面，在锁竞争很大的情况下Lock性能更优于synchronized</li>\n</ul>\n"},{"layout":"post","title":"JAVA Monitor Tools","thumbnail":"/images/material/tech_tool.png","date":"2018-06-14T04:45:27.000Z","author":"Crab2Died","_content":"\n## 一. jps(JVM Process Status Tool)\n### 1. 介绍\n   类似UNIX的ps命令，列出虚拟机正在运行的进程信息\n   \n### 2. 参数\n   - **-q**: 只输出进程ID\n   - **-m**: 输出主类启动时的参数\n   - **-l**: 输出主类全名，如果是jar则输出jar路径\n   - **-v**: 输出虚拟机启动时的JVM参数\n\n## 二. jstat(JVM Statistics Monitoring Tool)\n### 1. 介绍\n   用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、 内存、 垃圾收集、 JIT编译等运行数据 \n   \n### 2. 格式\n   jstat[option vmid[interval[s|ms][count]]]\n   如**`jstat -class 14232(PID) 520(采样率) 4(采样次数)`**\n   \n### 3. 参数\n   - **-class**: 监控类加载数量、卸载数量、总空间以及加载所用时间\n   - **-gc**: 监控java堆状态，包括Eden区，2个survivor区，老年代，永久代容量、已用空间、GC时间合计等\n   - **-gccapacity**: 与-gc基本相同，但主要关注java堆各个区域使用到的最大、最小空间\n   - **-gcutil**: 与-gc基本相同，但主要关注java堆各个区域使用占比\n   - **-gccase**: 与-gcutil一样，但会额外输出上一次GC的原因\n   - **-gcnew**: 监控新生代GC状态\n   - **-gcnewcapacity**: 与-gcnew基本相同，但主要关注的是使用到的最大、最小空间\n   - **-gcold**: 监控老年代GC状态\n   - **-gcoldcapacity**: 与-gcold基本相同，但主要关注的是使用道的最大、最小空间\n   - **-gcpermcapacity**: 输出永久带使用到的最大、最小空间\n   - **-compiler**: 输出JIT编译过的方法、耗时等信息\n   - **-printcompilation**: 输出已被JIT编译过的方法\n   \n## 三. jinfo(Configuration Info for Java)\n### 1. 介绍\n   实时地查看和调整虚拟机各项参数\n   \n### 2. 格式\n   jinfo [option] pid 如 `jinfo -flags 14232`\n   \n### 3. 参数\n   - **-flag &lt;name&gt;**: to print the value of the named VM flag. (输出JVM参数名为name的参数信息)\n   - **-flag +/-&lt;name&gt;**: to enable or disable the named VM flag. (添加或除去JVM参数名为name的参数)\n   - **-flag &lt;name&gt;=&lt;value&gt;**: to set the named VM flag to the given value. (设置JVM参数， 如-Xmx=1024m)\n   - **-flags**: to print VM flags. (输出JVM启动参数信息)\n   - **-sysprops**: to print Java system properties. (输出`System.getProperties()`信息)\n\n## 四. jmap(Memory Map for Java)\n### 1. 介绍\n\n   命令用于生成堆转储快照(一般称为heapdump或dump文件)  \n   其他生成dump文件方式:通过参数`-XX：+HeapDumpOnOutOfMemoryError`OOM时生成、`-XX：+HeapDumpOnCtrlBreak`通过\n   [Ctrl]+[Break]键让虚拟机生成dump文件、或者Linux通过命令kill -3 pid也能拿到dump\n### 2. 格式\n   jmap [option] vmid \n   \n### 3. 参数\n   - **-dump**: 生成java堆转存快照, 格式 `-dump:[live, ],format=b,file=<filename>`, live表示是否只导出存活的对象\n   - **-finalizerinfo**: 显示在F-Queen里面等待Finalizer线程执行finalize()方法的对象，只在Linux/Solaris平台有效\n   - **-heap**: 显示java堆详细信息，如使用哪种GC回收器，参数配置、分代状况等信息，只在Linux/Solaris平台有效\n   - **-histo**: 显示堆中对象统计信息，包括类、实例数量及合计容量等\n   - **-permstat**: 以ClassLoader为统计口径显示永久带内存状态，只在Linux/Solaris平台有效\n   - **-F**: 当-dump没响应时，使用-F强制生成dump文件，只在Linux/Solaris平台有效\n \n## 五. jhat(JVM Heap Analysis Tool)\n### 1. 介绍\n   分析jmap生成的堆转储快照(dump文件)\n   \n### 2. 格式\n   jhat [-port 7001] &lt;dumpfile&gt;\n   \n### 3. 参数\n   - **-port**: server端口，可通过host:port访问\n   - **&lt;file&gt;**: dump文件\n   - **-J&lt;flag&gt;**: 运行参数,如: `-J-mx512m`\n\n## 六. jstack(Stack Trace for Java)\n### 1. 介绍\n\n   用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)  \n   线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，\n   如线程间死锁、 死循环、 请求外部资源导致的长时间等待等都是导致线程长时间停顿的常见原因。 线程出现停顿的时候通过\n   jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源\n### 2. 格式\n   jstack [option] vmid 如`jstack -l 14232`\n   \n### 3. 参数\n   - **-F**: 当正常请求无响应时，强制输出线程堆栈\n   - **-l**: 除堆栈外，显示关于锁的附加信息\n   - **-m**: 如果调用到本地方法时，显示C/C++堆栈信息\n   \n### 4. 日志分析\n  1. 线程分为New、Runnable、Running、Waiting、Timed_Waiting、Blocked、Dead等状态  \n   - **New**: 当线程对象创建时存在的状态，此时线程不可能执行；  \n   - **Runnable**：当调用thread.start()后，线程变成为Runnable状态。只要得到CPU，就可以执行；  \n   - **Running**：线程正在执行；  \n   - **Waiting**：执行thread.join()或在锁对象调用obj.wait()等情况就会进该状态，表明线程正处于等待某个资源或条件发生来唤醒自己；  \n   - **Timed_Waiting**：执行Thread.sleep(long)、thread.join(long)或obj.wait(long)等就会进该状态，与Waiting的区别在于Timed_Waiting的等待有时间限制；  \n   - **Blocked**：如果进入同步方法或同步代码块，没有获取到锁，则会进入该状态；  \n   - **Dead**：线程执行完毕，或者抛出了未捕获的异常之后，会进入dead状态，表示该线程结束  \n  2. 其次，对于jstack日志，我们要着重关注如下关键信息  \n   - **Deadlock**：表示有死锁  \n   - **Waiting on condition**：等待某个资源或条件发生来唤醒自己。具体需要结合jstacktrace来分析，比如线程正在sleep，网络读写繁忙而等待  \n   - **Blocked**：阻塞  \n   - **Waiting on monitor entry**：在等待获取锁  \n   - **in Object.wait()**：获取锁后又执行obj.wait()放弃锁  \n   - 对于Waiting on monitor entry 和 inObject.wait()的详细描述：Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，\n     它可以看成是对象或者Class的锁。每一个对象都有，也仅有一个 monitor。从下图中可以看出，每个 Monitor在某个时刻，只能被一个\n     线程拥有，该线程就是 \"Active Thread\"，而其它线程都是 \"Waiting Thread\"，分别在两个队列 \"Entry Set\"和 \"Wait Set\"里面\n     等候。在 \"Entry Set\"中等待的线程状态是\"Waiting for monitor entry\"，而在 \"Wait Set\"中等待的线程状态是 \"in Object.wait()\"\n      \n### 5. 附录\n   在JDK1.5中在`java.lang.Thread`类中新增了`getAllStackTraces()`方法获取虚拟机所有的线程`StackTraceElement`\n   对象，实现了大部分jstack功能，实际项目中可页面展示\n\n## 七. VisualVM(All-in-One Java Troubleshooting Tool)\n### 介绍\n  是到目前为止随JDK发布的功能最强大的运行监视和故障处理程序，并且可以预见在未来一段时间内都是官方主力发展的虚拟机故障处理工具。\n  官方在VisualVM的软件说明中写上了“All-in-One”的描述字样，预示着它除了运行监视、 故障处理外，还提供了很多其他方面的功能。\n  \n### 远程监控\n  - 1、远程服务器启动jstatd服务  \n    创建配置文件jstatd.policy内容为\n    ```\n      grant codebase \"file:${java.home}/../lib/tools.jar\" {  \n         permission java.security.AllPermission;  \n      };\n    ```\n    启动服务:`jstatd -J-Djava.security.policy=jstatd.policy -p 8701`\n  - 2、启动应用参数\n    ```\n      -Dcom.sun.management.jmxremote=true \n      -Dcom.sun.management.jmxremote.port=9090 \n      -Dcom.sun.management.jmxremote.ssl=false \n      -Dcom.sun.management.jmxremote.authenticate=false\n      -Djava.rmi.server.hostname=192.168.0.1\n    ```\n  - 3、启动jvisualvm,操作步骤:  \n    远程 -> 添加远程主机 -> 添加JMX链接\n\n## 八. 案列\n### 1. 利用jstack调试线程堆栈信息\n   1. jps得到PID，如14232\n   2. 查看进程PID的线程耗时情况,命令`ps -Lfp pid`或`top -Hp pid`找到最耗时的线程ID 如14253\n   3. 获取线程ID16进制编码`print \"%x\\n\" 14253`为37ad\n   4. 用jstack获取线程堆栈信息`jstack 14232 |grep 37ad`打印如下信息:  \n      `\"VM Periodic Task Thread\" os_prio=0 tid=0x00007f772c00f800 nid=0x37ad waiting on condition `  \n      通过该日志分析表示该线程在等待某个资源来唤醒\n","source":"_posts/java-monitor-tools.md","raw":"---\nlayout: post\ntitle: JAVA Monitor Tools\nthumbnail: /images/material/tech_tool.png\ndate: 2018-06-14 12:45:27 +0800\nauthor: Crab2Died\ncategories: Java\ntags: \n  - Java\n  - Java Monitor\n---\n\n## 一. jps(JVM Process Status Tool)\n### 1. 介绍\n   类似UNIX的ps命令，列出虚拟机正在运行的进程信息\n   \n### 2. 参数\n   - **-q**: 只输出进程ID\n   - **-m**: 输出主类启动时的参数\n   - **-l**: 输出主类全名，如果是jar则输出jar路径\n   - **-v**: 输出虚拟机启动时的JVM参数\n\n## 二. jstat(JVM Statistics Monitoring Tool)\n### 1. 介绍\n   用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、 内存、 垃圾收集、 JIT编译等运行数据 \n   \n### 2. 格式\n   jstat[option vmid[interval[s|ms][count]]]\n   如**`jstat -class 14232(PID) 520(采样率) 4(采样次数)`**\n   \n### 3. 参数\n   - **-class**: 监控类加载数量、卸载数量、总空间以及加载所用时间\n   - **-gc**: 监控java堆状态，包括Eden区，2个survivor区，老年代，永久代容量、已用空间、GC时间合计等\n   - **-gccapacity**: 与-gc基本相同，但主要关注java堆各个区域使用到的最大、最小空间\n   - **-gcutil**: 与-gc基本相同，但主要关注java堆各个区域使用占比\n   - **-gccase**: 与-gcutil一样，但会额外输出上一次GC的原因\n   - **-gcnew**: 监控新生代GC状态\n   - **-gcnewcapacity**: 与-gcnew基本相同，但主要关注的是使用到的最大、最小空间\n   - **-gcold**: 监控老年代GC状态\n   - **-gcoldcapacity**: 与-gcold基本相同，但主要关注的是使用道的最大、最小空间\n   - **-gcpermcapacity**: 输出永久带使用到的最大、最小空间\n   - **-compiler**: 输出JIT编译过的方法、耗时等信息\n   - **-printcompilation**: 输出已被JIT编译过的方法\n   \n## 三. jinfo(Configuration Info for Java)\n### 1. 介绍\n   实时地查看和调整虚拟机各项参数\n   \n### 2. 格式\n   jinfo [option] pid 如 `jinfo -flags 14232`\n   \n### 3. 参数\n   - **-flag &lt;name&gt;**: to print the value of the named VM flag. (输出JVM参数名为name的参数信息)\n   - **-flag +/-&lt;name&gt;**: to enable or disable the named VM flag. (添加或除去JVM参数名为name的参数)\n   - **-flag &lt;name&gt;=&lt;value&gt;**: to set the named VM flag to the given value. (设置JVM参数， 如-Xmx=1024m)\n   - **-flags**: to print VM flags. (输出JVM启动参数信息)\n   - **-sysprops**: to print Java system properties. (输出`System.getProperties()`信息)\n\n## 四. jmap(Memory Map for Java)\n### 1. 介绍\n\n   命令用于生成堆转储快照(一般称为heapdump或dump文件)  \n   其他生成dump文件方式:通过参数`-XX：+HeapDumpOnOutOfMemoryError`OOM时生成、`-XX：+HeapDumpOnCtrlBreak`通过\n   [Ctrl]+[Break]键让虚拟机生成dump文件、或者Linux通过命令kill -3 pid也能拿到dump\n### 2. 格式\n   jmap [option] vmid \n   \n### 3. 参数\n   - **-dump**: 生成java堆转存快照, 格式 `-dump:[live, ],format=b,file=<filename>`, live表示是否只导出存活的对象\n   - **-finalizerinfo**: 显示在F-Queen里面等待Finalizer线程执行finalize()方法的对象，只在Linux/Solaris平台有效\n   - **-heap**: 显示java堆详细信息，如使用哪种GC回收器，参数配置、分代状况等信息，只在Linux/Solaris平台有效\n   - **-histo**: 显示堆中对象统计信息，包括类、实例数量及合计容量等\n   - **-permstat**: 以ClassLoader为统计口径显示永久带内存状态，只在Linux/Solaris平台有效\n   - **-F**: 当-dump没响应时，使用-F强制生成dump文件，只在Linux/Solaris平台有效\n \n## 五. jhat(JVM Heap Analysis Tool)\n### 1. 介绍\n   分析jmap生成的堆转储快照(dump文件)\n   \n### 2. 格式\n   jhat [-port 7001] &lt;dumpfile&gt;\n   \n### 3. 参数\n   - **-port**: server端口，可通过host:port访问\n   - **&lt;file&gt;**: dump文件\n   - **-J&lt;flag&gt;**: 运行参数,如: `-J-mx512m`\n\n## 六. jstack(Stack Trace for Java)\n### 1. 介绍\n\n   用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)  \n   线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，\n   如线程间死锁、 死循环、 请求外部资源导致的长时间等待等都是导致线程长时间停顿的常见原因。 线程出现停顿的时候通过\n   jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源\n### 2. 格式\n   jstack [option] vmid 如`jstack -l 14232`\n   \n### 3. 参数\n   - **-F**: 当正常请求无响应时，强制输出线程堆栈\n   - **-l**: 除堆栈外，显示关于锁的附加信息\n   - **-m**: 如果调用到本地方法时，显示C/C++堆栈信息\n   \n### 4. 日志分析\n  1. 线程分为New、Runnable、Running、Waiting、Timed_Waiting、Blocked、Dead等状态  \n   - **New**: 当线程对象创建时存在的状态，此时线程不可能执行；  \n   - **Runnable**：当调用thread.start()后，线程变成为Runnable状态。只要得到CPU，就可以执行；  \n   - **Running**：线程正在执行；  \n   - **Waiting**：执行thread.join()或在锁对象调用obj.wait()等情况就会进该状态，表明线程正处于等待某个资源或条件发生来唤醒自己；  \n   - **Timed_Waiting**：执行Thread.sleep(long)、thread.join(long)或obj.wait(long)等就会进该状态，与Waiting的区别在于Timed_Waiting的等待有时间限制；  \n   - **Blocked**：如果进入同步方法或同步代码块，没有获取到锁，则会进入该状态；  \n   - **Dead**：线程执行完毕，或者抛出了未捕获的异常之后，会进入dead状态，表示该线程结束  \n  2. 其次，对于jstack日志，我们要着重关注如下关键信息  \n   - **Deadlock**：表示有死锁  \n   - **Waiting on condition**：等待某个资源或条件发生来唤醒自己。具体需要结合jstacktrace来分析，比如线程正在sleep，网络读写繁忙而等待  \n   - **Blocked**：阻塞  \n   - **Waiting on monitor entry**：在等待获取锁  \n   - **in Object.wait()**：获取锁后又执行obj.wait()放弃锁  \n   - 对于Waiting on monitor entry 和 inObject.wait()的详细描述：Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，\n     它可以看成是对象或者Class的锁。每一个对象都有，也仅有一个 monitor。从下图中可以看出，每个 Monitor在某个时刻，只能被一个\n     线程拥有，该线程就是 \"Active Thread\"，而其它线程都是 \"Waiting Thread\"，分别在两个队列 \"Entry Set\"和 \"Wait Set\"里面\n     等候。在 \"Entry Set\"中等待的线程状态是\"Waiting for monitor entry\"，而在 \"Wait Set\"中等待的线程状态是 \"in Object.wait()\"\n      \n### 5. 附录\n   在JDK1.5中在`java.lang.Thread`类中新增了`getAllStackTraces()`方法获取虚拟机所有的线程`StackTraceElement`\n   对象，实现了大部分jstack功能，实际项目中可页面展示\n\n## 七. VisualVM(All-in-One Java Troubleshooting Tool)\n### 介绍\n  是到目前为止随JDK发布的功能最强大的运行监视和故障处理程序，并且可以预见在未来一段时间内都是官方主力发展的虚拟机故障处理工具。\n  官方在VisualVM的软件说明中写上了“All-in-One”的描述字样，预示着它除了运行监视、 故障处理外，还提供了很多其他方面的功能。\n  \n### 远程监控\n  - 1、远程服务器启动jstatd服务  \n    创建配置文件jstatd.policy内容为\n    ```\n      grant codebase \"file:${java.home}/../lib/tools.jar\" {  \n         permission java.security.AllPermission;  \n      };\n    ```\n    启动服务:`jstatd -J-Djava.security.policy=jstatd.policy -p 8701`\n  - 2、启动应用参数\n    ```\n      -Dcom.sun.management.jmxremote=true \n      -Dcom.sun.management.jmxremote.port=9090 \n      -Dcom.sun.management.jmxremote.ssl=false \n      -Dcom.sun.management.jmxremote.authenticate=false\n      -Djava.rmi.server.hostname=192.168.0.1\n    ```\n  - 3、启动jvisualvm,操作步骤:  \n    远程 -> 添加远程主机 -> 添加JMX链接\n\n## 八. 案列\n### 1. 利用jstack调试线程堆栈信息\n   1. jps得到PID，如14232\n   2. 查看进程PID的线程耗时情况,命令`ps -Lfp pid`或`top -Hp pid`找到最耗时的线程ID 如14253\n   3. 获取线程ID16进制编码`print \"%x\\n\" 14253`为37ad\n   4. 用jstack获取线程堆栈信息`jstack 14232 |grep 37ad`打印如下信息:  \n      `\"VM Periodic Task Thread\" os_prio=0 tid=0x00007f772c00f800 nid=0x37ad waiting on condition `  \n      通过该日志分析表示该线程在等待某个资源来唤醒\n","slug":"java-monitor-tools","published":1,"updated":"2018-12-13T11:43:21.283Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vjc000fuoilaoxxibna","content":"<h2 id=\"一-jps-JVM-Process-Status-Tool\"><a href=\"#一-jps-JVM-Process-Status-Tool\" class=\"headerlink\" title=\"一. jps(JVM Process Status Tool)\"></a>一. jps(JVM Process Status Tool)</h2><h3 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   类似UNIX的ps命令，列出虚拟机正在运行的进程信息</p>\n<h3 id=\"2-参数\"><a href=\"#2-参数\" class=\"headerlink\" title=\"2. 参数\"></a>2. 参数</h3><ul>\n<li><strong>-q</strong>: 只输出进程ID</li>\n<li><strong>-m</strong>: 输出主类启动时的参数</li>\n<li><strong>-l</strong>: 输出主类全名，如果是jar则输出jar路径</li>\n<li><strong>-v</strong>: 输出虚拟机启动时的JVM参数</li>\n</ul>\n<h2 id=\"二-jstat-JVM-Statistics-Monitoring-Tool\"><a href=\"#二-jstat-JVM-Statistics-Monitoring-Tool\" class=\"headerlink\" title=\"二. jstat(JVM Statistics Monitoring Tool)\"></a>二. jstat(JVM Statistics Monitoring Tool)</h2><h3 id=\"1-介绍-1\"><a href=\"#1-介绍-1\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、 内存、 垃圾收集、 JIT编译等运行数据 </p>\n<h3 id=\"2-格式\"><a href=\"#2-格式\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jstat[option vmid[interval[s|ms][count]]]<br>   如<strong><code>jstat -class 14232(PID) 520(采样率) 4(采样次数)</code></strong></p>\n<h3 id=\"3-参数\"><a href=\"#3-参数\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-class</strong>: 监控类加载数量、卸载数量、总空间以及加载所用时间</li>\n<li><strong>-gc</strong>: 监控java堆状态，包括Eden区，2个survivor区，老年代，永久代容量、已用空间、GC时间合计等</li>\n<li><strong>-gccapacity</strong>: 与-gc基本相同，但主要关注java堆各个区域使用到的最大、最小空间</li>\n<li><strong>-gcutil</strong>: 与-gc基本相同，但主要关注java堆各个区域使用占比</li>\n<li><strong>-gccase</strong>: 与-gcutil一样，但会额外输出上一次GC的原因</li>\n<li><strong>-gcnew</strong>: 监控新生代GC状态</li>\n<li><strong>-gcnewcapacity</strong>: 与-gcnew基本相同，但主要关注的是使用到的最大、最小空间</li>\n<li><strong>-gcold</strong>: 监控老年代GC状态</li>\n<li><strong>-gcoldcapacity</strong>: 与-gcold基本相同，但主要关注的是使用道的最大、最小空间</li>\n<li><strong>-gcpermcapacity</strong>: 输出永久带使用到的最大、最小空间</li>\n<li><strong>-compiler</strong>: 输出JIT编译过的方法、耗时等信息</li>\n<li><strong>-printcompilation</strong>: 输出已被JIT编译过的方法</li>\n</ul>\n<h2 id=\"三-jinfo-Configuration-Info-for-Java\"><a href=\"#三-jinfo-Configuration-Info-for-Java\" class=\"headerlink\" title=\"三. jinfo(Configuration Info for Java)\"></a>三. jinfo(Configuration Info for Java)</h2><h3 id=\"1-介绍-2\"><a href=\"#1-介绍-2\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   实时地查看和调整虚拟机各项参数</p>\n<h3 id=\"2-格式-1\"><a href=\"#2-格式-1\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jinfo [option] pid 如 <code>jinfo -flags 14232</code></p>\n<h3 id=\"3-参数-1\"><a href=\"#3-参数-1\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-flag &lt;name&gt;</strong>: to print the value of the named VM flag. (输出JVM参数名为name的参数信息)</li>\n<li><strong>-flag +/-&lt;name&gt;</strong>: to enable or disable the named VM flag. (添加或除去JVM参数名为name的参数)</li>\n<li><strong>-flag &lt;name&gt;=&lt;value&gt;</strong>: to set the named VM flag to the given value. (设置JVM参数， 如-Xmx=1024m)</li>\n<li><strong>-flags</strong>: to print VM flags. (输出JVM启动参数信息)</li>\n<li><strong>-sysprops</strong>: to print Java system properties. (输出<code>System.getProperties()</code>信息)</li>\n</ul>\n<h2 id=\"四-jmap-Memory-Map-for-Java\"><a href=\"#四-jmap-Memory-Map-for-Java\" class=\"headerlink\" title=\"四. jmap(Memory Map for Java)\"></a>四. jmap(Memory Map for Java)</h2><h3 id=\"1-介绍-3\"><a href=\"#1-介绍-3\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   命令用于生成堆转储快照(一般称为heapdump或dump文件)<br>   其他生成dump文件方式:通过参数<code>-XX：+HeapDumpOnOutOfMemoryError</code>OOM时生成、<code>-XX：+HeapDumpOnCtrlBreak</code>通过<br>   [Ctrl]+[Break]键让虚拟机生成dump文件、或者Linux通过命令kill -3 pid也能拿到dump</p>\n<h3 id=\"2-格式-2\"><a href=\"#2-格式-2\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jmap [option] vmid </p>\n<h3 id=\"3-参数-2\"><a href=\"#3-参数-2\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-dump</strong>: 生成java堆转存快照, 格式 <code>-dump:[live, ],format=b,file=&lt;filename&gt;</code>, live表示是否只导出存活的对象</li>\n<li><strong>-finalizerinfo</strong>: 显示在F-Queen里面等待Finalizer线程执行finalize()方法的对象，只在Linux/Solaris平台有效</li>\n<li><strong>-heap</strong>: 显示java堆详细信息，如使用哪种GC回收器，参数配置、分代状况等信息，只在Linux/Solaris平台有效</li>\n<li><strong>-histo</strong>: 显示堆中对象统计信息，包括类、实例数量及合计容量等</li>\n<li><strong>-permstat</strong>: 以ClassLoader为统计口径显示永久带内存状态，只在Linux/Solaris平台有效</li>\n<li><strong>-F</strong>: 当-dump没响应时，使用-F强制生成dump文件，只在Linux/Solaris平台有效</li>\n</ul>\n<h2 id=\"五-jhat-JVM-Heap-Analysis-Tool\"><a href=\"#五-jhat-JVM-Heap-Analysis-Tool\" class=\"headerlink\" title=\"五. jhat(JVM Heap Analysis Tool)\"></a>五. jhat(JVM Heap Analysis Tool)</h2><h3 id=\"1-介绍-4\"><a href=\"#1-介绍-4\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   分析jmap生成的堆转储快照(dump文件)</p>\n<h3 id=\"2-格式-3\"><a href=\"#2-格式-3\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jhat [-port 7001] &lt;dumpfile&gt;</p>\n<h3 id=\"3-参数-3\"><a href=\"#3-参数-3\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-port</strong>: server端口，可通过host:port访问</li>\n<li><strong>&lt;file&gt;</strong>: dump文件</li>\n<li><strong>-J&lt;flag&gt;</strong>: 运行参数,如: <code>-J-mx512m</code></li>\n</ul>\n<h2 id=\"六-jstack-Stack-Trace-for-Java\"><a href=\"#六-jstack-Stack-Trace-for-Java\" class=\"headerlink\" title=\"六. jstack(Stack Trace for Java)\"></a>六. jstack(Stack Trace for Java)</h2><h3 id=\"1-介绍-5\"><a href=\"#1-介绍-5\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)<br>   线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，<br>   如线程间死锁、 死循环、 请求外部资源导致的长时间等待等都是导致线程长时间停顿的常见原因。 线程出现停顿的时候通过<br>   jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源</p>\n<h3 id=\"2-格式-4\"><a href=\"#2-格式-4\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jstack [option] vmid 如<code>jstack -l 14232</code></p>\n<h3 id=\"3-参数-4\"><a href=\"#3-参数-4\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-F</strong>: 当正常请求无响应时，强制输出线程堆栈</li>\n<li><strong>-l</strong>: 除堆栈外，显示关于锁的附加信息</li>\n<li><strong>-m</strong>: 如果调用到本地方法时，显示C/C++堆栈信息</li>\n</ul>\n<h3 id=\"4-日志分析\"><a href=\"#4-日志分析\" class=\"headerlink\" title=\"4. 日志分析\"></a>4. 日志分析</h3><ol>\n<li>线程分为New、Runnable、Running、Waiting、Timed_Waiting、Blocked、Dead等状态  <ul>\n<li><strong>New</strong>: 当线程对象创建时存在的状态，此时线程不可能执行；  </li>\n<li><strong>Runnable</strong>：当调用thread.start()后，线程变成为Runnable状态。只要得到CPU，就可以执行；  </li>\n<li><strong>Running</strong>：线程正在执行；  </li>\n<li><strong>Waiting</strong>：执行thread.join()或在锁对象调用obj.wait()等情况就会进该状态，表明线程正处于等待某个资源或条件发生来唤醒自己；  </li>\n<li><strong>Timed_Waiting</strong>：执行Thread.sleep(long)、thread.join(long)或obj.wait(long)等就会进该状态，与Waiting的区别在于Timed_Waiting的等待有时间限制；  </li>\n<li><strong>Blocked</strong>：如果进入同步方法或同步代码块，没有获取到锁，则会进入该状态；  </li>\n<li><strong>Dead</strong>：线程执行完毕，或者抛出了未捕获的异常之后，会进入dead状态，表示该线程结束  </li>\n</ul>\n</li>\n<li>其次，对于jstack日志，我们要着重关注如下关键信息  <ul>\n<li><strong>Deadlock</strong>：表示有死锁  </li>\n<li><strong>Waiting on condition</strong>：等待某个资源或条件发生来唤醒自己。具体需要结合jstacktrace来分析，比如线程正在sleep，网络读写繁忙而等待  </li>\n<li><strong>Blocked</strong>：阻塞  </li>\n<li><strong>Waiting on monitor entry</strong>：在等待获取锁  </li>\n<li><strong>in Object.wait()</strong>：获取锁后又执行obj.wait()放弃锁  </li>\n<li>对于Waiting on monitor entry 和 inObject.wait()的详细描述：Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，<br>它可以看成是对象或者Class的锁。每一个对象都有，也仅有一个 monitor。从下图中可以看出，每个 Monitor在某个时刻，只能被一个<br>线程拥有，该线程就是 “Active Thread”，而其它线程都是 “Waiting Thread”，分别在两个队列 “Entry Set”和 “Wait Set”里面<br>等候。在 “Entry Set”中等待的线程状态是”Waiting for monitor entry”，而在 “Wait Set”中等待的线程状态是 “in Object.wait()”</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-附录\"><a href=\"#5-附录\" class=\"headerlink\" title=\"5. 附录\"></a>5. 附录</h3><p>   在JDK1.5中在<code>java.lang.Thread</code>类中新增了<code>getAllStackTraces()</code>方法获取虚拟机所有的线程<code>StackTraceElement</code><br>   对象，实现了大部分jstack功能，实际项目中可页面展示</p>\n<h2 id=\"七-VisualVM-All-in-One-Java-Troubleshooting-Tool\"><a href=\"#七-VisualVM-All-in-One-Java-Troubleshooting-Tool\" class=\"headerlink\" title=\"七. VisualVM(All-in-One Java Troubleshooting Tool)\"></a>七. VisualVM(All-in-One Java Troubleshooting Tool)</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>  是到目前为止随JDK发布的功能最强大的运行监视和故障处理程序，并且可以预见在未来一段时间内都是官方主力发展的虚拟机故障处理工具。<br>  官方在VisualVM的软件说明中写上了“All-in-One”的描述字样，预示着它除了运行监视、 故障处理外，还提供了很多其他方面的功能。</p>\n<h3 id=\"远程监控\"><a href=\"#远程监控\" class=\"headerlink\" title=\"远程监控\"></a>远程监控</h3><ul>\n<li><p>1、远程服务器启动jstatd服务<br>创建配置文件jstatd.policy内容为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant codebase &quot;file:$&#123;java.home&#125;/../lib/tools.jar&quot; &#123;  </span><br><span class=\"line\">   permission java.security.AllPermission;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>启动服务:<code>jstatd -J-Djava.security.policy=jstatd.policy -p 8701</code></p>\n</li>\n<li><p>2、启动应用参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-Dcom.sun.management.jmxremote=true </span><br><span class=\"line\">-Dcom.sun.management.jmxremote.port=9090 </span><br><span class=\"line\">-Dcom.sun.management.jmxremote.ssl=false </span><br><span class=\"line\">-Dcom.sun.management.jmxremote.authenticate=false</span><br><span class=\"line\">-Djava.rmi.server.hostname=192.168.0.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、启动jvisualvm,操作步骤:<br>远程 -&gt; 添加远程主机 -&gt; 添加JMX链接</p>\n</li>\n</ul>\n<h2 id=\"八-案列\"><a href=\"#八-案列\" class=\"headerlink\" title=\"八. 案列\"></a>八. 案列</h2><h3 id=\"1-利用jstack调试线程堆栈信息\"><a href=\"#1-利用jstack调试线程堆栈信息\" class=\"headerlink\" title=\"1. 利用jstack调试线程堆栈信息\"></a>1. 利用jstack调试线程堆栈信息</h3><ol>\n<li>jps得到PID，如14232</li>\n<li>查看进程PID的线程耗时情况,命令<code>ps -Lfp pid</code>或<code>top -Hp pid</code>找到最耗时的线程ID 如14253</li>\n<li>获取线程ID16进制编码<code>print &quot;%x\\n&quot; 14253</code>为37ad</li>\n<li>用jstack获取线程堆栈信息<code>jstack 14232 |grep 37ad</code>打印如下信息:<br><code>&quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007f772c00f800 nid=0x37ad waiting on condition</code><br>通过该日志分析表示该线程在等待某个资源来唤醒</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-jps-JVM-Process-Status-Tool\"><a href=\"#一-jps-JVM-Process-Status-Tool\" class=\"headerlink\" title=\"一. jps(JVM Process Status Tool)\"></a>一. jps(JVM Process Status Tool)</h2><h3 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   类似UNIX的ps命令，列出虚拟机正在运行的进程信息</p>\n<h3 id=\"2-参数\"><a href=\"#2-参数\" class=\"headerlink\" title=\"2. 参数\"></a>2. 参数</h3><ul>\n<li><strong>-q</strong>: 只输出进程ID</li>\n<li><strong>-m</strong>: 输出主类启动时的参数</li>\n<li><strong>-l</strong>: 输出主类全名，如果是jar则输出jar路径</li>\n<li><strong>-v</strong>: 输出虚拟机启动时的JVM参数</li>\n</ul>\n<h2 id=\"二-jstat-JVM-Statistics-Monitoring-Tool\"><a href=\"#二-jstat-JVM-Statistics-Monitoring-Tool\" class=\"headerlink\" title=\"二. jstat(JVM Statistics Monitoring Tool)\"></a>二. jstat(JVM Statistics Monitoring Tool)</h2><h3 id=\"1-介绍-1\"><a href=\"#1-介绍-1\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、 内存、 垃圾收集、 JIT编译等运行数据 </p>\n<h3 id=\"2-格式\"><a href=\"#2-格式\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jstat[option vmid[interval[s|ms][count]]]<br>   如<strong><code>jstat -class 14232(PID) 520(采样率) 4(采样次数)</code></strong></p>\n<h3 id=\"3-参数\"><a href=\"#3-参数\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-class</strong>: 监控类加载数量、卸载数量、总空间以及加载所用时间</li>\n<li><strong>-gc</strong>: 监控java堆状态，包括Eden区，2个survivor区，老年代，永久代容量、已用空间、GC时间合计等</li>\n<li><strong>-gccapacity</strong>: 与-gc基本相同，但主要关注java堆各个区域使用到的最大、最小空间</li>\n<li><strong>-gcutil</strong>: 与-gc基本相同，但主要关注java堆各个区域使用占比</li>\n<li><strong>-gccase</strong>: 与-gcutil一样，但会额外输出上一次GC的原因</li>\n<li><strong>-gcnew</strong>: 监控新生代GC状态</li>\n<li><strong>-gcnewcapacity</strong>: 与-gcnew基本相同，但主要关注的是使用到的最大、最小空间</li>\n<li><strong>-gcold</strong>: 监控老年代GC状态</li>\n<li><strong>-gcoldcapacity</strong>: 与-gcold基本相同，但主要关注的是使用道的最大、最小空间</li>\n<li><strong>-gcpermcapacity</strong>: 输出永久带使用到的最大、最小空间</li>\n<li><strong>-compiler</strong>: 输出JIT编译过的方法、耗时等信息</li>\n<li><strong>-printcompilation</strong>: 输出已被JIT编译过的方法</li>\n</ul>\n<h2 id=\"三-jinfo-Configuration-Info-for-Java\"><a href=\"#三-jinfo-Configuration-Info-for-Java\" class=\"headerlink\" title=\"三. jinfo(Configuration Info for Java)\"></a>三. jinfo(Configuration Info for Java)</h2><h3 id=\"1-介绍-2\"><a href=\"#1-介绍-2\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   实时地查看和调整虚拟机各项参数</p>\n<h3 id=\"2-格式-1\"><a href=\"#2-格式-1\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jinfo [option] pid 如 <code>jinfo -flags 14232</code></p>\n<h3 id=\"3-参数-1\"><a href=\"#3-参数-1\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-flag &lt;name&gt;</strong>: to print the value of the named VM flag. (输出JVM参数名为name的参数信息)</li>\n<li><strong>-flag +/-&lt;name&gt;</strong>: to enable or disable the named VM flag. (添加或除去JVM参数名为name的参数)</li>\n<li><strong>-flag &lt;name&gt;=&lt;value&gt;</strong>: to set the named VM flag to the given value. (设置JVM参数， 如-Xmx=1024m)</li>\n<li><strong>-flags</strong>: to print VM flags. (输出JVM启动参数信息)</li>\n<li><strong>-sysprops</strong>: to print Java system properties. (输出<code>System.getProperties()</code>信息)</li>\n</ul>\n<h2 id=\"四-jmap-Memory-Map-for-Java\"><a href=\"#四-jmap-Memory-Map-for-Java\" class=\"headerlink\" title=\"四. jmap(Memory Map for Java)\"></a>四. jmap(Memory Map for Java)</h2><h3 id=\"1-介绍-3\"><a href=\"#1-介绍-3\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   命令用于生成堆转储快照(一般称为heapdump或dump文件)<br>   其他生成dump文件方式:通过参数<code>-XX：+HeapDumpOnOutOfMemoryError</code>OOM时生成、<code>-XX：+HeapDumpOnCtrlBreak</code>通过<br>   [Ctrl]+[Break]键让虚拟机生成dump文件、或者Linux通过命令kill -3 pid也能拿到dump</p>\n<h3 id=\"2-格式-2\"><a href=\"#2-格式-2\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jmap [option] vmid </p>\n<h3 id=\"3-参数-2\"><a href=\"#3-参数-2\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-dump</strong>: 生成java堆转存快照, 格式 <code>-dump:[live, ],format=b,file=&lt;filename&gt;</code>, live表示是否只导出存活的对象</li>\n<li><strong>-finalizerinfo</strong>: 显示在F-Queen里面等待Finalizer线程执行finalize()方法的对象，只在Linux/Solaris平台有效</li>\n<li><strong>-heap</strong>: 显示java堆详细信息，如使用哪种GC回收器，参数配置、分代状况等信息，只在Linux/Solaris平台有效</li>\n<li><strong>-histo</strong>: 显示堆中对象统计信息，包括类、实例数量及合计容量等</li>\n<li><strong>-permstat</strong>: 以ClassLoader为统计口径显示永久带内存状态，只在Linux/Solaris平台有效</li>\n<li><strong>-F</strong>: 当-dump没响应时，使用-F强制生成dump文件，只在Linux/Solaris平台有效</li>\n</ul>\n<h2 id=\"五-jhat-JVM-Heap-Analysis-Tool\"><a href=\"#五-jhat-JVM-Heap-Analysis-Tool\" class=\"headerlink\" title=\"五. jhat(JVM Heap Analysis Tool)\"></a>五. jhat(JVM Heap Analysis Tool)</h2><h3 id=\"1-介绍-4\"><a href=\"#1-介绍-4\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   分析jmap生成的堆转储快照(dump文件)</p>\n<h3 id=\"2-格式-3\"><a href=\"#2-格式-3\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jhat [-port 7001] &lt;dumpfile&gt;</p>\n<h3 id=\"3-参数-3\"><a href=\"#3-参数-3\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-port</strong>: server端口，可通过host:port访问</li>\n<li><strong>&lt;file&gt;</strong>: dump文件</li>\n<li><strong>-J&lt;flag&gt;</strong>: 运行参数,如: <code>-J-mx512m</code></li>\n</ul>\n<h2 id=\"六-jstack-Stack-Trace-for-Java\"><a href=\"#六-jstack-Stack-Trace-for-Java\" class=\"headerlink\" title=\"六. jstack(Stack Trace for Java)\"></a>六. jstack(Stack Trace for Java)</h2><h3 id=\"1-介绍-5\"><a href=\"#1-介绍-5\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><p>   用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)<br>   线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，<br>   如线程间死锁、 死循环、 请求外部资源导致的长时间等待等都是导致线程长时间停顿的常见原因。 线程出现停顿的时候通过<br>   jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源</p>\n<h3 id=\"2-格式-4\"><a href=\"#2-格式-4\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>   jstack [option] vmid 如<code>jstack -l 14232</code></p>\n<h3 id=\"3-参数-4\"><a href=\"#3-参数-4\" class=\"headerlink\" title=\"3. 参数\"></a>3. 参数</h3><ul>\n<li><strong>-F</strong>: 当正常请求无响应时，强制输出线程堆栈</li>\n<li><strong>-l</strong>: 除堆栈外，显示关于锁的附加信息</li>\n<li><strong>-m</strong>: 如果调用到本地方法时，显示C/C++堆栈信息</li>\n</ul>\n<h3 id=\"4-日志分析\"><a href=\"#4-日志分析\" class=\"headerlink\" title=\"4. 日志分析\"></a>4. 日志分析</h3><ol>\n<li>线程分为New、Runnable、Running、Waiting、Timed_Waiting、Blocked、Dead等状态  <ul>\n<li><strong>New</strong>: 当线程对象创建时存在的状态，此时线程不可能执行；  </li>\n<li><strong>Runnable</strong>：当调用thread.start()后，线程变成为Runnable状态。只要得到CPU，就可以执行；  </li>\n<li><strong>Running</strong>：线程正在执行；  </li>\n<li><strong>Waiting</strong>：执行thread.join()或在锁对象调用obj.wait()等情况就会进该状态，表明线程正处于等待某个资源或条件发生来唤醒自己；  </li>\n<li><strong>Timed_Waiting</strong>：执行Thread.sleep(long)、thread.join(long)或obj.wait(long)等就会进该状态，与Waiting的区别在于Timed_Waiting的等待有时间限制；  </li>\n<li><strong>Blocked</strong>：如果进入同步方法或同步代码块，没有获取到锁，则会进入该状态；  </li>\n<li><strong>Dead</strong>：线程执行完毕，或者抛出了未捕获的异常之后，会进入dead状态，表示该线程结束  </li>\n</ul>\n</li>\n<li>其次，对于jstack日志，我们要着重关注如下关键信息  <ul>\n<li><strong>Deadlock</strong>：表示有死锁  </li>\n<li><strong>Waiting on condition</strong>：等待某个资源或条件发生来唤醒自己。具体需要结合jstacktrace来分析，比如线程正在sleep，网络读写繁忙而等待  </li>\n<li><strong>Blocked</strong>：阻塞  </li>\n<li><strong>Waiting on monitor entry</strong>：在等待获取锁  </li>\n<li><strong>in Object.wait()</strong>：获取锁后又执行obj.wait()放弃锁  </li>\n<li>对于Waiting on monitor entry 和 inObject.wait()的详细描述：Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，<br>它可以看成是对象或者Class的锁。每一个对象都有，也仅有一个 monitor。从下图中可以看出，每个 Monitor在某个时刻，只能被一个<br>线程拥有，该线程就是 “Active Thread”，而其它线程都是 “Waiting Thread”，分别在两个队列 “Entry Set”和 “Wait Set”里面<br>等候。在 “Entry Set”中等待的线程状态是”Waiting for monitor entry”，而在 “Wait Set”中等待的线程状态是 “in Object.wait()”</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-附录\"><a href=\"#5-附录\" class=\"headerlink\" title=\"5. 附录\"></a>5. 附录</h3><p>   在JDK1.5中在<code>java.lang.Thread</code>类中新增了<code>getAllStackTraces()</code>方法获取虚拟机所有的线程<code>StackTraceElement</code><br>   对象，实现了大部分jstack功能，实际项目中可页面展示</p>\n<h2 id=\"七-VisualVM-All-in-One-Java-Troubleshooting-Tool\"><a href=\"#七-VisualVM-All-in-One-Java-Troubleshooting-Tool\" class=\"headerlink\" title=\"七. VisualVM(All-in-One Java Troubleshooting Tool)\"></a>七. VisualVM(All-in-One Java Troubleshooting Tool)</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>  是到目前为止随JDK发布的功能最强大的运行监视和故障处理程序，并且可以预见在未来一段时间内都是官方主力发展的虚拟机故障处理工具。<br>  官方在VisualVM的软件说明中写上了“All-in-One”的描述字样，预示着它除了运行监视、 故障处理外，还提供了很多其他方面的功能。</p>\n<h3 id=\"远程监控\"><a href=\"#远程监控\" class=\"headerlink\" title=\"远程监控\"></a>远程监控</h3><ul>\n<li><p>1、远程服务器启动jstatd服务<br>创建配置文件jstatd.policy内容为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant codebase &quot;file:$&#123;java.home&#125;/../lib/tools.jar&quot; &#123;  </span><br><span class=\"line\">   permission java.security.AllPermission;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>启动服务:<code>jstatd -J-Djava.security.policy=jstatd.policy -p 8701</code></p>\n</li>\n<li><p>2、启动应用参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-Dcom.sun.management.jmxremote=true </span><br><span class=\"line\">-Dcom.sun.management.jmxremote.port=9090 </span><br><span class=\"line\">-Dcom.sun.management.jmxremote.ssl=false </span><br><span class=\"line\">-Dcom.sun.management.jmxremote.authenticate=false</span><br><span class=\"line\">-Djava.rmi.server.hostname=192.168.0.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、启动jvisualvm,操作步骤:<br>远程 -&gt; 添加远程主机 -&gt; 添加JMX链接</p>\n</li>\n</ul>\n<h2 id=\"八-案列\"><a href=\"#八-案列\" class=\"headerlink\" title=\"八. 案列\"></a>八. 案列</h2><h3 id=\"1-利用jstack调试线程堆栈信息\"><a href=\"#1-利用jstack调试线程堆栈信息\" class=\"headerlink\" title=\"1. 利用jstack调试线程堆栈信息\"></a>1. 利用jstack调试线程堆栈信息</h3><ol>\n<li>jps得到PID，如14232</li>\n<li>查看进程PID的线程耗时情况,命令<code>ps -Lfp pid</code>或<code>top -Hp pid</code>找到最耗时的线程ID 如14253</li>\n<li>获取线程ID16进制编码<code>print &quot;%x\\n&quot; 14253</code>为37ad</li>\n<li>用jstack获取线程堆栈信息<code>jstack 14232 |grep 37ad</code>打印如下信息:<br><code>&quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007f772c00f800 nid=0x37ad waiting on condition</code><br>通过该日志分析表示该线程在等待某个资源来唤醒</li>\n</ol>\n"},{"layout":"post","title":"Pseudo Distributed Hadoop Install","thumbnail":"/images/hadoop/hadoop_logo.jpg","date":"2018-10-26T13:11:27.000Z","author":"Crab2Died","_content":"\n## 一 环境准备\n### 准备Ubuntu、JDK8、Hadoop2.8.5\n   [安装Ubuntu https://www.ubuntu.com/download/desktop](https://www.ubuntu.com/download/desktop)\n   [安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html](https://www.oracle.com/technetwork/java/javase/downloads/index.html)\n   [下载Hadoop2.8.5 http://hadoop.apache.org/](http://hadoop.apache.org/)\n\n### 其他准备\n#### 1. 更新apt `sudo apt-get update`\n#### 2. SSH安装，配置无密码SSH登入\n##### 2.1 SSH安装 `sudo apt-get install openssh-server`\n##### 2.2 配置SSH无密码登入\n   ```bash\n     cd ~/.ssh/                            # 若没有该目录，请先执行一次ssh crab2died\n     ssh-keygen -t rsa                     # 会有提示，都按回车就可以\n     cat ./id_rsa.pub >> ./authorized_keys # 加入授权\n     ssh crab2died                         # 验证无密码登入\n   ```\n#### 3. 修改hosts\n   ```bash\n     sudo vi /etc/hosts\n     # 添加 \n     本机ip   crab2died\n   ```\n## 二 安装Hadoop\n### 1. 解压Hadoop\n   ```bash\n     cd ~\n     sudo tar -zxf ~/Downloads/hadoop-2.8.5.tar.gz -C /usr/local # 解压到/usr/local中\n     cd /usr/local/                                              \n     chmod -R 777 ./hadoop-2.8.5                                 # 设置权限\n   ```\n### 2. 设置Hadoop环境变量\n   ```bash\n     sudo vi /etc/profile\n     # 添加\n     export HADOOP_HOME=/usr/local/hadoop-2.8.5 \n     export PATH=$PATH:${HADOOP_HOME}/sbin:${HADOOP_HOME}/bin\n     # 保存执行\n     source /etc/profile\n   ```\n### 3. 验证Hadoop版本\n   ```bash\n     hadoop version    # 成功会返回版本信息\n   ```\n### 4. 伪分布式配置\n#### 4.1 进入`${HADOOP_HOME}/etc/hadoop`目录中，修改以下文件\n##### 4.1.1 修改 hadoop-env.sh  \n   将`export JAVA_HOME=${JAVA_HOME}`改成`export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录`\n##### 4.1.2 修改 core-site.xml    \n   ```xml\n     <configuration>\n         <property>\n             <name>hadoop.tmp.dir</name>\n             <value>file:/home/crab2died/hadoop/tmp</value>\n             <description>Abase for other temporary directories.</description>\n         </property>\n         <property>\n             <name>fs.defaultFS</name>\n             <value>hdfs://crab2died:9000</value>\n         </property>\n     </configuration>\n   ```\n##### 4.1.3 修改 hdfs-site.xml\n   ```xml\n     <configuration>\n        <property>\n            <name>dfs.nameservices</name>\n            <value>hadoop-cluster</value>\n        </property>\n        <property>\n            <name>dfs.replication</name>\n            <value>1</value>\n        </property>      \n        <property>\n            <name>dfs.namenode.name.dir</name>\n            <value>file:/home/crab2died/hadoop/hdfs/nn</value>\n        </property>\n        <property>\n            <name>dfs.namenode.checkpoint.dir</name>\n            <value>file:/home/crab2died/hadoop/hdfs/snn</value>\n        </property>\n        <property>\n            <name>dfs.namenode.checkpoint.edits.dir</name>\n            <value>file:/home/crab2died/hadoop/hdfs/snn</value>\n        </property>\n        <property>\n            <name>dfs.datanode.data.dir</name>\n            <value>file:/home/crab2died/hadoop/hdfs/dn</value>\n        </property>\n     </configuration>\n   ```\n##### 4.1.4 先复制`cp mapred-site.xml.template mapred-site.xml`,再修改 mapred-site.xml\n   ```xml\n     <configuration>\n         <property>\n              <name>mapreduce.framework.name</name>\n              <value>yarn</value>\n         </property>\n     </configuration>\n   ```\n##### 4.1.5 修改 yarn-site.xml\n   ```xml\n     <configuration>\n        <property>\n            <name>yarn.resourcemanager.hostname</name>\n            <value>crab2died</value>\n        </property>\n        <property>\n            <name>yarn.nodemanager.aux-services</name>\n            <value>mapreduce_shuffle</value>\n        </property>\n        <property>\n            <name>yarn.nodemanager.local-dirs</name>\n            <value>file:/home/crab2died/hadoop/yarn/nm</value>\n        </property>\n     </configuration>\n   ```\n### 5. 格式化HDFS NameNode\n   ```bash\n     hdfs namenode -format\n   ```\n### 6. 启动集群\n#### 6.1 启动HDFS集群\n   ```bash\n     hadoop-daemon.sh start namenode\n     hadoop-daemon.sh start datanode\n     hadoop-daemon.sh start secondarynamenode  # 伪分布式才有\n   ```\n#### 6.2 启动YARN\n   ```bash\n     yarn-daemon.sh start resourcemanager\n     yarn-daemon.sh start nodemanager\n   ```\n### 7. jps查看进程  \n   ```bash\n     jps\n     1213 NameNOde\n     1261 NodeManager\n     1521 ResourceManager\n     1722 DataNode\n     1732 SecondrayNameNode     \n   ```\n### 8. 查看HDFS管理界面:  \n   [http://crab2died:50070](http://crab2died:50070)\n### 9. 查看YARN管理界面:  \n   [http://crab2died:8088](http://crab2died:8088)\n","source":"_posts/pseudo-distributed-hadoop-install.md","raw":"---\nlayout: post\ntitle: Pseudo Distributed Hadoop Install\nthumbnail: /images/hadoop/hadoop_logo.jpg\ndate: 2018-10-26 21:11:27 +0800\nauthor: Crab2Died\ncategories: Big Data\ntags: \n  - Big Data\n  - Hadoop\n---\n\n## 一 环境准备\n### 准备Ubuntu、JDK8、Hadoop2.8.5\n   [安装Ubuntu https://www.ubuntu.com/download/desktop](https://www.ubuntu.com/download/desktop)\n   [安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html](https://www.oracle.com/technetwork/java/javase/downloads/index.html)\n   [下载Hadoop2.8.5 http://hadoop.apache.org/](http://hadoop.apache.org/)\n\n### 其他准备\n#### 1. 更新apt `sudo apt-get update`\n#### 2. SSH安装，配置无密码SSH登入\n##### 2.1 SSH安装 `sudo apt-get install openssh-server`\n##### 2.2 配置SSH无密码登入\n   ```bash\n     cd ~/.ssh/                            # 若没有该目录，请先执行一次ssh crab2died\n     ssh-keygen -t rsa                     # 会有提示，都按回车就可以\n     cat ./id_rsa.pub >> ./authorized_keys # 加入授权\n     ssh crab2died                         # 验证无密码登入\n   ```\n#### 3. 修改hosts\n   ```bash\n     sudo vi /etc/hosts\n     # 添加 \n     本机ip   crab2died\n   ```\n## 二 安装Hadoop\n### 1. 解压Hadoop\n   ```bash\n     cd ~\n     sudo tar -zxf ~/Downloads/hadoop-2.8.5.tar.gz -C /usr/local # 解压到/usr/local中\n     cd /usr/local/                                              \n     chmod -R 777 ./hadoop-2.8.5                                 # 设置权限\n   ```\n### 2. 设置Hadoop环境变量\n   ```bash\n     sudo vi /etc/profile\n     # 添加\n     export HADOOP_HOME=/usr/local/hadoop-2.8.5 \n     export PATH=$PATH:${HADOOP_HOME}/sbin:${HADOOP_HOME}/bin\n     # 保存执行\n     source /etc/profile\n   ```\n### 3. 验证Hadoop版本\n   ```bash\n     hadoop version    # 成功会返回版本信息\n   ```\n### 4. 伪分布式配置\n#### 4.1 进入`${HADOOP_HOME}/etc/hadoop`目录中，修改以下文件\n##### 4.1.1 修改 hadoop-env.sh  \n   将`export JAVA_HOME=${JAVA_HOME}`改成`export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录`\n##### 4.1.2 修改 core-site.xml    \n   ```xml\n     <configuration>\n         <property>\n             <name>hadoop.tmp.dir</name>\n             <value>file:/home/crab2died/hadoop/tmp</value>\n             <description>Abase for other temporary directories.</description>\n         </property>\n         <property>\n             <name>fs.defaultFS</name>\n             <value>hdfs://crab2died:9000</value>\n         </property>\n     </configuration>\n   ```\n##### 4.1.3 修改 hdfs-site.xml\n   ```xml\n     <configuration>\n        <property>\n            <name>dfs.nameservices</name>\n            <value>hadoop-cluster</value>\n        </property>\n        <property>\n            <name>dfs.replication</name>\n            <value>1</value>\n        </property>      \n        <property>\n            <name>dfs.namenode.name.dir</name>\n            <value>file:/home/crab2died/hadoop/hdfs/nn</value>\n        </property>\n        <property>\n            <name>dfs.namenode.checkpoint.dir</name>\n            <value>file:/home/crab2died/hadoop/hdfs/snn</value>\n        </property>\n        <property>\n            <name>dfs.namenode.checkpoint.edits.dir</name>\n            <value>file:/home/crab2died/hadoop/hdfs/snn</value>\n        </property>\n        <property>\n            <name>dfs.datanode.data.dir</name>\n            <value>file:/home/crab2died/hadoop/hdfs/dn</value>\n        </property>\n     </configuration>\n   ```\n##### 4.1.4 先复制`cp mapred-site.xml.template mapred-site.xml`,再修改 mapred-site.xml\n   ```xml\n     <configuration>\n         <property>\n              <name>mapreduce.framework.name</name>\n              <value>yarn</value>\n         </property>\n     </configuration>\n   ```\n##### 4.1.5 修改 yarn-site.xml\n   ```xml\n     <configuration>\n        <property>\n            <name>yarn.resourcemanager.hostname</name>\n            <value>crab2died</value>\n        </property>\n        <property>\n            <name>yarn.nodemanager.aux-services</name>\n            <value>mapreduce_shuffle</value>\n        </property>\n        <property>\n            <name>yarn.nodemanager.local-dirs</name>\n            <value>file:/home/crab2died/hadoop/yarn/nm</value>\n        </property>\n     </configuration>\n   ```\n### 5. 格式化HDFS NameNode\n   ```bash\n     hdfs namenode -format\n   ```\n### 6. 启动集群\n#### 6.1 启动HDFS集群\n   ```bash\n     hadoop-daemon.sh start namenode\n     hadoop-daemon.sh start datanode\n     hadoop-daemon.sh start secondarynamenode  # 伪分布式才有\n   ```\n#### 6.2 启动YARN\n   ```bash\n     yarn-daemon.sh start resourcemanager\n     yarn-daemon.sh start nodemanager\n   ```\n### 7. jps查看进程  \n   ```bash\n     jps\n     1213 NameNOde\n     1261 NodeManager\n     1521 ResourceManager\n     1722 DataNode\n     1732 SecondrayNameNode     \n   ```\n### 8. 查看HDFS管理界面:  \n   [http://crab2died:50070](http://crab2died:50070)\n### 9. 查看YARN管理界面:  \n   [http://crab2died:8088](http://crab2died:8088)\n","slug":"pseudo-distributed-hadoop-install","published":1,"updated":"2018-12-13T11:43:21.290Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vji000juoilqbt80q5h","content":"<h2 id=\"一-环境准备\"><a href=\"#一-环境准备\" class=\"headerlink\" title=\"一 环境准备\"></a>一 环境准备</h2><h3 id=\"准备Ubuntu、JDK8、Hadoop2-8-5\"><a href=\"#准备Ubuntu、JDK8、Hadoop2-8-5\" class=\"headerlink\" title=\"准备Ubuntu、JDK8、Hadoop2.8.5\"></a>准备Ubuntu、JDK8、Hadoop2.8.5</h3><p>   <a href=\"https://www.ubuntu.com/download/desktop\" target=\"_blank\" rel=\"noopener\">安装Ubuntu https://www.ubuntu.com/download/desktop</a><br>   <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>   <a href=\"http://hadoop.apache.org/\" target=\"_blank\" rel=\"noopener\">下载Hadoop2.8.5 http://hadoop.apache.org/</a></p>\n<h3 id=\"其他准备\"><a href=\"#其他准备\" class=\"headerlink\" title=\"其他准备\"></a>其他准备</h3><h4 id=\"1-更新apt-sudo-apt-get-update\"><a href=\"#1-更新apt-sudo-apt-get-update\" class=\"headerlink\" title=\"1. 更新apt sudo apt-get update\"></a>1. 更新apt <code>sudo apt-get update</code></h4><h4 id=\"2-SSH安装，配置无密码SSH登入\"><a href=\"#2-SSH安装，配置无密码SSH登入\" class=\"headerlink\" title=\"2. SSH安装，配置无密码SSH登入\"></a>2. SSH安装，配置无密码SSH登入</h4><h5 id=\"2-1-SSH安装-sudo-apt-get-install-openssh-server\"><a href=\"#2-1-SSH安装-sudo-apt-get-install-openssh-server\" class=\"headerlink\" title=\"2.1 SSH安装 sudo apt-get install openssh-server\"></a>2.1 SSH安装 <code>sudo apt-get install openssh-server</code></h5><h5 id=\"2-2-配置SSH无密码登入\"><a href=\"#2-2-配置SSH无密码登入\" class=\"headerlink\" title=\"2.2 配置SSH无密码登入\"></a>2.2 配置SSH无密码登入</h5>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh/                            <span class=\"comment\"># 若没有该目录，请先执行一次ssh crab2died</span></span><br><span class=\"line\">ssh-keygen -t rsa                     <span class=\"comment\"># 会有提示，都按回车就可以</span></span><br><span class=\"line\">cat ./id_rsa.pub &gt;&gt; ./authorized_keys <span class=\"comment\"># 加入授权</span></span><br><span class=\"line\">ssh crab2died                         <span class=\"comment\"># 验证无密码登入</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-修改hosts\"><a href=\"#3-修改hosts\" class=\"headerlink\" title=\"3. 修改hosts\"></a>3. 修改hosts</h4>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/hosts</span><br><span class=\"line\"><span class=\"comment\"># 添加 </span></span><br><span class=\"line\">本机ip   crab2died</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-安装Hadoop\"><a href=\"#二-安装Hadoop\" class=\"headerlink\" title=\"二 安装Hadoop\"></a>二 安装Hadoop</h2><h3 id=\"1-解压Hadoop\"><a href=\"#1-解压Hadoop\" class=\"headerlink\" title=\"1. 解压Hadoop\"></a>1. 解压Hadoop</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">sudo tar -zxf ~/Downloads/hadoop-2.8.5.tar.gz -C /usr/<span class=\"built_in\">local</span> <span class=\"comment\"># 解压到/usr/local中</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/                                              </span><br><span class=\"line\">chmod -R 777 ./hadoop-2.8.5                                 <span class=\"comment\"># 设置权限</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-设置Hadoop环境变量\"><a href=\"#2-设置Hadoop环境变量\" class=\"headerlink\" title=\"2. 设置Hadoop环境变量\"></a>2. 设置Hadoop环境变量</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 添加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/<span class=\"built_in\">local</span>/hadoop-2.8.5 </span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$&#123;HADOOP_HOME&#125;</span>/sbin:<span class=\"variable\">$&#123;HADOOP_HOME&#125;</span>/bin</span><br><span class=\"line\"><span class=\"comment\"># 保存执行</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-验证Hadoop版本\"><a href=\"#3-验证Hadoop版本\" class=\"headerlink\" title=\"3. 验证Hadoop版本\"></a>3. 验证Hadoop版本</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hadoop version    <span class=\"comment\"># 成功会返回版本信息</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-伪分布式配置\"><a href=\"#4-伪分布式配置\" class=\"headerlink\" title=\"4. 伪分布式配置\"></a>4. 伪分布式配置</h3><h4 id=\"4-1-进入-HADOOP-HOME-etc-hadoop目录中，修改以下文件\"><a href=\"#4-1-进入-HADOOP-HOME-etc-hadoop目录中，修改以下文件\" class=\"headerlink\" title=\"4.1 进入${HADOOP_HOME}/etc/hadoop目录中，修改以下文件\"></a>4.1 进入<code>${HADOOP_HOME}/etc/hadoop</code>目录中，修改以下文件</h4><h5 id=\"4-1-1-修改-hadoop-env-sh\"><a href=\"#4-1-1-修改-hadoop-env-sh\" class=\"headerlink\" title=\"4.1.1 修改 hadoop-env.sh\"></a>4.1.1 修改 hadoop-env.sh</h5><p>   将<code>export JAVA_HOME=${JAVA_HOME}</code>改成<code>export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录</code></p>\n<h5 id=\"4-1-2-修改-core-site-xml\"><a href=\"#4-1-2-修改-core-site-xml\" class=\"headerlink\" title=\"4.1.2 修改 core-site.xml\"></a>4.1.2 修改 core-site.xml</h5>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Abase for other temporary directories.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://crab2died:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-1-3-修改-hdfs-site-xml\"><a href=\"#4-1-3-修改-hdfs-site-xml\" class=\"headerlink\" title=\"4.1.3 修改 hdfs-site.xml\"></a>4.1.3 修改 hdfs-site.xml</h5>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.nameservices<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-cluster<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>      </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/nn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/snn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.checkpoint.edits.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/snn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/dn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-1-4-先复制cp-mapred-site-xml-template-mapred-site-xml-再修改-mapred-site-xml\"><a href=\"#4-1-4-先复制cp-mapred-site-xml-template-mapred-site-xml-再修改-mapred-site-xml\" class=\"headerlink\" title=\"4.1.4 先复制cp mapred-site.xml.template mapred-site.xml,再修改 mapred-site.xml\"></a>4.1.4 先复制<code>cp mapred-site.xml.template mapred-site.xml</code>,再修改 mapred-site.xml</h5>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-1-5-修改-yarn-site-xml\"><a href=\"#4-1-5-修改-yarn-site-xml\" class=\"headerlink\" title=\"4.1.5 修改 yarn-site.xml\"></a>4.1.5 修改 yarn-site.xml</h5>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>crab2died<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/yarn/nm<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-格式化HDFS-NameNode\"><a href=\"#5-格式化HDFS-NameNode\" class=\"headerlink\" title=\"5. 格式化HDFS NameNode\"></a>5. 格式化HDFS NameNode</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hdfs namenode -format</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-启动集群\"><a href=\"#6-启动集群\" class=\"headerlink\" title=\"6. 启动集群\"></a>6. 启动集群</h3><h4 id=\"6-1-启动HDFS集群\"><a href=\"#6-1-启动HDFS集群\" class=\"headerlink\" title=\"6.1 启动HDFS集群\"></a>6.1 启动HDFS集群</h4>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hadoop-daemon.sh start namenode</span><br><span class=\"line\">hadoop-daemon.sh start datanode</span><br><span class=\"line\">hadoop-daemon.sh start secondarynamenode  <span class=\"comment\"># 伪分布式才有</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-2-启动YARN\"><a href=\"#6-2-启动YARN\" class=\"headerlink\" title=\"6.2 启动YARN\"></a>6.2 启动YARN</h4>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn-daemon.sh start resourcemanager</span><br><span class=\"line\">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-jps查看进程\"><a href=\"#7-jps查看进程\" class=\"headerlink\" title=\"7. jps查看进程\"></a>7. jps查看进程</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jps</span><br><span class=\"line\">1213 NameNOde</span><br><span class=\"line\">1261 NodeManager</span><br><span class=\"line\">1521 ResourceManager</span><br><span class=\"line\">1722 DataNode</span><br><span class=\"line\">1732 SecondrayNameNode</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-查看HDFS管理界面\"><a href=\"#8-查看HDFS管理界面\" class=\"headerlink\" title=\"8. 查看HDFS管理界面:\"></a>8. 查看HDFS管理界面:</h3><p>   <a href=\"http://crab2died:50070\" target=\"_blank\" rel=\"noopener\">http://crab2died:50070</a></p>\n<h3 id=\"9-查看YARN管理界面\"><a href=\"#9-查看YARN管理界面\" class=\"headerlink\" title=\"9. 查看YARN管理界面:\"></a>9. 查看YARN管理界面:</h3><p>   <a href=\"http://crab2died:8088\" target=\"_blank\" rel=\"noopener\">http://crab2died:8088</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-环境准备\"><a href=\"#一-环境准备\" class=\"headerlink\" title=\"一 环境准备\"></a>一 环境准备</h2><h3 id=\"准备Ubuntu、JDK8、Hadoop2-8-5\"><a href=\"#准备Ubuntu、JDK8、Hadoop2-8-5\" class=\"headerlink\" title=\"准备Ubuntu、JDK8、Hadoop2.8.5\"></a>准备Ubuntu、JDK8、Hadoop2.8.5</h3><p>   <a href=\"https://www.ubuntu.com/download/desktop\" target=\"_blank\" rel=\"noopener\">安装Ubuntu https://www.ubuntu.com/download/desktop</a><br>   <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>   <a href=\"http://hadoop.apache.org/\" target=\"_blank\" rel=\"noopener\">下载Hadoop2.8.5 http://hadoop.apache.org/</a></p>\n<h3 id=\"其他准备\"><a href=\"#其他准备\" class=\"headerlink\" title=\"其他准备\"></a>其他准备</h3><h4 id=\"1-更新apt-sudo-apt-get-update\"><a href=\"#1-更新apt-sudo-apt-get-update\" class=\"headerlink\" title=\"1. 更新apt sudo apt-get update\"></a>1. 更新apt <code>sudo apt-get update</code></h4><h4 id=\"2-SSH安装，配置无密码SSH登入\"><a href=\"#2-SSH安装，配置无密码SSH登入\" class=\"headerlink\" title=\"2. SSH安装，配置无密码SSH登入\"></a>2. SSH安装，配置无密码SSH登入</h4><h5 id=\"2-1-SSH安装-sudo-apt-get-install-openssh-server\"><a href=\"#2-1-SSH安装-sudo-apt-get-install-openssh-server\" class=\"headerlink\" title=\"2.1 SSH安装 sudo apt-get install openssh-server\"></a>2.1 SSH安装 <code>sudo apt-get install openssh-server</code></h5><h5 id=\"2-2-配置SSH无密码登入\"><a href=\"#2-2-配置SSH无密码登入\" class=\"headerlink\" title=\"2.2 配置SSH无密码登入\"></a>2.2 配置SSH无密码登入</h5>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh/                            <span class=\"comment\"># 若没有该目录，请先执行一次ssh crab2died</span></span><br><span class=\"line\">ssh-keygen -t rsa                     <span class=\"comment\"># 会有提示，都按回车就可以</span></span><br><span class=\"line\">cat ./id_rsa.pub &gt;&gt; ./authorized_keys <span class=\"comment\"># 加入授权</span></span><br><span class=\"line\">ssh crab2died                         <span class=\"comment\"># 验证无密码登入</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-修改hosts\"><a href=\"#3-修改hosts\" class=\"headerlink\" title=\"3. 修改hosts\"></a>3. 修改hosts</h4>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/hosts</span><br><span class=\"line\"><span class=\"comment\"># 添加 </span></span><br><span class=\"line\">本机ip   crab2died</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-安装Hadoop\"><a href=\"#二-安装Hadoop\" class=\"headerlink\" title=\"二 安装Hadoop\"></a>二 安装Hadoop</h2><h3 id=\"1-解压Hadoop\"><a href=\"#1-解压Hadoop\" class=\"headerlink\" title=\"1. 解压Hadoop\"></a>1. 解压Hadoop</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">sudo tar -zxf ~/Downloads/hadoop-2.8.5.tar.gz -C /usr/<span class=\"built_in\">local</span> <span class=\"comment\"># 解压到/usr/local中</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/                                              </span><br><span class=\"line\">chmod -R 777 ./hadoop-2.8.5                                 <span class=\"comment\"># 设置权限</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-设置Hadoop环境变量\"><a href=\"#2-设置Hadoop环境变量\" class=\"headerlink\" title=\"2. 设置Hadoop环境变量\"></a>2. 设置Hadoop环境变量</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 添加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/<span class=\"built_in\">local</span>/hadoop-2.8.5 </span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$&#123;HADOOP_HOME&#125;</span>/sbin:<span class=\"variable\">$&#123;HADOOP_HOME&#125;</span>/bin</span><br><span class=\"line\"><span class=\"comment\"># 保存执行</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-验证Hadoop版本\"><a href=\"#3-验证Hadoop版本\" class=\"headerlink\" title=\"3. 验证Hadoop版本\"></a>3. 验证Hadoop版本</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hadoop version    <span class=\"comment\"># 成功会返回版本信息</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-伪分布式配置\"><a href=\"#4-伪分布式配置\" class=\"headerlink\" title=\"4. 伪分布式配置\"></a>4. 伪分布式配置</h3><h4 id=\"4-1-进入-HADOOP-HOME-etc-hadoop目录中，修改以下文件\"><a href=\"#4-1-进入-HADOOP-HOME-etc-hadoop目录中，修改以下文件\" class=\"headerlink\" title=\"4.1 进入${HADOOP_HOME}/etc/hadoop目录中，修改以下文件\"></a>4.1 进入<code>${HADOOP_HOME}/etc/hadoop</code>目录中，修改以下文件</h4><h5 id=\"4-1-1-修改-hadoop-env-sh\"><a href=\"#4-1-1-修改-hadoop-env-sh\" class=\"headerlink\" title=\"4.1.1 修改 hadoop-env.sh\"></a>4.1.1 修改 hadoop-env.sh</h5><p>   将<code>export JAVA_HOME=${JAVA_HOME}</code>改成<code>export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录</code></p>\n<h5 id=\"4-1-2-修改-core-site-xml\"><a href=\"#4-1-2-修改-core-site-xml\" class=\"headerlink\" title=\"4.1.2 修改 core-site.xml\"></a>4.1.2 修改 core-site.xml</h5>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Abase for other temporary directories.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://crab2died:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-1-3-修改-hdfs-site-xml\"><a href=\"#4-1-3-修改-hdfs-site-xml\" class=\"headerlink\" title=\"4.1.3 修改 hdfs-site.xml\"></a>4.1.3 修改 hdfs-site.xml</h5>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.nameservices<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hadoop-cluster<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>      </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/nn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/snn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.checkpoint.edits.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/snn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/hdfs/dn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-1-4-先复制cp-mapred-site-xml-template-mapred-site-xml-再修改-mapred-site-xml\"><a href=\"#4-1-4-先复制cp-mapred-site-xml-template-mapred-site-xml-再修改-mapred-site-xml\" class=\"headerlink\" title=\"4.1.4 先复制cp mapred-site.xml.template mapred-site.xml,再修改 mapred-site.xml\"></a>4.1.4 先复制<code>cp mapred-site.xml.template mapred-site.xml</code>,再修改 mapred-site.xml</h5>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-1-5-修改-yarn-site-xml\"><a href=\"#4-1-5-修改-yarn-site-xml\" class=\"headerlink\" title=\"4.1.5 修改 yarn-site.xml\"></a>4.1.5 修改 yarn-site.xml</h5>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>crab2died<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>file:/home/crab2died/hadoop/yarn/nm<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-格式化HDFS-NameNode\"><a href=\"#5-格式化HDFS-NameNode\" class=\"headerlink\" title=\"5. 格式化HDFS NameNode\"></a>5. 格式化HDFS NameNode</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hdfs namenode -format</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-启动集群\"><a href=\"#6-启动集群\" class=\"headerlink\" title=\"6. 启动集群\"></a>6. 启动集群</h3><h4 id=\"6-1-启动HDFS集群\"><a href=\"#6-1-启动HDFS集群\" class=\"headerlink\" title=\"6.1 启动HDFS集群\"></a>6.1 启动HDFS集群</h4>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hadoop-daemon.sh start namenode</span><br><span class=\"line\">hadoop-daemon.sh start datanode</span><br><span class=\"line\">hadoop-daemon.sh start secondarynamenode  <span class=\"comment\"># 伪分布式才有</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-2-启动YARN\"><a href=\"#6-2-启动YARN\" class=\"headerlink\" title=\"6.2 启动YARN\"></a>6.2 启动YARN</h4>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn-daemon.sh start resourcemanager</span><br><span class=\"line\">yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-jps查看进程\"><a href=\"#7-jps查看进程\" class=\"headerlink\" title=\"7. jps查看进程\"></a>7. jps查看进程</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jps</span><br><span class=\"line\">1213 NameNOde</span><br><span class=\"line\">1261 NodeManager</span><br><span class=\"line\">1521 ResourceManager</span><br><span class=\"line\">1722 DataNode</span><br><span class=\"line\">1732 SecondrayNameNode</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-查看HDFS管理界面\"><a href=\"#8-查看HDFS管理界面\" class=\"headerlink\" title=\"8. 查看HDFS管理界面:\"></a>8. 查看HDFS管理界面:</h3><p>   <a href=\"http://crab2died:50070\" target=\"_blank\" rel=\"noopener\">http://crab2died:50070</a></p>\n<h3 id=\"9-查看YARN管理界面\"><a href=\"#9-查看YARN管理界面\" class=\"headerlink\" title=\"9. 查看YARN管理界面:\"></a>9. 查看YARN管理界面:</h3><p>   <a href=\"http://crab2died:8088\" target=\"_blank\" rel=\"noopener\">http://crab2died:8088</a></p>\n"},{"layout":"post","title":"Pseudo Distributed Hbase Install","thumbnail":"/images/hbase/hbase_logo_00.png","date":"2018-10-26T13:45:27.000Z","author":"Crab2Died","_content":"\n## 一 环境准备\n### 1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0\n   [安装Ubuntu https://www.ubuntu.com/download/desktop](https://www.ubuntu.com/download/desktop);\n   [安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html](https://www.oracle.com/technetwork/java/javase/downloads/index.html);\n   [安装Hadoop2.8.5 http://hadoop.apache.org/](http://hadoop.apache.org/)\n   [下载HBase2.1.0 http://hbase.apache.org/](http://hbase.apache.org/)\n\n### 2. 其他准备\n   部署Hadoop详见: [Hadoop 伪分布式部署](/posts/2018/10/26/pseudo-distributed-hadoop-install/)\n   \n## 二 部署HBase\n### 1. 解压HBase\n   ```bash\n      cd ~\n      sudo tar -zxf ~/Downloads/hbase-2.1.0-bin.tar.gz -C /usr/local # 解压到/usr/local中\n      cd /usr/local/                                              \n      chmod -R 777 ./hbase-2.1.0                                     # 设置权限\n   ```\n### 2. 配置HBase环境变量\n   ```bash\n      export HBASE_HOME=//usr/local/hbase-2.1.0\n      export HBASE_CONF_DIR=${HBASE_HOME}/conf\n      export HBASE_CLASS_PATH=${HBASE_CONF_DIR}\n      export PATH=$PATH:${HBASE_HOME}/bin\n   ```\n### 3. 修改环境${HBASE_HOME}/conf/hbase-evn.sh配置\n   ```bash\n      # 增加以下配置\n      export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录\n      export HBASE_MANAGES_ZK=true              # 使用HBase自带zookeeper\n   ```\n### 4. 修改配置文件${HBASE_HOME}/conf/hbase-site.xml\n   ```xml\n      <configuration>\n          <property>\n              <name>hbase.rootdir</name>\n              <value>hdfs://crab2died:9000</value>\n          </property>\n          <property> \n              <name>hbase.cluster.distributed</name>\n              <value>true</value> \n          </property>\n      </configuration>\n   ```\n### 5. 修改文件${HBASE_HOME}/conf/regionservers\n   将`localhost`改为`crab2died`\n### 6. 解决HBase master启动错误\n   ```bash\n      # 执行cp \n      cd /usr/local/hbase-2.1.0\n      cp ./lib/client-facing-thirdparty/htrace-core-3.1.0-incubating.jar ./lib\n   ```\n### 7. 验证版本\n   ```bash\n      hbase version\n      # 成功则会返回版本信息\n   ```\n## 三 启动HBase\n### 1. 先启动Hadoop,详见: [Hadoop 伪分布式部署](/posts/2018/10/26/pseudo-distributed-hadoop-install/)\n### 2. 启动HBase\n   ```bash\n      start-hbase.sh \n   ```\n### 3. jps查看进程  \n   ```bash\n      jps\n      1257 HQuorumPeer\n      1285 HMaster\n      1312 HRegionServer\n   ```\n### 4. 查看HBase管理界面:  \n   [http://crab2died:16030](http://crab2died:16030)\n### 5. 进入命令行管理:  \n   ```bash\n      hbase shell\n   ```","source":"_posts/pseudo-distributed-hbase-install.md","raw":"---\nlayout: post\ntitle: Pseudo Distributed Hbase Install\nthumbnail: /images/hbase/hbase_logo_00.png\ndate: 2018-10-26 21:45:27 +0800\nauthor: Crab2Died\ncategories: Big Data\ntags: \n  - Big Data\n  - HBase \n---\n\n## 一 环境准备\n### 1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0\n   [安装Ubuntu https://www.ubuntu.com/download/desktop](https://www.ubuntu.com/download/desktop);\n   [安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html](https://www.oracle.com/technetwork/java/javase/downloads/index.html);\n   [安装Hadoop2.8.5 http://hadoop.apache.org/](http://hadoop.apache.org/)\n   [下载HBase2.1.0 http://hbase.apache.org/](http://hbase.apache.org/)\n\n### 2. 其他准备\n   部署Hadoop详见: [Hadoop 伪分布式部署](/posts/2018/10/26/pseudo-distributed-hadoop-install/)\n   \n## 二 部署HBase\n### 1. 解压HBase\n   ```bash\n      cd ~\n      sudo tar -zxf ~/Downloads/hbase-2.1.0-bin.tar.gz -C /usr/local # 解压到/usr/local中\n      cd /usr/local/                                              \n      chmod -R 777 ./hbase-2.1.0                                     # 设置权限\n   ```\n### 2. 配置HBase环境变量\n   ```bash\n      export HBASE_HOME=//usr/local/hbase-2.1.0\n      export HBASE_CONF_DIR=${HBASE_HOME}/conf\n      export HBASE_CLASS_PATH=${HBASE_CONF_DIR}\n      export PATH=$PATH:${HBASE_HOME}/bin\n   ```\n### 3. 修改环境${HBASE_HOME}/conf/hbase-evn.sh配置\n   ```bash\n      # 增加以下配置\n      export JAVA_HOME=/usr/local/jdk1.8.0_181  # JDK根目录\n      export HBASE_MANAGES_ZK=true              # 使用HBase自带zookeeper\n   ```\n### 4. 修改配置文件${HBASE_HOME}/conf/hbase-site.xml\n   ```xml\n      <configuration>\n          <property>\n              <name>hbase.rootdir</name>\n              <value>hdfs://crab2died:9000</value>\n          </property>\n          <property> \n              <name>hbase.cluster.distributed</name>\n              <value>true</value> \n          </property>\n      </configuration>\n   ```\n### 5. 修改文件${HBASE_HOME}/conf/regionservers\n   将`localhost`改为`crab2died`\n### 6. 解决HBase master启动错误\n   ```bash\n      # 执行cp \n      cd /usr/local/hbase-2.1.0\n      cp ./lib/client-facing-thirdparty/htrace-core-3.1.0-incubating.jar ./lib\n   ```\n### 7. 验证版本\n   ```bash\n      hbase version\n      # 成功则会返回版本信息\n   ```\n## 三 启动HBase\n### 1. 先启动Hadoop,详见: [Hadoop 伪分布式部署](/posts/2018/10/26/pseudo-distributed-hadoop-install/)\n### 2. 启动HBase\n   ```bash\n      start-hbase.sh \n   ```\n### 3. jps查看进程  \n   ```bash\n      jps\n      1257 HQuorumPeer\n      1285 HMaster\n      1312 HRegionServer\n   ```\n### 4. 查看HBase管理界面:  \n   [http://crab2died:16030](http://crab2died:16030)\n### 5. 进入命令行管理:  \n   ```bash\n      hbase shell\n   ```","slug":"pseudo-distributed-hbase-install","published":1,"updated":"2018-12-12T15:04:12.767Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vjl000luoil4d17urqt","content":"<h2 id=\"一-环境准备\"><a href=\"#一-环境准备\" class=\"headerlink\" title=\"一 环境准备\"></a>一 环境准备</h2><h3 id=\"1-Ubuntu、JDK8、Hadoop2-8-5、HBase2-1-0\"><a href=\"#1-Ubuntu、JDK8、Hadoop2-8-5、HBase2-1-0\" class=\"headerlink\" title=\"1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0\"></a>1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0</h3><p>   <a href=\"https://www.ubuntu.com/download/desktop\" target=\"_blank\" rel=\"noopener\">安装Ubuntu https://www.ubuntu.com/download/desktop</a>;<br>   <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html</a>;<br>   <a href=\"http://hadoop.apache.org/\" target=\"_blank\" rel=\"noopener\">安装Hadoop2.8.5 http://hadoop.apache.org/</a><br>   <a href=\"http://hbase.apache.org/\" target=\"_blank\" rel=\"noopener\">下载HBase2.1.0 http://hbase.apache.org/</a></p>\n<h3 id=\"2-其他准备\"><a href=\"#2-其他准备\" class=\"headerlink\" title=\"2. 其他准备\"></a>2. 其他准备</h3><p>   部署Hadoop详见: <a href=\"/posts/2018/10/26/pseudo-distributed-hadoop-install/\">Hadoop 伪分布式部署</a></p>\n<h2 id=\"二-部署HBase\"><a href=\"#二-部署HBase\" class=\"headerlink\" title=\"二 部署HBase\"></a>二 部署HBase</h2><h3 id=\"1-解压HBase\"><a href=\"#1-解压HBase\" class=\"headerlink\" title=\"1. 解压HBase\"></a>1. 解压HBase</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">sudo tar -zxf ~/Downloads/hbase-2.1.0-bin.tar.gz -C /usr/<span class=\"built_in\">local</span> <span class=\"comment\"># 解压到/usr/local中</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/                                              </span><br><span class=\"line\">chmod -R 777 ./hbase-2.1.0                                     <span class=\"comment\"># 设置权限</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置HBase环境变量\"><a href=\"#2-配置HBase环境变量\" class=\"headerlink\" title=\"2. 配置HBase环境变量\"></a>2. 配置HBase环境变量</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HBASE_HOME=//usr/<span class=\"built_in\">local</span>/hbase-2.1.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_CONF_DIR=<span class=\"variable\">$&#123;HBASE_HOME&#125;</span>/conf</span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_CLASS_PATH=<span class=\"variable\">$&#123;HBASE_CONF_DIR&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$&#123;HBASE_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改环境-HBASE-HOME-conf-hbase-evn-sh配置\"><a href=\"#3-修改环境-HBASE-HOME-conf-hbase-evn-sh配置\" class=\"headerlink\" title=\"3. 修改环境${HBASE_HOME}/conf/hbase-evn.sh配置\"></a>3. 修改环境${HBASE_HOME}/conf/hbase-evn.sh配置</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加以下配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk1.8.0_181  <span class=\"comment\"># JDK根目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_MANAGES_ZK=<span class=\"literal\">true</span>              <span class=\"comment\"># 使用HBase自带zookeeper</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-修改配置文件-HBASE-HOME-conf-hbase-site-xml\"><a href=\"#4-修改配置文件-HBASE-HOME-conf-hbase-site-xml\" class=\"headerlink\" title=\"4. 修改配置文件${HBASE_HOME}/conf/hbase-site.xml\"></a>4. 修改配置文件${HBASE_HOME}/conf/hbase-site.xml</h3>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.rootdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://crab2died:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.cluster.distributed<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-修改文件-HBASE-HOME-conf-regionservers\"><a href=\"#5-修改文件-HBASE-HOME-conf-regionservers\" class=\"headerlink\" title=\"5. 修改文件${HBASE_HOME}/conf/regionservers\"></a>5. 修改文件${HBASE_HOME}/conf/regionservers</h3><p>   将<code>localhost</code>改为<code>crab2died</code></p>\n<h3 id=\"6-解决HBase-master启动错误\"><a href=\"#6-解决HBase-master启动错误\" class=\"headerlink\" title=\"6. 解决HBase master启动错误\"></a>6. 解决HBase master启动错误</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行cp </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/hbase-2.1.0</span><br><span class=\"line\">cp ./lib/client-facing-thirdparty/htrace-core-3.1.0-incubating.jar ./lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-验证版本\"><a href=\"#7-验证版本\" class=\"headerlink\" title=\"7. 验证版本\"></a>7. 验证版本</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hbase version</span><br><span class=\"line\"><span class=\"comment\"># 成功则会返回版本信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三-启动HBase\"><a href=\"#三-启动HBase\" class=\"headerlink\" title=\"三 启动HBase\"></a>三 启动HBase</h2><h3 id=\"1-先启动Hadoop-详见-Hadoop-伪分布式部署\"><a href=\"#1-先启动Hadoop-详见-Hadoop-伪分布式部署\" class=\"headerlink\" title=\"1. 先启动Hadoop,详见: Hadoop 伪分布式部署\"></a>1. 先启动Hadoop,详见: <a href=\"/posts/2018/10/26/pseudo-distributed-hadoop-install/\">Hadoop 伪分布式部署</a></h3><h3 id=\"2-启动HBase\"><a href=\"#2-启动HBase\" class=\"headerlink\" title=\"2. 启动HBase\"></a>2. 启动HBase</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-hbase.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-jps查看进程\"><a href=\"#3-jps查看进程\" class=\"headerlink\" title=\"3. jps查看进程\"></a>3. jps查看进程</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jps</span><br><span class=\"line\">1257 HQuorumPeer</span><br><span class=\"line\">1285 HMaster</span><br><span class=\"line\">1312 HRegionServer</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-查看HBase管理界面\"><a href=\"#4-查看HBase管理界面\" class=\"headerlink\" title=\"4. 查看HBase管理界面:\"></a>4. 查看HBase管理界面:</h3><p>   <a href=\"http://crab2died:16030\" target=\"_blank\" rel=\"noopener\">http://crab2died:16030</a></p>\n<h3 id=\"5-进入命令行管理\"><a href=\"#5-进入命令行管理\" class=\"headerlink\" title=\"5. 进入命令行管理:\"></a>5. 进入命令行管理:</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hbase shell</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-环境准备\"><a href=\"#一-环境准备\" class=\"headerlink\" title=\"一 环境准备\"></a>一 环境准备</h2><h3 id=\"1-Ubuntu、JDK8、Hadoop2-8-5、HBase2-1-0\"><a href=\"#1-Ubuntu、JDK8、Hadoop2-8-5、HBase2-1-0\" class=\"headerlink\" title=\"1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0\"></a>1. Ubuntu、JDK8、Hadoop2.8.5、HBase2.1.0</h3><p>   <a href=\"https://www.ubuntu.com/download/desktop\" target=\"_blank\" rel=\"noopener\">安装Ubuntu https://www.ubuntu.com/download/desktop</a>;<br>   <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">安装JDK,修改环境变量 https://www.oracle.com/technetwork/java/javase/downloads/index.html</a>;<br>   <a href=\"http://hadoop.apache.org/\" target=\"_blank\" rel=\"noopener\">安装Hadoop2.8.5 http://hadoop.apache.org/</a><br>   <a href=\"http://hbase.apache.org/\" target=\"_blank\" rel=\"noopener\">下载HBase2.1.0 http://hbase.apache.org/</a></p>\n<h3 id=\"2-其他准备\"><a href=\"#2-其他准备\" class=\"headerlink\" title=\"2. 其他准备\"></a>2. 其他准备</h3><p>   部署Hadoop详见: <a href=\"/posts/2018/10/26/pseudo-distributed-hadoop-install/\">Hadoop 伪分布式部署</a></p>\n<h2 id=\"二-部署HBase\"><a href=\"#二-部署HBase\" class=\"headerlink\" title=\"二 部署HBase\"></a>二 部署HBase</h2><h3 id=\"1-解压HBase\"><a href=\"#1-解压HBase\" class=\"headerlink\" title=\"1. 解压HBase\"></a>1. 解压HBase</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">sudo tar -zxf ~/Downloads/hbase-2.1.0-bin.tar.gz -C /usr/<span class=\"built_in\">local</span> <span class=\"comment\"># 解压到/usr/local中</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/                                              </span><br><span class=\"line\">chmod -R 777 ./hbase-2.1.0                                     <span class=\"comment\"># 设置权限</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-配置HBase环境变量\"><a href=\"#2-配置HBase环境变量\" class=\"headerlink\" title=\"2. 配置HBase环境变量\"></a>2. 配置HBase环境变量</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HBASE_HOME=//usr/<span class=\"built_in\">local</span>/hbase-2.1.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_CONF_DIR=<span class=\"variable\">$&#123;HBASE_HOME&#125;</span>/conf</span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_CLASS_PATH=<span class=\"variable\">$&#123;HBASE_CONF_DIR&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$&#123;HBASE_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改环境-HBASE-HOME-conf-hbase-evn-sh配置\"><a href=\"#3-修改环境-HBASE-HOME-conf-hbase-evn-sh配置\" class=\"headerlink\" title=\"3. 修改环境${HBASE_HOME}/conf/hbase-evn.sh配置\"></a>3. 修改环境${HBASE_HOME}/conf/hbase-evn.sh配置</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加以下配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk1.8.0_181  <span class=\"comment\"># JDK根目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HBASE_MANAGES_ZK=<span class=\"literal\">true</span>              <span class=\"comment\"># 使用HBase自带zookeeper</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-修改配置文件-HBASE-HOME-conf-hbase-site-xml\"><a href=\"#4-修改配置文件-HBASE-HOME-conf-hbase-site-xml\" class=\"headerlink\" title=\"4. 修改配置文件${HBASE_HOME}/conf/hbase-site.xml\"></a>4. 修改配置文件${HBASE_HOME}/conf/hbase-site.xml</h3>   <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.rootdir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://crab2died:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.cluster.distributed<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-修改文件-HBASE-HOME-conf-regionservers\"><a href=\"#5-修改文件-HBASE-HOME-conf-regionservers\" class=\"headerlink\" title=\"5. 修改文件${HBASE_HOME}/conf/regionservers\"></a>5. 修改文件${HBASE_HOME}/conf/regionservers</h3><p>   将<code>localhost</code>改为<code>crab2died</code></p>\n<h3 id=\"6-解决HBase-master启动错误\"><a href=\"#6-解决HBase-master启动错误\" class=\"headerlink\" title=\"6. 解决HBase master启动错误\"></a>6. 解决HBase master启动错误</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行cp </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/hbase-2.1.0</span><br><span class=\"line\">cp ./lib/client-facing-thirdparty/htrace-core-3.1.0-incubating.jar ./lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-验证版本\"><a href=\"#7-验证版本\" class=\"headerlink\" title=\"7. 验证版本\"></a>7. 验证版本</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hbase version</span><br><span class=\"line\"><span class=\"comment\"># 成功则会返回版本信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三-启动HBase\"><a href=\"#三-启动HBase\" class=\"headerlink\" title=\"三 启动HBase\"></a>三 启动HBase</h2><h3 id=\"1-先启动Hadoop-详见-Hadoop-伪分布式部署\"><a href=\"#1-先启动Hadoop-详见-Hadoop-伪分布式部署\" class=\"headerlink\" title=\"1. 先启动Hadoop,详见: Hadoop 伪分布式部署\"></a>1. 先启动Hadoop,详见: <a href=\"/posts/2018/10/26/pseudo-distributed-hadoop-install/\">Hadoop 伪分布式部署</a></h3><h3 id=\"2-启动HBase\"><a href=\"#2-启动HBase\" class=\"headerlink\" title=\"2. 启动HBase\"></a>2. 启动HBase</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start-hbase.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-jps查看进程\"><a href=\"#3-jps查看进程\" class=\"headerlink\" title=\"3. jps查看进程\"></a>3. jps查看进程</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jps</span><br><span class=\"line\">1257 HQuorumPeer</span><br><span class=\"line\">1285 HMaster</span><br><span class=\"line\">1312 HRegionServer</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-查看HBase管理界面\"><a href=\"#4-查看HBase管理界面\" class=\"headerlink\" title=\"4. 查看HBase管理界面:\"></a>4. 查看HBase管理界面:</h3><p>   <a href=\"http://crab2died:16030\" target=\"_blank\" rel=\"noopener\">http://crab2died:16030</a></p>\n<h3 id=\"5-进入命令行管理\"><a href=\"#5-进入命令行管理\" class=\"headerlink\" title=\"5. 进入命令行管理:\"></a>5. 进入命令行管理:</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hbase shell</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Redis Cache Summarize","thumbnail":"/images/db/redis.jpeg","date":"2018-06-26T02:11:27.000Z","author":"Crab2Died","_content":"\n## 1. 概述  \n   - Redis全称: Remote Dictionary Server\n   - 基于内存的Key-Value存储系统，单线程实现  \n   - 多样的数据类型，支持的数据类型有：string(字符串)、hash(哈希)、list(链表)、set(集合)、zset(sorted set有序集合) \n   - redis的value大小可达到1GB(memcach只能达到1MB)\n   - 持久化，redis会周期性的将更新的数据写入磁盘  \n   - master-slave(主从)同步  \n   - 3.0后支持分布式存储，去中心化，具有线性伸缩功能\n   - [Redis命令大全](http://redisdoc.com/index.html)\n   \n## 2. Redis数据持久化\n### 2.1 RDB(Redis DataBase)\n   - SNAPSHOT(快照): `save 秒数 写操作次数`如`save 9000 1`表示900s(15min)有一次写操作生成快照，也可`save \"\"`表示\n     每次写操作即生成快照\n   - 配置`stop-writes-on-bgsave-error yes/no`当后台生成快照错误是否中断redis写操作的支持\n   - 配置`rdbcompression yes/no`表示是否压缩RDB文件\n   - 每次会fork一份来重启另一个进程进行持久化\n   \n### 2.2 AOF(Append Only File)\n   - 配置`appendonly no/yes`启用AOF，启动时会触发全量写文件，后面写操作是增量写文件\n   - 同步策略配置`appendfsync always(每次写操作都触发同步)/everysec(每秒同步一次)/no(不同步)`\n   - 重写(rewrite): 满足条件后触发重写，会对AOF文件内容优化，减少文件大小  \n     **auto-aof-rewrite-percentage 100 (表示超过文件的百分比)**  \n     **auto-aof-rewrite-min-size 64mb (触发重写的最小文件大小)**\n   - AOF文件修复: `redis-check-aof --fix appendonly.aof`\n\n### 2.3 比较\n   - RDB安全性较差、容易丢失最近一次缓存内容，但文件较小，恢复速度较快，是Master/Slave主从复制模式下的最好补充\n   - AOF更加安全、数据的完整性较强、但文件较大、恢复速度较慢，IO开支较大，比较影响性能\n   - Redis启用默认是脚在AOF文件恢复数据\n      \n### 2.4 缓存驱逐策略\n   - **volatile-lru**：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n   - **volatile-ttl**：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n   - **volatile-random**：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n   - **allkeys-lru**：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰\n   - **allkeys-random**：从数据集（server.db[i].dict）中任意选择数据淘汰\n   - **no-enviction**：禁止驱逐数据\n\n## 3. Redis集群\n### 3.1 分片策略\n   - Redis集群被分为16384(2<sup>14</sup>)个hash slot(hash槽)，集群内每个节点都拥有部分hash槽，使用数据键的CRC16编码对16384取模来\n     计算数据对应的hash槽，Redis最大节点数为16384\n   - Redis集群新增节点只用把集群中每个节点的部分hash槽移动到新节点中即可\n   - Redis集群移除节点也只用把该节点的hash槽移动到其他节点即可\n   - Redis集群之间是异步复制\n   \n### 3.2 架构分析\n   - 所有的redis节点彼此互联(PING-PONG 机制),内部使用二进制协议优化传输速度和带宽.\n   - 节点的fail是通过集群中超过半数的节点检测失效时才生效  \n   - 客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可        ","source":"_posts/redis-cache-summarize.md","raw":"---\nlayout: post\ntitle: Redis Cache Summarize\nthumbnail: /images/db/redis.jpeg\ndate: 2018-06-26 10:11:27 +0800\nauthor: Crab2Died\ncategories: Cache\ntags: \n  - Cache\n  - Redis\n---\n\n## 1. 概述  \n   - Redis全称: Remote Dictionary Server\n   - 基于内存的Key-Value存储系统，单线程实现  \n   - 多样的数据类型，支持的数据类型有：string(字符串)、hash(哈希)、list(链表)、set(集合)、zset(sorted set有序集合) \n   - redis的value大小可达到1GB(memcach只能达到1MB)\n   - 持久化，redis会周期性的将更新的数据写入磁盘  \n   - master-slave(主从)同步  \n   - 3.0后支持分布式存储，去中心化，具有线性伸缩功能\n   - [Redis命令大全](http://redisdoc.com/index.html)\n   \n## 2. Redis数据持久化\n### 2.1 RDB(Redis DataBase)\n   - SNAPSHOT(快照): `save 秒数 写操作次数`如`save 9000 1`表示900s(15min)有一次写操作生成快照，也可`save \"\"`表示\n     每次写操作即生成快照\n   - 配置`stop-writes-on-bgsave-error yes/no`当后台生成快照错误是否中断redis写操作的支持\n   - 配置`rdbcompression yes/no`表示是否压缩RDB文件\n   - 每次会fork一份来重启另一个进程进行持久化\n   \n### 2.2 AOF(Append Only File)\n   - 配置`appendonly no/yes`启用AOF，启动时会触发全量写文件，后面写操作是增量写文件\n   - 同步策略配置`appendfsync always(每次写操作都触发同步)/everysec(每秒同步一次)/no(不同步)`\n   - 重写(rewrite): 满足条件后触发重写，会对AOF文件内容优化，减少文件大小  \n     **auto-aof-rewrite-percentage 100 (表示超过文件的百分比)**  \n     **auto-aof-rewrite-min-size 64mb (触发重写的最小文件大小)**\n   - AOF文件修复: `redis-check-aof --fix appendonly.aof`\n\n### 2.3 比较\n   - RDB安全性较差、容易丢失最近一次缓存内容，但文件较小，恢复速度较快，是Master/Slave主从复制模式下的最好补充\n   - AOF更加安全、数据的完整性较强、但文件较大、恢复速度较慢，IO开支较大，比较影响性能\n   - Redis启用默认是脚在AOF文件恢复数据\n      \n### 2.4 缓存驱逐策略\n   - **volatile-lru**：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n   - **volatile-ttl**：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n   - **volatile-random**：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n   - **allkeys-lru**：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰\n   - **allkeys-random**：从数据集（server.db[i].dict）中任意选择数据淘汰\n   - **no-enviction**：禁止驱逐数据\n\n## 3. Redis集群\n### 3.1 分片策略\n   - Redis集群被分为16384(2<sup>14</sup>)个hash slot(hash槽)，集群内每个节点都拥有部分hash槽，使用数据键的CRC16编码对16384取模来\n     计算数据对应的hash槽，Redis最大节点数为16384\n   - Redis集群新增节点只用把集群中每个节点的部分hash槽移动到新节点中即可\n   - Redis集群移除节点也只用把该节点的hash槽移动到其他节点即可\n   - Redis集群之间是异步复制\n   \n### 3.2 架构分析\n   - 所有的redis节点彼此互联(PING-PONG 机制),内部使用二进制协议优化传输速度和带宽.\n   - 节点的fail是通过集群中超过半数的节点检测失效时才生效  \n   - 客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可        ","slug":"redis-cache-summarize","published":1,"updated":"2018-12-11T15:11:44.623Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vjq000quoilk9cxvn03","content":"<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><ul>\n<li>Redis全称: Remote Dictionary Server</li>\n<li>基于内存的Key-Value存储系统，单线程实现  </li>\n<li>多样的数据类型，支持的数据类型有：string(字符串)、hash(哈希)、list(链表)、set(集合)、zset(sorted set有序集合) </li>\n<li>redis的value大小可达到1GB(memcach只能达到1MB)</li>\n<li>持久化，redis会周期性的将更新的数据写入磁盘  </li>\n<li>master-slave(主从)同步  </li>\n<li>3.0后支持分布式存储，去中心化，具有线性伸缩功能</li>\n<li><a href=\"http://redisdoc.com/index.html\" target=\"_blank\" rel=\"noopener\">Redis命令大全</a></li>\n</ul>\n<h2 id=\"2-Redis数据持久化\"><a href=\"#2-Redis数据持久化\" class=\"headerlink\" title=\"2. Redis数据持久化\"></a>2. Redis数据持久化</h2><h3 id=\"2-1-RDB-Redis-DataBase\"><a href=\"#2-1-RDB-Redis-DataBase\" class=\"headerlink\" title=\"2.1 RDB(Redis DataBase)\"></a>2.1 RDB(Redis DataBase)</h3><ul>\n<li>SNAPSHOT(快照): <code>save 秒数 写操作次数</code>如<code>save 9000 1</code>表示900s(15min)有一次写操作生成快照，也可<code>save &quot;&quot;</code>表示<br>每次写操作即生成快照</li>\n<li>配置<code>stop-writes-on-bgsave-error yes/no</code>当后台生成快照错误是否中断redis写操作的支持</li>\n<li>配置<code>rdbcompression yes/no</code>表示是否压缩RDB文件</li>\n<li>每次会fork一份来重启另一个进程进行持久化</li>\n</ul>\n<h3 id=\"2-2-AOF-Append-Only-File\"><a href=\"#2-2-AOF-Append-Only-File\" class=\"headerlink\" title=\"2.2 AOF(Append Only File)\"></a>2.2 AOF(Append Only File)</h3><ul>\n<li>配置<code>appendonly no/yes</code>启用AOF，启动时会触发全量写文件，后面写操作是增量写文件</li>\n<li>同步策略配置<code>appendfsync always(每次写操作都触发同步)/everysec(每秒同步一次)/no(不同步)</code></li>\n<li>重写(rewrite): 满足条件后触发重写，会对AOF文件内容优化，减少文件大小<br><strong>auto-aof-rewrite-percentage 100 (表示超过文件的百分比)</strong><br><strong>auto-aof-rewrite-min-size 64mb (触发重写的最小文件大小)</strong></li>\n<li>AOF文件修复: <code>redis-check-aof --fix appendonly.aof</code></li>\n</ul>\n<h3 id=\"2-3-比较\"><a href=\"#2-3-比较\" class=\"headerlink\" title=\"2.3 比较\"></a>2.3 比较</h3><ul>\n<li>RDB安全性较差、容易丢失最近一次缓存内容，但文件较小，恢复速度较快，是Master/Slave主从复制模式下的最好补充</li>\n<li>AOF更加安全、数据的完整性较强、但文件较大、恢复速度较慢，IO开支较大，比较影响性能</li>\n<li>Redis启用默认是脚在AOF文件恢复数据</li>\n</ul>\n<h3 id=\"2-4-缓存驱逐策略\"><a href=\"#2-4-缓存驱逐策略\" class=\"headerlink\" title=\"2.4 缓存驱逐策略\"></a>2.4 缓存驱逐策略</h3><ul>\n<li><strong>volatile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>\n<li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>\n<li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>\n<li><strong>allkeys-lru</strong>：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>\n<li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li>\n<li><strong>no-enviction</strong>：禁止驱逐数据</li>\n</ul>\n<h2 id=\"3-Redis集群\"><a href=\"#3-Redis集群\" class=\"headerlink\" title=\"3. Redis集群\"></a>3. Redis集群</h2><h3 id=\"3-1-分片策略\"><a href=\"#3-1-分片策略\" class=\"headerlink\" title=\"3.1 分片策略\"></a>3.1 分片策略</h3><ul>\n<li>Redis集群被分为16384(2<sup>14</sup>)个hash slot(hash槽)，集群内每个节点都拥有部分hash槽，使用数据键的CRC16编码对16384取模来<br>计算数据对应的hash槽，Redis最大节点数为16384</li>\n<li>Redis集群新增节点只用把集群中每个节点的部分hash槽移动到新节点中即可</li>\n<li>Redis集群移除节点也只用把该节点的hash槽移动到其他节点即可</li>\n<li>Redis集群之间是异步复制</li>\n</ul>\n<h3 id=\"3-2-架构分析\"><a href=\"#3-2-架构分析\" class=\"headerlink\" title=\"3.2 架构分析\"></a>3.2 架构分析</h3><ul>\n<li>所有的redis节点彼此互联(PING-PONG 机制),内部使用二进制协议优化传输速度和带宽.</li>\n<li>节点的fail是通过集群中超过半数的节点检测失效时才生效  </li>\n<li>客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可        </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><ul>\n<li>Redis全称: Remote Dictionary Server</li>\n<li>基于内存的Key-Value存储系统，单线程实现  </li>\n<li>多样的数据类型，支持的数据类型有：string(字符串)、hash(哈希)、list(链表)、set(集合)、zset(sorted set有序集合) </li>\n<li>redis的value大小可达到1GB(memcach只能达到1MB)</li>\n<li>持久化，redis会周期性的将更新的数据写入磁盘  </li>\n<li>master-slave(主从)同步  </li>\n<li>3.0后支持分布式存储，去中心化，具有线性伸缩功能</li>\n<li><a href=\"http://redisdoc.com/index.html\" target=\"_blank\" rel=\"noopener\">Redis命令大全</a></li>\n</ul>\n<h2 id=\"2-Redis数据持久化\"><a href=\"#2-Redis数据持久化\" class=\"headerlink\" title=\"2. Redis数据持久化\"></a>2. Redis数据持久化</h2><h3 id=\"2-1-RDB-Redis-DataBase\"><a href=\"#2-1-RDB-Redis-DataBase\" class=\"headerlink\" title=\"2.1 RDB(Redis DataBase)\"></a>2.1 RDB(Redis DataBase)</h3><ul>\n<li>SNAPSHOT(快照): <code>save 秒数 写操作次数</code>如<code>save 9000 1</code>表示900s(15min)有一次写操作生成快照，也可<code>save &quot;&quot;</code>表示<br>每次写操作即生成快照</li>\n<li>配置<code>stop-writes-on-bgsave-error yes/no</code>当后台生成快照错误是否中断redis写操作的支持</li>\n<li>配置<code>rdbcompression yes/no</code>表示是否压缩RDB文件</li>\n<li>每次会fork一份来重启另一个进程进行持久化</li>\n</ul>\n<h3 id=\"2-2-AOF-Append-Only-File\"><a href=\"#2-2-AOF-Append-Only-File\" class=\"headerlink\" title=\"2.2 AOF(Append Only File)\"></a>2.2 AOF(Append Only File)</h3><ul>\n<li>配置<code>appendonly no/yes</code>启用AOF，启动时会触发全量写文件，后面写操作是增量写文件</li>\n<li>同步策略配置<code>appendfsync always(每次写操作都触发同步)/everysec(每秒同步一次)/no(不同步)</code></li>\n<li>重写(rewrite): 满足条件后触发重写，会对AOF文件内容优化，减少文件大小<br><strong>auto-aof-rewrite-percentage 100 (表示超过文件的百分比)</strong><br><strong>auto-aof-rewrite-min-size 64mb (触发重写的最小文件大小)</strong></li>\n<li>AOF文件修复: <code>redis-check-aof --fix appendonly.aof</code></li>\n</ul>\n<h3 id=\"2-3-比较\"><a href=\"#2-3-比较\" class=\"headerlink\" title=\"2.3 比较\"></a>2.3 比较</h3><ul>\n<li>RDB安全性较差、容易丢失最近一次缓存内容，但文件较小，恢复速度较快，是Master/Slave主从复制模式下的最好补充</li>\n<li>AOF更加安全、数据的完整性较强、但文件较大、恢复速度较慢，IO开支较大，比较影响性能</li>\n<li>Redis启用默认是脚在AOF文件恢复数据</li>\n</ul>\n<h3 id=\"2-4-缓存驱逐策略\"><a href=\"#2-4-缓存驱逐策略\" class=\"headerlink\" title=\"2.4 缓存驱逐策略\"></a>2.4 缓存驱逐策略</h3><ul>\n<li><strong>volatile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>\n<li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>\n<li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>\n<li><strong>allkeys-lru</strong>：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>\n<li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li>\n<li><strong>no-enviction</strong>：禁止驱逐数据</li>\n</ul>\n<h2 id=\"3-Redis集群\"><a href=\"#3-Redis集群\" class=\"headerlink\" title=\"3. Redis集群\"></a>3. Redis集群</h2><h3 id=\"3-1-分片策略\"><a href=\"#3-1-分片策略\" class=\"headerlink\" title=\"3.1 分片策略\"></a>3.1 分片策略</h3><ul>\n<li>Redis集群被分为16384(2<sup>14</sup>)个hash slot(hash槽)，集群内每个节点都拥有部分hash槽，使用数据键的CRC16编码对16384取模来<br>计算数据对应的hash槽，Redis最大节点数为16384</li>\n<li>Redis集群新增节点只用把集群中每个节点的部分hash槽移动到新节点中即可</li>\n<li>Redis集群移除节点也只用把该节点的hash槽移动到其他节点即可</li>\n<li>Redis集群之间是异步复制</li>\n</ul>\n<h3 id=\"3-2-架构分析\"><a href=\"#3-2-架构分析\" class=\"headerlink\" title=\"3.2 架构分析\"></a>3.2 架构分析</h3><ul>\n<li>所有的redis节点彼此互联(PING-PONG 机制),内部使用二进制协议优化传输速度和带宽.</li>\n<li>节点的fail是通过集群中超过半数的节点检测失效时才生效  </li>\n<li>客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可        </li>\n</ul>\n"},{"layout":"post","title":"RESTful HTTP","thumbnail":"/images/net/restful_api.jpeg","date":"2018-06-26T17:11:27.000Z","author":"Crab2Died","_content":"\n## 一 REST由来\n  1. REST(Representational State Transfer 表征性状态转移)\n  2. 2000年Roy Fielding的博士论文中首次提出\n  3. REST是架构风格，是设计思想，不是标准也不是协议\n  4. REST强调组件交互的可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件\n\n## 二 REST特点\n  1. 服务端(server)与客户端(client)解耦\n     - 简化服务端的可伸缩性，提高客户端便捷性\n  2. 面向资源，每一个资源都有唯一(CRUD等操作不会变)的标识符\n  3. 无状态(Stateless)，请求必须包含所有处理该请求的全部信息\n     - 提高可见性，每个请求都是独立的，无需其他依赖的\n     - 提高可靠性，故障恢复更容易\n     - 提升扩展性，减少了服务器资源消耗\n  4. 可缓存(Cachable)\n     - 减少交互次数，减少网络延时\n  5. 分层系统(Layered System)\n     - 允许Client与Server中间层(代理，网关等)代替Server端处理请求，客户端无需关心与他交互组件的其他之外的事\n     - 提高了系统可扩展性，简化系统复杂度\n  6. 统一接口(Uniform Interface)\n     - 服务端与客户端统一化的方法(GET/PUT/POST/DELETE)通信\n     - 提高了接口的可见性\n  7. 按需代码(Code-On-Demand)\n     - 提升系统可扩展性\n\n## 三 为什么要遵循REST\n  1. 可更高效利用缓存来提高响应速度\n  2. 通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性\n  3. 浏览器即可作为客户端，简化软件需求\n  4. 相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小\n  5. 不需要额外的资源发现机制\n  6. 在软件技术演进中的长期的兼容性更好\n\n## 四 RESTful最佳实践\n  1. URI规则\n     - 版本化(其一)   如: /api/v1\n     - 使用名词，而不是动词  如: blog\n     - 使用小写，用 _做词连接，而不用-\n     - 表示资源集合时，使用复数形式     如: blogs\n     - 子资源关系表示   示例: /blog/100/comments\n     - 为减少URI层级深度,引入适当的参数查询\n  2. Request Method  (资源的CRUD)\n     - GET/HEAD : 查询资源\n       - GET /blog/100\n       - GET /blog/100/comments\n     - POST: 创建资源\n       - POST /blog\n       - POST /blog/100/comment\n     - PUT/PATCH: 更新资源\n       - PUT /blog/100\n       - PUT /blog/100/comment/1\n     - DELETE: 删除资源\n       - DELETE /blog/100\n       - DELETE /blog/100/comment/1\n  3. Response\n     - 一般地，返回JSON数据而不是XML\n     - 不过滤API返回的空格，支持gzip/deflate压缩,Content-Encoding: gzip/deflate\n     - 统一的返回格式，错误码信息等\n     - 常见HTTP status\n       - **200   OK** - 对成功的GET、PUT、PATCH或DELETE操作进行响应。也可以被用在不创建新资源的POST操作上\n       - **201   Created** - 对创建新资源的POST操作进行响应。应该带着指向新资源地址的Location header\n       - **204   No Content** - 对不会返回响应体的成功请求进行响应（比如DELETE请求）\n       - **304   Not Modified** - HTTP缓存header生效的时候用\n       - **400   Bad Request** - 请求异常，比如请求中的body无法解析\n       - **401   Unauthorized** - 没有进行认证或者认证非法。当API通过浏览器访问的时候，可以用来弹出一个认证对话框\n       - **403   Forbidden** - 当认证成功，但是认证过的用户没有访问资源的权限\n       - **404   Not Found** - 当一个不存在的资源被请求\n       - **405   Method Not Allowed** - 所请求的HTTP方法不允许当前认证用户访问\n       - **410   Gone** - 表示当前请求的资源不再可用。当调用老版本API的时候很有用\n       - **415   Unsupported Media Type** - 如果请求中的内容类型是错误的\n       - **422   Unprocessable Entity** - 用来表示校验错误\n       - **429   Too Many Requests** - 由于请求频次达到上限而被拒绝访问\n  4. 认证\n     - RESTful API无状态的，每个请求都要自带凭证。\n     - 使用基于SSL来保证传输安全的OAauth 2\n  5. 缓存\n     - 强制缓存\n       - **Cache-Control**与**Expires**\n     - 比对缓存\n       - 1、**Last-Modified**与**If-Modified-Since**\n       - 2、**Etag**与**If-None-Match**\n  6. HATEOAS (Hypermedia as the Engine of Application State)\n     - 超媒体作为应用状态的引擎，即在返回结果中提供链接,指向其他API,为用户调用提供指引信息。如: 当调用http://api.blog.com 时返回\n       ```json\n       {\n           \"link\": {\n               \"rel\": \"collection https://www.blog.com/blogs\",\n               \"href\": \"https://api.blog.com/blogs\",\n               \"title\": \"List of blogs\",\n               \"type\": \"application/vnd.yourformat+json\"\n           }\n       }\n       ```\n       rel 表示与该API的关系，href表示指引API的链接，title表示API的标题，type表示接受类型\n  7. HTTP Request Method覆盖\n     - 一些老的HTTP Client只支持GET、POST请求，为了兼容这些Client，API需要覆盖HTTP方法，一般做法是HTTP POST请求会有一个\n       **X-HTTP-Method-Override**请求头，其值为PUT,PATCH,DELETE之一,以此兼容请求。\n  8. 限制速度\n     - 避免请求泛滥，HTTP引入状态码429(Too Many Requests)\n     - 一般地，是返回头信息(依照twitter的命名规则)\n       - **X-Rate-Limit-Limit**: 当前时间段允许的并发请求数\n       - **X-Rate-Limit-Remaining**: 当前时间段保留的请求数。\n       - **X-Rate-Limit-Reset**: 重置时间(秒)\n       - **Retry-After**: 下一次访问应该等待的时间(秒)\n","source":"_posts/restful-http.md","raw":"---\nlayout: post\ntitle: RESTful HTTP\nthumbnail: /images/net/restful_api.jpeg\ndate: 2018-06-27 01:11:27 +0800\nauthor: Crab2Died\ncategories: HTTP\ntags: \n  - REST\n  - HTTP\n---\n\n## 一 REST由来\n  1. REST(Representational State Transfer 表征性状态转移)\n  2. 2000年Roy Fielding的博士论文中首次提出\n  3. REST是架构风格，是设计思想，不是标准也不是协议\n  4. REST强调组件交互的可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件\n\n## 二 REST特点\n  1. 服务端(server)与客户端(client)解耦\n     - 简化服务端的可伸缩性，提高客户端便捷性\n  2. 面向资源，每一个资源都有唯一(CRUD等操作不会变)的标识符\n  3. 无状态(Stateless)，请求必须包含所有处理该请求的全部信息\n     - 提高可见性，每个请求都是独立的，无需其他依赖的\n     - 提高可靠性，故障恢复更容易\n     - 提升扩展性，减少了服务器资源消耗\n  4. 可缓存(Cachable)\n     - 减少交互次数，减少网络延时\n  5. 分层系统(Layered System)\n     - 允许Client与Server中间层(代理，网关等)代替Server端处理请求，客户端无需关心与他交互组件的其他之外的事\n     - 提高了系统可扩展性，简化系统复杂度\n  6. 统一接口(Uniform Interface)\n     - 服务端与客户端统一化的方法(GET/PUT/POST/DELETE)通信\n     - 提高了接口的可见性\n  7. 按需代码(Code-On-Demand)\n     - 提升系统可扩展性\n\n## 三 为什么要遵循REST\n  1. 可更高效利用缓存来提高响应速度\n  2. 通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性\n  3. 浏览器即可作为客户端，简化软件需求\n  4. 相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小\n  5. 不需要额外的资源发现机制\n  6. 在软件技术演进中的长期的兼容性更好\n\n## 四 RESTful最佳实践\n  1. URI规则\n     - 版本化(其一)   如: /api/v1\n     - 使用名词，而不是动词  如: blog\n     - 使用小写，用 _做词连接，而不用-\n     - 表示资源集合时，使用复数形式     如: blogs\n     - 子资源关系表示   示例: /blog/100/comments\n     - 为减少URI层级深度,引入适当的参数查询\n  2. Request Method  (资源的CRUD)\n     - GET/HEAD : 查询资源\n       - GET /blog/100\n       - GET /blog/100/comments\n     - POST: 创建资源\n       - POST /blog\n       - POST /blog/100/comment\n     - PUT/PATCH: 更新资源\n       - PUT /blog/100\n       - PUT /blog/100/comment/1\n     - DELETE: 删除资源\n       - DELETE /blog/100\n       - DELETE /blog/100/comment/1\n  3. Response\n     - 一般地，返回JSON数据而不是XML\n     - 不过滤API返回的空格，支持gzip/deflate压缩,Content-Encoding: gzip/deflate\n     - 统一的返回格式，错误码信息等\n     - 常见HTTP status\n       - **200   OK** - 对成功的GET、PUT、PATCH或DELETE操作进行响应。也可以被用在不创建新资源的POST操作上\n       - **201   Created** - 对创建新资源的POST操作进行响应。应该带着指向新资源地址的Location header\n       - **204   No Content** - 对不会返回响应体的成功请求进行响应（比如DELETE请求）\n       - **304   Not Modified** - HTTP缓存header生效的时候用\n       - **400   Bad Request** - 请求异常，比如请求中的body无法解析\n       - **401   Unauthorized** - 没有进行认证或者认证非法。当API通过浏览器访问的时候，可以用来弹出一个认证对话框\n       - **403   Forbidden** - 当认证成功，但是认证过的用户没有访问资源的权限\n       - **404   Not Found** - 当一个不存在的资源被请求\n       - **405   Method Not Allowed** - 所请求的HTTP方法不允许当前认证用户访问\n       - **410   Gone** - 表示当前请求的资源不再可用。当调用老版本API的时候很有用\n       - **415   Unsupported Media Type** - 如果请求中的内容类型是错误的\n       - **422   Unprocessable Entity** - 用来表示校验错误\n       - **429   Too Many Requests** - 由于请求频次达到上限而被拒绝访问\n  4. 认证\n     - RESTful API无状态的，每个请求都要自带凭证。\n     - 使用基于SSL来保证传输安全的OAauth 2\n  5. 缓存\n     - 强制缓存\n       - **Cache-Control**与**Expires**\n     - 比对缓存\n       - 1、**Last-Modified**与**If-Modified-Since**\n       - 2、**Etag**与**If-None-Match**\n  6. HATEOAS (Hypermedia as the Engine of Application State)\n     - 超媒体作为应用状态的引擎，即在返回结果中提供链接,指向其他API,为用户调用提供指引信息。如: 当调用http://api.blog.com 时返回\n       ```json\n       {\n           \"link\": {\n               \"rel\": \"collection https://www.blog.com/blogs\",\n               \"href\": \"https://api.blog.com/blogs\",\n               \"title\": \"List of blogs\",\n               \"type\": \"application/vnd.yourformat+json\"\n           }\n       }\n       ```\n       rel 表示与该API的关系，href表示指引API的链接，title表示API的标题，type表示接受类型\n  7. HTTP Request Method覆盖\n     - 一些老的HTTP Client只支持GET、POST请求，为了兼容这些Client，API需要覆盖HTTP方法，一般做法是HTTP POST请求会有一个\n       **X-HTTP-Method-Override**请求头，其值为PUT,PATCH,DELETE之一,以此兼容请求。\n  8. 限制速度\n     - 避免请求泛滥，HTTP引入状态码429(Too Many Requests)\n     - 一般地，是返回头信息(依照twitter的命名规则)\n       - **X-Rate-Limit-Limit**: 当前时间段允许的并发请求数\n       - **X-Rate-Limit-Remaining**: 当前时间段保留的请求数。\n       - **X-Rate-Limit-Reset**: 重置时间(秒)\n       - **Retry-After**: 下一次访问应该等待的时间(秒)\n","slug":"restful-http","published":1,"updated":"2018-12-11T15:11:44.623Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vjt000tuoilkz1l7c8g","content":"<h2 id=\"一-REST由来\"><a href=\"#一-REST由来\" class=\"headerlink\" title=\"一 REST由来\"></a>一 REST由来</h2><ol>\n<li>REST(Representational State Transfer 表征性状态转移)</li>\n<li>2000年Roy Fielding的博士论文中首次提出</li>\n<li>REST是架构风格，是设计思想，不是标准也不是协议</li>\n<li>REST强调组件交互的可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件</li>\n</ol>\n<h2 id=\"二-REST特点\"><a href=\"#二-REST特点\" class=\"headerlink\" title=\"二 REST特点\"></a>二 REST特点</h2><ol>\n<li>服务端(server)与客户端(client)解耦<ul>\n<li>简化服务端的可伸缩性，提高客户端便捷性</li>\n</ul>\n</li>\n<li>面向资源，每一个资源都有唯一(CRUD等操作不会变)的标识符</li>\n<li>无状态(Stateless)，请求必须包含所有处理该请求的全部信息<ul>\n<li>提高可见性，每个请求都是独立的，无需其他依赖的</li>\n<li>提高可靠性，故障恢复更容易</li>\n<li>提升扩展性，减少了服务器资源消耗</li>\n</ul>\n</li>\n<li>可缓存(Cachable)<ul>\n<li>减少交互次数，减少网络延时</li>\n</ul>\n</li>\n<li>分层系统(Layered System)<ul>\n<li>允许Client与Server中间层(代理，网关等)代替Server端处理请求，客户端无需关心与他交互组件的其他之外的事</li>\n<li>提高了系统可扩展性，简化系统复杂度</li>\n</ul>\n</li>\n<li>统一接口(Uniform Interface)<ul>\n<li>服务端与客户端统一化的方法(GET/PUT/POST/DELETE)通信</li>\n<li>提高了接口的可见性</li>\n</ul>\n</li>\n<li>按需代码(Code-On-Demand)<ul>\n<li>提升系统可扩展性</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三-为什么要遵循REST\"><a href=\"#三-为什么要遵循REST\" class=\"headerlink\" title=\"三 为什么要遵循REST\"></a>三 为什么要遵循REST</h2><ol>\n<li>可更高效利用缓存来提高响应速度</li>\n<li>通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性</li>\n<li>浏览器即可作为客户端，简化软件需求</li>\n<li>相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小</li>\n<li>不需要额外的资源发现机制</li>\n<li>在软件技术演进中的长期的兼容性更好</li>\n</ol>\n<h2 id=\"四-RESTful最佳实践\"><a href=\"#四-RESTful最佳实践\" class=\"headerlink\" title=\"四 RESTful最佳实践\"></a>四 RESTful最佳实践</h2><ol>\n<li>URI规则<ul>\n<li>版本化(其一)   如: /api/v1</li>\n<li>使用名词，而不是动词  如: blog</li>\n<li>使用小写，用 _做词连接，而不用-</li>\n<li>表示资源集合时，使用复数形式     如: blogs</li>\n<li>子资源关系表示   示例: /blog/100/comments</li>\n<li>为减少URI层级深度,引入适当的参数查询</li>\n</ul>\n</li>\n<li>Request Method  (资源的CRUD)<ul>\n<li>GET/HEAD : 查询资源<ul>\n<li>GET /blog/100</li>\n<li>GET /blog/100/comments</li>\n</ul>\n</li>\n<li>POST: 创建资源<ul>\n<li>POST /blog</li>\n<li>POST /blog/100/comment</li>\n</ul>\n</li>\n<li>PUT/PATCH: 更新资源<ul>\n<li>PUT /blog/100</li>\n<li>PUT /blog/100/comment/1</li>\n</ul>\n</li>\n<li>DELETE: 删除资源<ul>\n<li>DELETE /blog/100</li>\n<li>DELETE /blog/100/comment/1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Response<ul>\n<li>一般地，返回JSON数据而不是XML</li>\n<li>不过滤API返回的空格，支持gzip/deflate压缩,Content-Encoding: gzip/deflate</li>\n<li>统一的返回格式，错误码信息等</li>\n<li>常见HTTP status<ul>\n<li><strong>200   OK</strong> - 对成功的GET、PUT、PATCH或DELETE操作进行响应。也可以被用在不创建新资源的POST操作上</li>\n<li><strong>201   Created</strong> - 对创建新资源的POST操作进行响应。应该带着指向新资源地址的Location header</li>\n<li><strong>204   No Content</strong> - 对不会返回响应体的成功请求进行响应（比如DELETE请求）</li>\n<li><strong>304   Not Modified</strong> - HTTP缓存header生效的时候用</li>\n<li><strong>400   Bad Request</strong> - 请求异常，比如请求中的body无法解析</li>\n<li><strong>401   Unauthorized</strong> - 没有进行认证或者认证非法。当API通过浏览器访问的时候，可以用来弹出一个认证对话框</li>\n<li><strong>403   Forbidden</strong> - 当认证成功，但是认证过的用户没有访问资源的权限</li>\n<li><strong>404   Not Found</strong> - 当一个不存在的资源被请求</li>\n<li><strong>405   Method Not Allowed</strong> - 所请求的HTTP方法不允许当前认证用户访问</li>\n<li><strong>410   Gone</strong> - 表示当前请求的资源不再可用。当调用老版本API的时候很有用</li>\n<li><strong>415   Unsupported Media Type</strong> - 如果请求中的内容类型是错误的</li>\n<li><strong>422   Unprocessable Entity</strong> - 用来表示校验错误</li>\n<li><strong>429   Too Many Requests</strong> - 由于请求频次达到上限而被拒绝访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>认证<ul>\n<li>RESTful API无状态的，每个请求都要自带凭证。</li>\n<li>使用基于SSL来保证传输安全的OAauth 2</li>\n</ul>\n</li>\n<li>缓存<ul>\n<li>强制缓存<ul>\n<li><strong>Cache-Control</strong>与<strong>Expires</strong></li>\n</ul>\n</li>\n<li>比对缓存<ul>\n<li>1、<strong>Last-Modified</strong>与<strong>If-Modified-Since</strong></li>\n<li>2、<strong>Etag</strong>与<strong>If-None-Match</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HATEOAS (Hypermedia as the Engine of Application State)</p>\n<ul>\n<li><p>超媒体作为应用状态的引擎，即在返回结果中提供链接,指向其他API,为用户调用提供指引信息。如: 当调用<a href=\"http://api.blog.com\" target=\"_blank\" rel=\"noopener\">http://api.blog.com</a> 时返回</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"link\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"rel\"</span>: <span class=\"string\">\"collection https://www.blog.com/blogs\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"href\"</span>: <span class=\"string\">\"https://api.blog.com/blogs\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"List of blogs\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"application/vnd.yourformat+json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>rel 表示与该API的关系，href表示指引API的链接，title表示API的标题，type表示接受类型</p>\n</li>\n</ul>\n</li>\n<li>HTTP Request Method覆盖<ul>\n<li>一些老的HTTP Client只支持GET、POST请求，为了兼容这些Client，API需要覆盖HTTP方法，一般做法是HTTP POST请求会有一个<br><strong>X-HTTP-Method-Override</strong>请求头，其值为PUT,PATCH,DELETE之一,以此兼容请求。</li>\n</ul>\n</li>\n<li>限制速度<ul>\n<li>避免请求泛滥，HTTP引入状态码429(Too Many Requests)</li>\n<li>一般地，是返回头信息(依照twitter的命名规则)<ul>\n<li><strong>X-Rate-Limit-Limit</strong>: 当前时间段允许的并发请求数</li>\n<li><strong>X-Rate-Limit-Remaining</strong>: 当前时间段保留的请求数。</li>\n<li><strong>X-Rate-Limit-Reset</strong>: 重置时间(秒)</li>\n<li><strong>Retry-After</strong>: 下一次访问应该等待的时间(秒)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-REST由来\"><a href=\"#一-REST由来\" class=\"headerlink\" title=\"一 REST由来\"></a>一 REST由来</h2><ol>\n<li>REST(Representational State Transfer 表征性状态转移)</li>\n<li>2000年Roy Fielding的博士论文中首次提出</li>\n<li>REST是架构风格，是设计思想，不是标准也不是协议</li>\n<li>REST强调组件交互的可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件</li>\n</ol>\n<h2 id=\"二-REST特点\"><a href=\"#二-REST特点\" class=\"headerlink\" title=\"二 REST特点\"></a>二 REST特点</h2><ol>\n<li>服务端(server)与客户端(client)解耦<ul>\n<li>简化服务端的可伸缩性，提高客户端便捷性</li>\n</ul>\n</li>\n<li>面向资源，每一个资源都有唯一(CRUD等操作不会变)的标识符</li>\n<li>无状态(Stateless)，请求必须包含所有处理该请求的全部信息<ul>\n<li>提高可见性，每个请求都是独立的，无需其他依赖的</li>\n<li>提高可靠性，故障恢复更容易</li>\n<li>提升扩展性，减少了服务器资源消耗</li>\n</ul>\n</li>\n<li>可缓存(Cachable)<ul>\n<li>减少交互次数，减少网络延时</li>\n</ul>\n</li>\n<li>分层系统(Layered System)<ul>\n<li>允许Client与Server中间层(代理，网关等)代替Server端处理请求，客户端无需关心与他交互组件的其他之外的事</li>\n<li>提高了系统可扩展性，简化系统复杂度</li>\n</ul>\n</li>\n<li>统一接口(Uniform Interface)<ul>\n<li>服务端与客户端统一化的方法(GET/PUT/POST/DELETE)通信</li>\n<li>提高了接口的可见性</li>\n</ul>\n</li>\n<li>按需代码(Code-On-Demand)<ul>\n<li>提升系统可扩展性</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三-为什么要遵循REST\"><a href=\"#三-为什么要遵循REST\" class=\"headerlink\" title=\"三 为什么要遵循REST\"></a>三 为什么要遵循REST</h2><ol>\n<li>可更高效利用缓存来提高响应速度</li>\n<li>通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性</li>\n<li>浏览器即可作为客户端，简化软件需求</li>\n<li>相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小</li>\n<li>不需要额外的资源发现机制</li>\n<li>在软件技术演进中的长期的兼容性更好</li>\n</ol>\n<h2 id=\"四-RESTful最佳实践\"><a href=\"#四-RESTful最佳实践\" class=\"headerlink\" title=\"四 RESTful最佳实践\"></a>四 RESTful最佳实践</h2><ol>\n<li>URI规则<ul>\n<li>版本化(其一)   如: /api/v1</li>\n<li>使用名词，而不是动词  如: blog</li>\n<li>使用小写，用 _做词连接，而不用-</li>\n<li>表示资源集合时，使用复数形式     如: blogs</li>\n<li>子资源关系表示   示例: /blog/100/comments</li>\n<li>为减少URI层级深度,引入适当的参数查询</li>\n</ul>\n</li>\n<li>Request Method  (资源的CRUD)<ul>\n<li>GET/HEAD : 查询资源<ul>\n<li>GET /blog/100</li>\n<li>GET /blog/100/comments</li>\n</ul>\n</li>\n<li>POST: 创建资源<ul>\n<li>POST /blog</li>\n<li>POST /blog/100/comment</li>\n</ul>\n</li>\n<li>PUT/PATCH: 更新资源<ul>\n<li>PUT /blog/100</li>\n<li>PUT /blog/100/comment/1</li>\n</ul>\n</li>\n<li>DELETE: 删除资源<ul>\n<li>DELETE /blog/100</li>\n<li>DELETE /blog/100/comment/1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Response<ul>\n<li>一般地，返回JSON数据而不是XML</li>\n<li>不过滤API返回的空格，支持gzip/deflate压缩,Content-Encoding: gzip/deflate</li>\n<li>统一的返回格式，错误码信息等</li>\n<li>常见HTTP status<ul>\n<li><strong>200   OK</strong> - 对成功的GET、PUT、PATCH或DELETE操作进行响应。也可以被用在不创建新资源的POST操作上</li>\n<li><strong>201   Created</strong> - 对创建新资源的POST操作进行响应。应该带着指向新资源地址的Location header</li>\n<li><strong>204   No Content</strong> - 对不会返回响应体的成功请求进行响应（比如DELETE请求）</li>\n<li><strong>304   Not Modified</strong> - HTTP缓存header生效的时候用</li>\n<li><strong>400   Bad Request</strong> - 请求异常，比如请求中的body无法解析</li>\n<li><strong>401   Unauthorized</strong> - 没有进行认证或者认证非法。当API通过浏览器访问的时候，可以用来弹出一个认证对话框</li>\n<li><strong>403   Forbidden</strong> - 当认证成功，但是认证过的用户没有访问资源的权限</li>\n<li><strong>404   Not Found</strong> - 当一个不存在的资源被请求</li>\n<li><strong>405   Method Not Allowed</strong> - 所请求的HTTP方法不允许当前认证用户访问</li>\n<li><strong>410   Gone</strong> - 表示当前请求的资源不再可用。当调用老版本API的时候很有用</li>\n<li><strong>415   Unsupported Media Type</strong> - 如果请求中的内容类型是错误的</li>\n<li><strong>422   Unprocessable Entity</strong> - 用来表示校验错误</li>\n<li><strong>429   Too Many Requests</strong> - 由于请求频次达到上限而被拒绝访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>认证<ul>\n<li>RESTful API无状态的，每个请求都要自带凭证。</li>\n<li>使用基于SSL来保证传输安全的OAauth 2</li>\n</ul>\n</li>\n<li>缓存<ul>\n<li>强制缓存<ul>\n<li><strong>Cache-Control</strong>与<strong>Expires</strong></li>\n</ul>\n</li>\n<li>比对缓存<ul>\n<li>1、<strong>Last-Modified</strong>与<strong>If-Modified-Since</strong></li>\n<li>2、<strong>Etag</strong>与<strong>If-None-Match</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>HATEOAS (Hypermedia as the Engine of Application State)</p>\n<ul>\n<li><p>超媒体作为应用状态的引擎，即在返回结果中提供链接,指向其他API,为用户调用提供指引信息。如: 当调用<a href=\"http://api.blog.com\" target=\"_blank\" rel=\"noopener\">http://api.blog.com</a> 时返回</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"link\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"rel\"</span>: <span class=\"string\">\"collection https://www.blog.com/blogs\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"href\"</span>: <span class=\"string\">\"https://api.blog.com/blogs\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"title\"</span>: <span class=\"string\">\"List of blogs\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"application/vnd.yourformat+json\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>rel 表示与该API的关系，href表示指引API的链接，title表示API的标题，type表示接受类型</p>\n</li>\n</ul>\n</li>\n<li>HTTP Request Method覆盖<ul>\n<li>一些老的HTTP Client只支持GET、POST请求，为了兼容这些Client，API需要覆盖HTTP方法，一般做法是HTTP POST请求会有一个<br><strong>X-HTTP-Method-Override</strong>请求头，其值为PUT,PATCH,DELETE之一,以此兼容请求。</li>\n</ul>\n</li>\n<li>限制速度<ul>\n<li>避免请求泛滥，HTTP引入状态码429(Too Many Requests)</li>\n<li>一般地，是返回头信息(依照twitter的命名规则)<ul>\n<li><strong>X-Rate-Limit-Limit</strong>: 当前时间段允许的并发请求数</li>\n<li><strong>X-Rate-Limit-Remaining</strong>: 当前时间段保留的请求数。</li>\n<li><strong>X-Rate-Limit-Reset</strong>: 重置时间(秒)</li>\n<li><strong>Retry-After</strong>: 下一次访问应该等待的时间(秒)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"layout":"post","title":"Spring Integration Websocket","thumbnail":"/images/net/web.png","date":"2018-08-26T17:11:27.000Z","author":"Crab2Died","_content":"\n# 一. 依赖（这里只列举了websocket相关依赖）\n\n```xml\n    <!-- spring webSocket依赖 -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-websocket</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/org.springframework/spring-messaging -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-messaging</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api -->\n    <dependency>\n        <groupId>javax.websocket</groupId>\n        <artifactId>javax.websocket-api</artifactId>\n        <version>1.1</version>\n        <scope>provided</scope>\n    </dependency>\n    <!-- websocket客户端 -->\n    <dependency>\n        <groupId>org.glassfish.tyrus.bundles</groupId>\n        <artifactId>tyrus-standalone-client</artifactId>\n        <version>1.13</version>\n    </dependency>\n```\n\n# 二. WebSocket服务端\n\n#### 2-1. 核心代码\n\n```java\npackage com.github.websocket.server;\n\nimport com.alibaba.fastjson.JSON;\nimport com.github.CommonConstant;\nimport com.github.session.SObject;\nimport com.github.websocket.configuration.HttpSessionConfigurator;\nimport com.github.websocket.msg.Msg;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\n\nimport javax.servlet.http.HttpSession;\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * @author : Crab2Died</br>\n * @DESC : <p>注解{@link ServerEndpoint}声明websocket 服务端</p></br>\n * @date : 2017/5/25  9:43</br>\n */\n@ServerEndpoint(value = \"/chat\", configurator = HttpSessionConfigurator.class)\npublic class WSServer {\n\n    static private Logger logger = Logger.getLogger(WSServer.class);\n\n    // 在线人数 线程安全\n    private static int onlineCount = 0;\n\n    // 连接集合 userId => server 键值对 线程安全\n    static public final ConcurrentMap<String, WSServer> map = new ConcurrentHashMap<>();\n\n    // 与某个客户端的连接会话，需要通过它来给客户端发送数据\n    private Session session;\n\n    // 当前会话的httpsession\n    private HttpSession httpSession;\n\n\n    /**\n     * @param session websocket连接sesson\n     * @param config  {@link com.github.websocket.configuration.HttpSessionConfigurator}\n     * @DESC <p>注解{@link OnOpen} 声明客户端连接进入的方法</p>\n     */\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n\n        // 得到httpSession\n        this.httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());\n\n        // 获取session对象 SObject(这个就是java web登入后的保存的session对象，此处为用户信息，包含了userId)\n        SObject user = (SObject) this.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);\n\n        this.session = session;\n\n        // 将连接session对象存入map\n        map.put(user.getUid(), this);\n\n        // 连接数+1\n        addOnlineCount();\n\n        logger.info(\"有新的连接，当前连接数为：\" + getOnlineCount());\n    }\n\n\n    /**\n     * <p>{@link OnClose} 关闭连接</p>\n     */\n    @OnClose\n    public void onClose() {\n\n        /**\n         * 获取当前连接信息 {@code CommonConstant.USER_LOGIN_SESSION} 为Http session 名\n         */\n\n        SObject user = (SObject) this.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);\n\n        // 移除连接\n        map.remove(user.getUid());\n\n        // 连接数-1\n        subOnlineCount();\n\n        logger.info(\"有一连接断开，当前连接数为：\" + getOnlineCount());\n    }\n\n    /**\n     * <p>{@link OnMessage} 消息监听处理方法</p>\n     *\n     * @param message 消息对象{@link com.github.websocket.msg.Msg}的JSON对象\n     * @throws IOException 异常\n     */\n    @OnMessage\n    public void onMessage(String message) throws IOException {\n\n        // 将消息转Msg对象\n        Msg msg = JSON.parseObject(message, Msg.class);\n\n        //TODO 可以对msg做些处理...\n\n        // 根据Msg消息对象获取定点发送人的userId\n        WSServer _client = map.get(msg.getToUid());\n\n        // 定点发送\n        if (StringUtils.isNotEmpty(msg.getToUid())) {\n            if (null != _client) {\n                // 是否连接判断\n                if (_client.session.isOpen())\n                    // 消息发送\n                    _client.session.getBasicRemote().sendText(JSON.toJSONString(msg));\n            }\n        }\n\n        // 群发\n        if (StringUtils.isEmpty(msg.getToUid())) {\n            // 群发已连接用户\n            for (WSServer client : map.values()) {\n                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));\n            }\n        }\n\n    }\n\n    /**\n     * <p>{@link OnError} websocket系统异常处理</p>\n     *\n     * @param t 异常\n     */\n    @OnError\n    public void onError(Throwable t) {\n        logger.error(t);\n        t.printStackTrace();\n    }\n\n    /**\n     * <p>系统主动推送 这是个静态方法在web启动后可在程序的其他合适的地方和时间调用，这就实现了系统的主动推送</p>\n     *\n     * @param msg 消息对象{@link com.github.websocket.msg.Msg}的JSON对象\n     */\n    static\n    public void pushBySys(Msg msg) {\n\n        //TODO 也可以实现定点推送\n\n        // 群发\n        for (WSServer client : map.values()) {\n            try {\n                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    // 获取连接数\n    private static synchronized int getOnlineCount() {\n        return WSServer.onlineCount;\n    }\n\n    // 增加连接数\n    private static synchronized void addOnlineCount() {\n        WSServer.onlineCount++;\n    }\n\n    // 减少连接数\n    private static synchronized void subOnlineCount() {\n        WSServer.onlineCount--;\n    }\n\n}\n\n```\n\n#### 2-2. HttpSessionConfigurator类\n\n```java\npackage com.github.websocket.configuration;\n\nimport javax.servlet.http.HttpSession;\nimport javax.websocket.HandshakeResponse;\nimport javax.websocket.server.HandshakeRequest;\nimport javax.websocket.server.ServerEndpointConfig;\nimport javax.websocket.server.ServerEndpointConfig.Configurator;\n\n/**\n * @author : Crab2Died</br>\n * @DESC : <p>讲http request的session 存入websocket的session内</p></br>\n * @date : 2017/5/25  16:08</br>\n */\npublic class HttpSessionConfigurator extends Configurator {\n\n    @Override\n    public void modifyHandshake(ServerEndpointConfig sec,\n                                HandshakeRequest request, HandshakeResponse response) {\n\n        // 获取当前Http连接的session\n        HttpSession httpSession = (HttpSession) request.getHttpSession();\n        // 将http session信息注入websocket session\n        sec.getUserProperties().put(HttpSession.class.getName(), httpSession);\n    }\n}\n\n```\n\n#### 2-3. Msg消息体\n\n```java\npackage com.github.websocket.msg;\n\n\nimport java.util.Date;\n\n\n/**\n * @author : Crab2Died</br>\n * @DESC : <p>WebSocket消息模型</p></br>\n * @date : 2017/5/25  9:43</br>\n */\npublic class Msg {\n\n    // 推送人ID\n    private String fromUid;\n\n    // 定点推送人ID\n    private String toUid;\n\n    // 定点推送单位ID\n    private String toOrgId;\n\n    // 消息体\n    private String data;\n\n    // 推送时间\n    private Date createDate = new Date();\n\n    // 消息状态\n    private Integer flag;\n\n    public Msg() {\n\n    }\n\n    public Msg(String fromUid, String toUid, String toOrgId, String data, Date createDate, Integer flag) {\n        this.fromUid = fromUid;\n        this.toUid = toUid;\n        this.toOrgId = toOrgId;\n        this.data = data;\n        this.createDate = createDate;\n        this.flag = flag;\n    }\n\n    public String getFromUid() {\n        return fromUid;\n    }\n\n    public void setFromUid(String fromUid) {\n        this.fromUid = fromUid;\n    }\n\n    public String getToUid() {\n        return toUid;\n    }\n\n    public void setToUid(String toUid) {\n        this.toUid = toUid;\n    }\n\n    public String getToOrgId() {\n        return toOrgId;\n    }\n\n    public void setToOrgId(String toOrgId) {\n        this.toOrgId = toOrgId;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n    public Date getCreateDate() {\n        return createDate;\n    }\n\n    public void setCreateDate(Date createDate) {\n        this.createDate = createDate;\n    }\n\n    public Integer getFlag() {\n        return flag;\n    }\n\n    public void setFlag(Integer flag) {\n        this.flag = flag;\n    }\n\n    @Override\n    public String toString() {\n        return \"Msg{\" +\n                \"fromUid='\" + fromUid + '\\'' +\n                \", toUid='\" + toUid + '\\'' +\n                \", toOrgId='\" + toOrgId + '\\'' +\n                \", data='\" + data + '\\'' +\n                \", createDate=\" + createDate +\n                \", flag=\" + flag +\n                '}';\n    }\n}\n\n```\n\n# 三. 客户端（HTML5）\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>WebSocket</title>\n<script type=\"text/javascript\">\n\n\t// 创建websocket实例\n    var ws = new WebSocket(\"ws://localhost:8080/chat\");\n    /*\n     *监听三种状态的变化js会回调\n     */\n    ws.onopen = function(message) {\n\t\t// 连接回调\n    };\n    ws.onclose = function(message) {\n\t\t// 断开连接回调\n    };\n    ws.onmessage = function(message) {\n\t\t// 消息监听\n        showMessage(message.data);\n    };\n    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\n\twindow.onbeforeunload = function() {\n        ws.close();\n    };\n    //关闭连接\n    function closeWebSocket() {\n        ws.close();\n    }\n    //发送消息\n    function send() {\n\n        var input = document.getElementById(\"msg\");\n        var text = input.value;\n\t\t\n\t\t// 消息体JSON 对象 对应JAVA 的 Msg对象\n\t\tvar data = {\n\t\t\t// 定点发送给其他用户的userId\n\t\t\ttoUid : \"3d535429-5fcb-4490-bcf7-96fd84bb17b6\",\n\t\t\tdata : text\n\t\t}\n\t\t\n        ws.send(JSON.stringify(data));\n        input.value = \"\";\n    }\n    function showMessage(message) {\n        var text = document.createTextNode(JSON.parse(message).data);\n        var br = document.createElement(\"br\")\n        var div = document.getElementById(\"showChatMessage\");\n        div.appendChild(text);\n        div.appendChild(br);\n    }\n</script>\n</head>\n<body>\n    <div>\n        style=\"width: 600px; height: 240px; overflow-y: auto; border: 1px solid #333;\"\n        id=\"show\">\n        <div id=\"showChatMessage\"></div>\n        <input type=\"text\" size=\"80\" id=\"msg\" name=\"msg\" placeholder=\"输入聊天内容\" />\n        <input type=\"button\" value=\"发送\" id=\"sendBn\" name=\"sendBn\" onclick=\"send()\">\n    </div>\n</body>\n</html>\n```","source":"_posts/spring-intergration-websocket.md","raw":"---\nlayout: post\ntitle: Spring Integration Websocket\nthumbnail: /images/net/web.png\ndate: 2018-08-27 01:11:27 +0800\nauthor: Crab2Died\ncategories: Websocket\ntags: \n  - Java\n  - Spring\n  - Websocket\n---\n\n# 一. 依赖（这里只列举了websocket相关依赖）\n\n```xml\n    <!-- spring webSocket依赖 -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-websocket</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/org.springframework/spring-messaging -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-messaging</artifactId>\n        <version>${spring.version}</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api -->\n    <dependency>\n        <groupId>javax.websocket</groupId>\n        <artifactId>javax.websocket-api</artifactId>\n        <version>1.1</version>\n        <scope>provided</scope>\n    </dependency>\n    <!-- websocket客户端 -->\n    <dependency>\n        <groupId>org.glassfish.tyrus.bundles</groupId>\n        <artifactId>tyrus-standalone-client</artifactId>\n        <version>1.13</version>\n    </dependency>\n```\n\n# 二. WebSocket服务端\n\n#### 2-1. 核心代码\n\n```java\npackage com.github.websocket.server;\n\nimport com.alibaba.fastjson.JSON;\nimport com.github.CommonConstant;\nimport com.github.session.SObject;\nimport com.github.websocket.configuration.HttpSessionConfigurator;\nimport com.github.websocket.msg.Msg;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\n\nimport javax.servlet.http.HttpSession;\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * @author : Crab2Died</br>\n * @DESC : <p>注解{@link ServerEndpoint}声明websocket 服务端</p></br>\n * @date : 2017/5/25  9:43</br>\n */\n@ServerEndpoint(value = \"/chat\", configurator = HttpSessionConfigurator.class)\npublic class WSServer {\n\n    static private Logger logger = Logger.getLogger(WSServer.class);\n\n    // 在线人数 线程安全\n    private static int onlineCount = 0;\n\n    // 连接集合 userId => server 键值对 线程安全\n    static public final ConcurrentMap<String, WSServer> map = new ConcurrentHashMap<>();\n\n    // 与某个客户端的连接会话，需要通过它来给客户端发送数据\n    private Session session;\n\n    // 当前会话的httpsession\n    private HttpSession httpSession;\n\n\n    /**\n     * @param session websocket连接sesson\n     * @param config  {@link com.github.websocket.configuration.HttpSessionConfigurator}\n     * @DESC <p>注解{@link OnOpen} 声明客户端连接进入的方法</p>\n     */\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n\n        // 得到httpSession\n        this.httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());\n\n        // 获取session对象 SObject(这个就是java web登入后的保存的session对象，此处为用户信息，包含了userId)\n        SObject user = (SObject) this.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);\n\n        this.session = session;\n\n        // 将连接session对象存入map\n        map.put(user.getUid(), this);\n\n        // 连接数+1\n        addOnlineCount();\n\n        logger.info(\"有新的连接，当前连接数为：\" + getOnlineCount());\n    }\n\n\n    /**\n     * <p>{@link OnClose} 关闭连接</p>\n     */\n    @OnClose\n    public void onClose() {\n\n        /**\n         * 获取当前连接信息 {@code CommonConstant.USER_LOGIN_SESSION} 为Http session 名\n         */\n\n        SObject user = (SObject) this.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);\n\n        // 移除连接\n        map.remove(user.getUid());\n\n        // 连接数-1\n        subOnlineCount();\n\n        logger.info(\"有一连接断开，当前连接数为：\" + getOnlineCount());\n    }\n\n    /**\n     * <p>{@link OnMessage} 消息监听处理方法</p>\n     *\n     * @param message 消息对象{@link com.github.websocket.msg.Msg}的JSON对象\n     * @throws IOException 异常\n     */\n    @OnMessage\n    public void onMessage(String message) throws IOException {\n\n        // 将消息转Msg对象\n        Msg msg = JSON.parseObject(message, Msg.class);\n\n        //TODO 可以对msg做些处理...\n\n        // 根据Msg消息对象获取定点发送人的userId\n        WSServer _client = map.get(msg.getToUid());\n\n        // 定点发送\n        if (StringUtils.isNotEmpty(msg.getToUid())) {\n            if (null != _client) {\n                // 是否连接判断\n                if (_client.session.isOpen())\n                    // 消息发送\n                    _client.session.getBasicRemote().sendText(JSON.toJSONString(msg));\n            }\n        }\n\n        // 群发\n        if (StringUtils.isEmpty(msg.getToUid())) {\n            // 群发已连接用户\n            for (WSServer client : map.values()) {\n                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));\n            }\n        }\n\n    }\n\n    /**\n     * <p>{@link OnError} websocket系统异常处理</p>\n     *\n     * @param t 异常\n     */\n    @OnError\n    public void onError(Throwable t) {\n        logger.error(t);\n        t.printStackTrace();\n    }\n\n    /**\n     * <p>系统主动推送 这是个静态方法在web启动后可在程序的其他合适的地方和时间调用，这就实现了系统的主动推送</p>\n     *\n     * @param msg 消息对象{@link com.github.websocket.msg.Msg}的JSON对象\n     */\n    static\n    public void pushBySys(Msg msg) {\n\n        //TODO 也可以实现定点推送\n\n        // 群发\n        for (WSServer client : map.values()) {\n            try {\n                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    // 获取连接数\n    private static synchronized int getOnlineCount() {\n        return WSServer.onlineCount;\n    }\n\n    // 增加连接数\n    private static synchronized void addOnlineCount() {\n        WSServer.onlineCount++;\n    }\n\n    // 减少连接数\n    private static synchronized void subOnlineCount() {\n        WSServer.onlineCount--;\n    }\n\n}\n\n```\n\n#### 2-2. HttpSessionConfigurator类\n\n```java\npackage com.github.websocket.configuration;\n\nimport javax.servlet.http.HttpSession;\nimport javax.websocket.HandshakeResponse;\nimport javax.websocket.server.HandshakeRequest;\nimport javax.websocket.server.ServerEndpointConfig;\nimport javax.websocket.server.ServerEndpointConfig.Configurator;\n\n/**\n * @author : Crab2Died</br>\n * @DESC : <p>讲http request的session 存入websocket的session内</p></br>\n * @date : 2017/5/25  16:08</br>\n */\npublic class HttpSessionConfigurator extends Configurator {\n\n    @Override\n    public void modifyHandshake(ServerEndpointConfig sec,\n                                HandshakeRequest request, HandshakeResponse response) {\n\n        // 获取当前Http连接的session\n        HttpSession httpSession = (HttpSession) request.getHttpSession();\n        // 将http session信息注入websocket session\n        sec.getUserProperties().put(HttpSession.class.getName(), httpSession);\n    }\n}\n\n```\n\n#### 2-3. Msg消息体\n\n```java\npackage com.github.websocket.msg;\n\n\nimport java.util.Date;\n\n\n/**\n * @author : Crab2Died</br>\n * @DESC : <p>WebSocket消息模型</p></br>\n * @date : 2017/5/25  9:43</br>\n */\npublic class Msg {\n\n    // 推送人ID\n    private String fromUid;\n\n    // 定点推送人ID\n    private String toUid;\n\n    // 定点推送单位ID\n    private String toOrgId;\n\n    // 消息体\n    private String data;\n\n    // 推送时间\n    private Date createDate = new Date();\n\n    // 消息状态\n    private Integer flag;\n\n    public Msg() {\n\n    }\n\n    public Msg(String fromUid, String toUid, String toOrgId, String data, Date createDate, Integer flag) {\n        this.fromUid = fromUid;\n        this.toUid = toUid;\n        this.toOrgId = toOrgId;\n        this.data = data;\n        this.createDate = createDate;\n        this.flag = flag;\n    }\n\n    public String getFromUid() {\n        return fromUid;\n    }\n\n    public void setFromUid(String fromUid) {\n        this.fromUid = fromUid;\n    }\n\n    public String getToUid() {\n        return toUid;\n    }\n\n    public void setToUid(String toUid) {\n        this.toUid = toUid;\n    }\n\n    public String getToOrgId() {\n        return toOrgId;\n    }\n\n    public void setToOrgId(String toOrgId) {\n        this.toOrgId = toOrgId;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n    public Date getCreateDate() {\n        return createDate;\n    }\n\n    public void setCreateDate(Date createDate) {\n        this.createDate = createDate;\n    }\n\n    public Integer getFlag() {\n        return flag;\n    }\n\n    public void setFlag(Integer flag) {\n        this.flag = flag;\n    }\n\n    @Override\n    public String toString() {\n        return \"Msg{\" +\n                \"fromUid='\" + fromUid + '\\'' +\n                \", toUid='\" + toUid + '\\'' +\n                \", toOrgId='\" + toOrgId + '\\'' +\n                \", data='\" + data + '\\'' +\n                \", createDate=\" + createDate +\n                \", flag=\" + flag +\n                '}';\n    }\n}\n\n```\n\n# 三. 客户端（HTML5）\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>WebSocket</title>\n<script type=\"text/javascript\">\n\n\t// 创建websocket实例\n    var ws = new WebSocket(\"ws://localhost:8080/chat\");\n    /*\n     *监听三种状态的变化js会回调\n     */\n    ws.onopen = function(message) {\n\t\t// 连接回调\n    };\n    ws.onclose = function(message) {\n\t\t// 断开连接回调\n    };\n    ws.onmessage = function(message) {\n\t\t// 消息监听\n        showMessage(message.data);\n    };\n    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\n\twindow.onbeforeunload = function() {\n        ws.close();\n    };\n    //关闭连接\n    function closeWebSocket() {\n        ws.close();\n    }\n    //发送消息\n    function send() {\n\n        var input = document.getElementById(\"msg\");\n        var text = input.value;\n\t\t\n\t\t// 消息体JSON 对象 对应JAVA 的 Msg对象\n\t\tvar data = {\n\t\t\t// 定点发送给其他用户的userId\n\t\t\ttoUid : \"3d535429-5fcb-4490-bcf7-96fd84bb17b6\",\n\t\t\tdata : text\n\t\t}\n\t\t\n        ws.send(JSON.stringify(data));\n        input.value = \"\";\n    }\n    function showMessage(message) {\n        var text = document.createTextNode(JSON.parse(message).data);\n        var br = document.createElement(\"br\")\n        var div = document.getElementById(\"showChatMessage\");\n        div.appendChild(text);\n        div.appendChild(br);\n    }\n</script>\n</head>\n<body>\n    <div>\n        style=\"width: 600px; height: 240px; overflow-y: auto; border: 1px solid #333;\"\n        id=\"show\">\n        <div id=\"showChatMessage\"></div>\n        <input type=\"text\" size=\"80\" id=\"msg\" name=\"msg\" placeholder=\"输入聊天内容\" />\n        <input type=\"button\" value=\"发送\" id=\"sendBn\" name=\"sendBn\" onclick=\"send()\">\n    </div>\n</body>\n</html>\n```","slug":"spring-intergration-websocket","published":1,"updated":"2018-12-11T15:11:44.624Z","comments":1,"photos":[],"link":"","_id":"cjpmk9vjw000xuoilqpfhuxge","content":"<h1 id=\"一-依赖（这里只列举了websocket相关依赖）\"><a href=\"#一-依赖（这里只列举了websocket相关依赖）\" class=\"headerlink\" title=\"一. 依赖（这里只列举了websocket相关依赖）\"></a>一. 依赖（这里只列举了websocket相关依赖）</h1><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring webSocket依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-websocket<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-messaging --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-messaging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.websocket<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.websocket-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- websocket客户端 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.glassfish.tyrus.bundles<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tyrus-standalone-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"二-WebSocket服务端\"><a href=\"#二-WebSocket服务端\" class=\"headerlink\" title=\"二. WebSocket服务端\"></a>二. WebSocket服务端</h1><h4 id=\"2-1-核心代码\"><a href=\"#2-1-核心代码\" class=\"headerlink\" title=\"2-1. 核心代码\"></a>2-1. 核心代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.websocket.server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.CommonConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.session.SObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.websocket.configuration.HttpSessionConfigurator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.websocket.msg.Msg;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DESC</span> : &lt;p&gt;注解&#123;<span class=\"doctag\">@link</span> ServerEndpoint&#125;声明websocket 服务端&lt;/p&gt;&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> : 2017/5/25  9:43&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ServerEndpoint</span>(value = <span class=\"string\">\"/chat\"</span>, configurator = HttpSessionConfigurator.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> Logger logger = Logger.getLogger(WSServer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在线人数 线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> onlineCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接集合 userId =&gt; server 键值对 线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, WSServer&gt; map = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前会话的httpsession</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpSession httpSession;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> session websocket连接sesson</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> config  &#123;<span class=\"doctag\">@link</span> com.github.websocket.configuration.HttpSessionConfigurator&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DESC</span> &lt;p&gt;注解&#123;<span class=\"doctag\">@link</span> OnOpen&#125; 声明客户端连接进入的方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnOpen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session, EndpointConfig config)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 得到httpSession</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取session对象 SObject(这个就是java web登入后的保存的session对象，此处为用户信息，包含了userId)</span></span><br><span class=\"line\">        SObject user = (SObject) <span class=\"keyword\">this</span>.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.session = session;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将连接session对象存入map</span></span><br><span class=\"line\">        map.put(user.getUid(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 连接数+1</span></span><br><span class=\"line\">        addOnlineCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"有新的连接，当前连接数为：\"</span> + getOnlineCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&#123;<span class=\"doctag\">@link</span> OnClose&#125; 关闭连接&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnClose</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 获取当前连接信息 &#123;<span class=\"doctag\">@code</span> CommonConstant.USER_LOGIN_SESSION&#125; 为Http session 名</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        SObject user = (SObject) <span class=\"keyword\">this</span>.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 移除连接</span></span><br><span class=\"line\">        map.remove(user.getUid());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 连接数-1</span></span><br><span class=\"line\">        subOnlineCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"有一连接断开，当前连接数为：\"</span> + getOnlineCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&#123;<span class=\"doctag\">@link</span> OnMessage&#125; 消息监听处理方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 消息对象&#123;<span class=\"doctag\">@link</span> com.github.websocket.msg.Msg&#125;的JSON对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnMessage</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将消息转Msg对象</span></span><br><span class=\"line\">        Msg msg = JSON.parseObject(message, Msg.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//TODO 可以对msg做些处理...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据Msg消息对象获取定点发送人的userId</span></span><br><span class=\"line\">        WSServer _client = map.get(msg.getToUid());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定点发送</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(msg.getToUid())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != _client) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 是否连接判断</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_client.session.isOpen())</span><br><span class=\"line\">                    <span class=\"comment\">// 消息发送</span></span><br><span class=\"line\">                    _client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 群发</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(msg.getToUid())) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 群发已连接用户</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (WSServer client : map.values()) &#123;</span><br><span class=\"line\">                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&#123;<span class=\"doctag\">@link</span> OnError&#125; websocket系统异常处理&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnError</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        logger.error(t);</span><br><span class=\"line\">        t.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;系统主动推送 这是个静态方法在web启动后可在程序的其他合适的地方和时间调用，这就实现了系统的主动推送&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息对象&#123;<span class=\"doctag\">@link</span> com.github.websocket.msg.Msg&#125;的JSON对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pushBySys</span><span class=\"params\">(Msg msg)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//TODO 也可以实现定点推送</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 群发</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (WSServer client : map.values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取连接数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">getOnlineCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> WSServer.onlineCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增加连接数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addOnlineCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        WSServer.onlineCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 减少连接数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">subOnlineCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        WSServer.onlineCount--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-HttpSessionConfigurator类\"><a href=\"#2-2-HttpSessionConfigurator类\" class=\"headerlink\" title=\"2-2. HttpSessionConfigurator类\"></a>2-2. HttpSessionConfigurator类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.websocket.configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.HandshakeResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.HandshakeRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpointConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpointConfig.Configurator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DESC</span> : &lt;p&gt;讲http request的session 存入websocket的session内&lt;/p&gt;&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> : 2017/5/25  16:08&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpSessionConfigurator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Configurator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyHandshake</span><span class=\"params\">(ServerEndpointConfig sec,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                HandshakeRequest request, HandshakeResponse response)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取当前Http连接的session</span></span><br><span class=\"line\">        HttpSession httpSession = (HttpSession) request.getHttpSession();</span><br><span class=\"line\">        <span class=\"comment\">// 将http session信息注入websocket session</span></span><br><span class=\"line\">        sec.getUserProperties().put(HttpSession.class.getName(), httpSession);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-Msg消息体\"><a href=\"#2-3-Msg消息体\" class=\"headerlink\" title=\"2-3. Msg消息体\"></a>2-3. Msg消息体</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.websocket.msg;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DESC</span> : &lt;p&gt;WebSocket消息模型&lt;/p&gt;&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> : 2017/5/25  9:43&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Msg</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 推送人ID</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fromUid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定点推送人ID</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String toUid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定点推送单位ID</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String toOrgId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 消息体</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 推送时间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createDate = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 消息状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer flag;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Msg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Msg</span><span class=\"params\">(String fromUid, String toUid, String toOrgId, String data, Date createDate, Integer flag)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fromUid = fromUid;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toUid = toUid;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toOrgId = toOrgId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.createDate = createDate;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFromUid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fromUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFromUid</span><span class=\"params\">(String fromUid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fromUid = fromUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getToUid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> toUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setToUid</span><span class=\"params\">(String toUid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toUid = toUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getToOrgId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> toOrgId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setToOrgId</span><span class=\"params\">(String toOrgId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toOrgId = toOrgId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(String data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getCreateDate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCreateDate</span><span class=\"params\">(Date createDate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.createDate = createDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getFlag</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFlag</span><span class=\"params\">(Integer flag)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Msg&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"fromUid='\"</span> + fromUid + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", toUid='\"</span> + toUid + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", toOrgId='\"</span> + toOrgId + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", data='\"</span> + data + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", createDate=\"</span> + createDate +</span><br><span class=\"line\">                <span class=\"string\">\", flag=\"</span> + flag +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-客户端（HTML5）\"><a href=\"#三-客户端（HTML5）\" class=\"headerlink\" title=\"三. 客户端（HTML5）\"></a>三. 客户端（HTML5）</h1><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>WebSocket<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t// 创建websocket实例</span></span><br><span class=\"line\"><span class=\"undefined\">    var ws = new WebSocket(\"ws://localhost:8080/chat\");</span></span><br><span class=\"line\"><span class=\"undefined\">    /*</span></span><br><span class=\"line\"><span class=\"undefined\">     *监听三种状态的变化js会回调</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    ws.onopen = function(message) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t// 连接回调</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    ws.onclose = function(message) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t// 断开连接回调</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    ws.onmessage = function(message) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t// 消息监听</span></span><br><span class=\"line\"><span class=\"undefined\">        showMessage(message.data);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class=\"line\"><span class=\"undefined\">\twindow.onbeforeunload = function() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        ws.close();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    //关闭连接</span></span><br><span class=\"line\"><span class=\"undefined\">    function closeWebSocket() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        ws.close();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    //发送消息</span></span><br><span class=\"line\"><span class=\"undefined\">    function send() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        var input = document.getElementById(\"msg\");</span></span><br><span class=\"line\"><span class=\"undefined\">        var text = input.value;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t// 消息体JSON 对象 对应JAVA 的 Msg对象</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tvar data = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t// 定点发送给其他用户的userId</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\ttoUid : \"3d535429-5fcb-4490-bcf7-96fd84bb17b6\",</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tdata : text</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">        ws.send(JSON.stringify(data));</span></span><br><span class=\"line\"><span class=\"undefined\">        input.value = \"\";</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    function showMessage(message) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var text = document.createTextNode(JSON.parse(message).data);</span></span><br><span class=\"line\"><span class=\"undefined\">        var br = document.createElement(\"br\")</span></span><br><span class=\"line\"><span class=\"undefined\">        var div = document.getElementById(\"showChatMessage\");</span></span><br><span class=\"line\"><span class=\"undefined\">        div.appendChild(text);</span></span><br><span class=\"line\"><span class=\"undefined\">        div.appendChild(br);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        style=\"width: 600px; height: 240px; overflow-y: auto; border: 1px solid #333;\"</span><br><span class=\"line\">        id=\"show\"&gt;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"showChatMessage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"msg\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msg\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入聊天内容\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"发送\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBn\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sendBn\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"send()\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-依赖（这里只列举了websocket相关依赖）\"><a href=\"#一-依赖（这里只列举了websocket相关依赖）\" class=\"headerlink\" title=\"一. 依赖（这里只列举了websocket相关依赖）\"></a>一. 依赖（这里只列举了websocket相关依赖）</h1><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring webSocket依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-websocket<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-messaging --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-messaging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.websocket<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.websocket-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- websocket客户端 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.glassfish.tyrus.bundles<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tyrus-standalone-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"二-WebSocket服务端\"><a href=\"#二-WebSocket服务端\" class=\"headerlink\" title=\"二. WebSocket服务端\"></a>二. WebSocket服务端</h1><h4 id=\"2-1-核心代码\"><a href=\"#2-1-核心代码\" class=\"headerlink\" title=\"2-1. 核心代码\"></a>2-1. 核心代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.websocket.server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.CommonConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.session.SObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.websocket.configuration.HttpSessionConfigurator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.websocket.msg.Msg;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DESC</span> : &lt;p&gt;注解&#123;<span class=\"doctag\">@link</span> ServerEndpoint&#125;声明websocket 服务端&lt;/p&gt;&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> : 2017/5/25  9:43&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ServerEndpoint</span>(value = <span class=\"string\">\"/chat\"</span>, configurator = HttpSessionConfigurator.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WSServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> Logger logger = Logger.getLogger(WSServer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在线人数 线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> onlineCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接集合 userId =&gt; server 键值对 线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, WSServer&gt; map = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前会话的httpsession</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpSession httpSession;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> session websocket连接sesson</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> config  &#123;<span class=\"doctag\">@link</span> com.github.websocket.configuration.HttpSessionConfigurator&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DESC</span> &lt;p&gt;注解&#123;<span class=\"doctag\">@link</span> OnOpen&#125; 声明客户端连接进入的方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnOpen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session, EndpointConfig config)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 得到httpSession</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取session对象 SObject(这个就是java web登入后的保存的session对象，此处为用户信息，包含了userId)</span></span><br><span class=\"line\">        SObject user = (SObject) <span class=\"keyword\">this</span>.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.session = session;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将连接session对象存入map</span></span><br><span class=\"line\">        map.put(user.getUid(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 连接数+1</span></span><br><span class=\"line\">        addOnlineCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"有新的连接，当前连接数为：\"</span> + getOnlineCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&#123;<span class=\"doctag\">@link</span> OnClose&#125; 关闭连接&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnClose</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 获取当前连接信息 &#123;<span class=\"doctag\">@code</span> CommonConstant.USER_LOGIN_SESSION&#125; 为Http session 名</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        SObject user = (SObject) <span class=\"keyword\">this</span>.httpSession.getAttribute(CommonConstant.USER_LOGIN_SESSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 移除连接</span></span><br><span class=\"line\">        map.remove(user.getUid());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 连接数-1</span></span><br><span class=\"line\">        subOnlineCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"有一连接断开，当前连接数为：\"</span> + getOnlineCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&#123;<span class=\"doctag\">@link</span> OnMessage&#125; 消息监听处理方法&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 消息对象&#123;<span class=\"doctag\">@link</span> com.github.websocket.msg.Msg&#125;的JSON对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnMessage</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将消息转Msg对象</span></span><br><span class=\"line\">        Msg msg = JSON.parseObject(message, Msg.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//TODO 可以对msg做些处理...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据Msg消息对象获取定点发送人的userId</span></span><br><span class=\"line\">        WSServer _client = map.get(msg.getToUid());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定点发送</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(msg.getToUid())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != _client) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 是否连接判断</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_client.session.isOpen())</span><br><span class=\"line\">                    <span class=\"comment\">// 消息发送</span></span><br><span class=\"line\">                    _client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 群发</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(msg.getToUid())) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 群发已连接用户</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (WSServer client : map.values()) &#123;</span><br><span class=\"line\">                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;&#123;<span class=\"doctag\">@link</span> OnError&#125; websocket系统异常处理&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnError</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        logger.error(t);</span><br><span class=\"line\">        t.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;系统主动推送 这是个静态方法在web启动后可在程序的其他合适的地方和时间调用，这就实现了系统的主动推送&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息对象&#123;<span class=\"doctag\">@link</span> com.github.websocket.msg.Msg&#125;的JSON对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pushBySys</span><span class=\"params\">(Msg msg)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//TODO 也可以实现定点推送</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 群发</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (WSServer client : map.values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                client.session.getBasicRemote().sendText(JSON.toJSONString(msg));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取连接数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">getOnlineCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> WSServer.onlineCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增加连接数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addOnlineCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        WSServer.onlineCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 减少连接数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">subOnlineCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        WSServer.onlineCount--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-HttpSessionConfigurator类\"><a href=\"#2-2-HttpSessionConfigurator类\" class=\"headerlink\" title=\"2-2. HttpSessionConfigurator类\"></a>2-2. HttpSessionConfigurator类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.websocket.configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.HandshakeResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.HandshakeRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpointConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpointConfig.Configurator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DESC</span> : &lt;p&gt;讲http request的session 存入websocket的session内&lt;/p&gt;&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> : 2017/5/25  16:08&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpSessionConfigurator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Configurator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyHandshake</span><span class=\"params\">(ServerEndpointConfig sec,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                HandshakeRequest request, HandshakeResponse response)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取当前Http连接的session</span></span><br><span class=\"line\">        HttpSession httpSession = (HttpSession) request.getHttpSession();</span><br><span class=\"line\">        <span class=\"comment\">// 将http session信息注入websocket session</span></span><br><span class=\"line\">        sec.getUserProperties().put(HttpSession.class.getName(), httpSession);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-Msg消息体\"><a href=\"#2-3-Msg消息体\" class=\"headerlink\" title=\"2-3. Msg消息体\"></a>2-3. Msg消息体</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.websocket.msg;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> : Crab2Died&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DESC</span> : &lt;p&gt;WebSocket消息模型&lt;/p&gt;&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> : 2017/5/25  9:43&lt;/br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Msg</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 推送人ID</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fromUid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定点推送人ID</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String toUid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定点推送单位ID</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String toOrgId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 消息体</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 推送时间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createDate = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 消息状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer flag;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Msg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Msg</span><span class=\"params\">(String fromUid, String toUid, String toOrgId, String data, Date createDate, Integer flag)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fromUid = fromUid;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toUid = toUid;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toOrgId = toOrgId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.createDate = createDate;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFromUid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fromUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFromUid</span><span class=\"params\">(String fromUid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fromUid = fromUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getToUid</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> toUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setToUid</span><span class=\"params\">(String toUid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toUid = toUid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getToOrgId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> toOrgId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setToOrgId</span><span class=\"params\">(String toOrgId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toOrgId = toOrgId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(String data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getCreateDate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCreateDate</span><span class=\"params\">(Date createDate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.createDate = createDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getFlag</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFlag</span><span class=\"params\">(Integer flag)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Msg&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"fromUid='\"</span> + fromUid + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", toUid='\"</span> + toUid + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", toOrgId='\"</span> + toOrgId + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", data='\"</span> + data + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", createDate=\"</span> + createDate +</span><br><span class=\"line\">                <span class=\"string\">\", flag=\"</span> + flag +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-客户端（HTML5）\"><a href=\"#三-客户端（HTML5）\" class=\"headerlink\" title=\"三. 客户端（HTML5）\"></a>三. 客户端（HTML5）</h1><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>WebSocket<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t// 创建websocket实例</span></span><br><span class=\"line\"><span class=\"undefined\">    var ws = new WebSocket(\"ws://localhost:8080/chat\");</span></span><br><span class=\"line\"><span class=\"undefined\">    /*</span></span><br><span class=\"line\"><span class=\"undefined\">     *监听三种状态的变化js会回调</span></span><br><span class=\"line\"><span class=\"undefined\">     */</span></span><br><span class=\"line\"><span class=\"undefined\">    ws.onopen = function(message) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t// 连接回调</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    ws.onclose = function(message) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t// 断开连接回调</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    ws.onmessage = function(message) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t// 消息监听</span></span><br><span class=\"line\"><span class=\"undefined\">        showMessage(message.data);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class=\"line\"><span class=\"undefined\">\twindow.onbeforeunload = function() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        ws.close();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    //关闭连接</span></span><br><span class=\"line\"><span class=\"undefined\">    function closeWebSocket() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        ws.close();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    //发送消息</span></span><br><span class=\"line\"><span class=\"undefined\">    function send() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        var input = document.getElementById(\"msg\");</span></span><br><span class=\"line\"><span class=\"undefined\">        var text = input.value;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t// 消息体JSON 对象 对应JAVA 的 Msg对象</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tvar data = &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t// 定点发送给其他用户的userId</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\ttoUid : \"3d535429-5fcb-4490-bcf7-96fd84bb17b6\",</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\tdata : text</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t\t</span></span><br><span class=\"line\"><span class=\"undefined\">        ws.send(JSON.stringify(data));</span></span><br><span class=\"line\"><span class=\"undefined\">        input.value = \"\";</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    function showMessage(message) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var text = document.createTextNode(JSON.parse(message).data);</span></span><br><span class=\"line\"><span class=\"undefined\">        var br = document.createElement(\"br\")</span></span><br><span class=\"line\"><span class=\"undefined\">        var div = document.getElementById(\"showChatMessage\");</span></span><br><span class=\"line\"><span class=\"undefined\">        div.appendChild(text);</span></span><br><span class=\"line\"><span class=\"undefined\">        div.appendChild(br);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        style=\"width: 600px; height: 240px; overflow-y: auto; border: 1px solid #333;\"</span><br><span class=\"line\">        id=\"show\"&gt;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"showChatMessage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"msg\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"msg\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"输入聊天内容\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"发送\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sendBn\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sendBn\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"send()\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjpmk9vhv0000uoil2m1d7qkv","category_id":"cjpmk9vib0002uoiluv70t11s","_id":"cjpmk9vj4000buoil8hpfenw9"},{"post_id":"cjpmk9vi50001uoilbuu7i7h4","category_id":"cjpmk9viz0007uoilui2dlkug","_id":"cjpmk9vje000guoilo77gna8w"},{"post_id":"cjpmk9vj7000euoilgbs4wvjs","category_id":"cjpmk9vj5000cuoilkr64uqj6","_id":"cjpmk9vjm000muoilrvah8x2k"},{"post_id":"cjpmk9vif0004uoil9hlqlkkw","category_id":"cjpmk9vj5000cuoilkr64uqj6","_id":"cjpmk9vjs000ruoilqzm7t0xg"},{"post_id":"cjpmk9vjc000fuoilaoxxibna","category_id":"cjpmk9vj5000cuoilkr64uqj6","_id":"cjpmk9vju000uuoil4fnz9rad"},{"post_id":"cjpmk9vim0005uoilw6hejokr","category_id":"cjpmk9vj5000cuoilkr64uqj6","_id":"cjpmk9vjx000yuoil8rpyl69k"},{"post_id":"cjpmk9viy0006uoil47yfdaqc","category_id":"cjpmk9vj5000cuoilkr64uqj6","_id":"cjpmk9vk10011uoilnupshob8"},{"post_id":"cjpmk9vj00009uoilz5ah95ie","category_id":"cjpmk9vj5000cuoilkr64uqj6","_id":"cjpmk9vk30014uoilcouxse8h"},{"post_id":"cjpmk9vj2000auoiljv2webgv","category_id":"cjpmk9vj5000cuoilkr64uqj6","_id":"cjpmk9vk40017uoil3pg9k3vi"},{"post_id":"cjpmk9vji000juoilqbt80q5h","category_id":"cjpmk9vk20013uoil4c9xsbnz","_id":"cjpmk9vk6001duoilwi20f02k"},{"post_id":"cjpmk9vjl000luoil4d17urqt","category_id":"cjpmk9vk20013uoil4c9xsbnz","_id":"cjpmk9vk9001huoiln918uoae"},{"post_id":"cjpmk9vjq000quoilk9cxvn03","category_id":"cjpmk9vk6001cuoilvzdqwt3d","_id":"cjpmk9vkb001luoilfaoa1xka"},{"post_id":"cjpmk9vjt000tuoilkz1l7c8g","category_id":"cjpmk9vk9001iuoilmn6tdzmv","_id":"cjpmk9vkd001quoilb3u0bmc3"},{"post_id":"cjpmk9vjw000xuoilqpfhuxge","category_id":"cjpmk9vkd001muoilek9z6r8v","_id":"cjpmk9vkf001uuoilt4rlkarr"}],"PostTag":[{"post_id":"cjpmk9vhv0000uoil2m1d7qkv","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vjk000kuoilxj82wi8c"},{"post_id":"cjpmk9vhv0000uoil2m1d7qkv","tag_id":"cjpmk9viz0008uoil1b0u04fo","_id":"cjpmk9vjm000nuoil98aok64p"},{"post_id":"cjpmk9vhv0000uoil2m1d7qkv","tag_id":"cjpmk9vj5000duoilaqh8chy6","_id":"cjpmk9vjs000suoildv8ta890"},{"post_id":"cjpmk9vi50001uoilbuu7i7h4","tag_id":"cjpmk9vjg000iuoilhyxcxnyg","_id":"cjpmk9vjv000vuoil4oo1xahq"},{"post_id":"cjpmk9vif0004uoil9hlqlkkw","tag_id":"cjpmk9vjq000puoill2me0hhv","_id":"cjpmk9vk40016uoiltrnlkw9u"},{"post_id":"cjpmk9vif0004uoil9hlqlkkw","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vk50019uoil0fkxn37y"},{"post_id":"cjpmk9vif0004uoil9hlqlkkw","tag_id":"cjpmk9vk10012uoilt83ybq10","_id":"cjpmk9vk5001buoilsump6sfg"},{"post_id":"cjpmk9vim0005uoilw6hejokr","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vk7001euoilw7ntwjjw"},{"post_id":"cjpmk9vim0005uoilw6hejokr","tag_id":"cjpmk9vk30015uoilx5u0qmf1","_id":"cjpmk9vk9001guoilp7wtt321"},{"post_id":"cjpmk9viy0006uoil47yfdaqc","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vkb001kuoildpgv43rm"},{"post_id":"cjpmk9viy0006uoil47yfdaqc","tag_id":"cjpmk9vk5001auoilpue8efjo","_id":"cjpmk9vkd001nuoil3e29io29"},{"post_id":"cjpmk9viy0006uoil47yfdaqc","tag_id":"cjpmk9vk8001fuoilyjm09y03","_id":"cjpmk9vkd001puoily6q85gn8"},{"post_id":"cjpmk9vj00009uoilz5ah95ie","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vke001ruoildrk9x4rb"},{"post_id":"cjpmk9vj00009uoilz5ah95ie","tag_id":"cjpmk9vka001juoiljqfp5byr","_id":"cjpmk9vkf001tuoil5ygmlptj"},{"post_id":"cjpmk9vj2000auoiljv2webgv","tag_id":"cjpmk9vjq000puoill2me0hhv","_id":"cjpmk9vkh001wuoil1e02lh3n"},{"post_id":"cjpmk9vj2000auoiljv2webgv","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vkh001xuoil28hy3smy"},{"post_id":"cjpmk9vj2000auoiljv2webgv","tag_id":"cjpmk9vke001suoiljt4vd81m","_id":"cjpmk9vki001zuoilb8d4doxx"},{"post_id":"cjpmk9vj7000euoilgbs4wvjs","tag_id":"cjpmk9vjq000puoill2me0hhv","_id":"cjpmk9vkj0021uoilp62n60kj"},{"post_id":"cjpmk9vj7000euoilgbs4wvjs","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vkj0022uoilw3q140v2"},{"post_id":"cjpmk9vj7000euoilgbs4wvjs","tag_id":"cjpmk9vkh001yuoilm03w0odg","_id":"cjpmk9vkm0024uoilnsnmucqp"},{"post_id":"cjpmk9vjc000fuoilaoxxibna","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vkn0025uoilornhyhan"},{"post_id":"cjpmk9vjc000fuoilaoxxibna","tag_id":"cjpmk9vki0020uoilhlo4tlbq","_id":"cjpmk9vko0027uoil9lqqs07e"},{"post_id":"cjpmk9vji000juoilqbt80q5h","tag_id":"cjpmk9vkj0023uoil7qoxflam","_id":"cjpmk9vkp0029uoildcuovdtv"},{"post_id":"cjpmk9vji000juoilqbt80q5h","tag_id":"cjpmk9vkn0026uoil58poad9q","_id":"cjpmk9vkp002auoilp0k9xy2y"},{"post_id":"cjpmk9vjl000luoil4d17urqt","tag_id":"cjpmk9vkj0023uoil7qoxflam","_id":"cjpmk9vkq002duoil1j2d4p9k"},{"post_id":"cjpmk9vjl000luoil4d17urqt","tag_id":"cjpmk9vkp002buoil6uf6ruvg","_id":"cjpmk9vkq002euoilxy7fgeav"},{"post_id":"cjpmk9vjq000quoilk9cxvn03","tag_id":"cjpmk9vkq002cuoil3t3i28bh","_id":"cjpmk9vks002huoilt3123wxx"},{"post_id":"cjpmk9vjq000quoilk9cxvn03","tag_id":"cjpmk9vkr002fuoilz5p2flcj","_id":"cjpmk9vks002iuoil7eoqgj55"},{"post_id":"cjpmk9vjt000tuoilkz1l7c8g","tag_id":"cjpmk9vkr002guoilke7t8rur","_id":"cjpmk9vkt002luoildrj2fbs8"},{"post_id":"cjpmk9vjt000tuoilkz1l7c8g","tag_id":"cjpmk9vks002juoilnjtsv5oy","_id":"cjpmk9vkt002muoilvgxmn8bm"},{"post_id":"cjpmk9vjw000xuoilqpfhuxge","tag_id":"cjpmk9vie0003uoilhrs815od","_id":"cjpmk9vkv002ouoiljkrapdm4"},{"post_id":"cjpmk9vjw000xuoilqpfhuxge","tag_id":"cjpmk9vkt002kuoilpg67swkj","_id":"cjpmk9vkv002puoilrs6yel1o"},{"post_id":"cjpmk9vjw000xuoilqpfhuxge","tag_id":"cjpmk9vku002nuoil07ddsb6s","_id":"cjpmk9vkw002quoilirok5lob"}],"Tag":[{"name":"Java","_id":"cjpmk9vie0003uoilhrs815od"},{"name":"Interview","_id":"cjpmk9viz0008uoil1b0u04fo"},{"name":"Experience","_id":"cjpmk9vj5000duoilaqh8chy6"},{"name":"Database","_id":"cjpmk9vjg000iuoilhyxcxnyg"},{"name":"JVM","_id":"cjpmk9vjq000puoill2me0hhv"},{"name":"Classloader","_id":"cjpmk9vk10012uoilt83ybq10"},{"name":"Collection","_id":"cjpmk9vk30015uoilx5u0qmf1"},{"name":"JIT","_id":"cjpmk9vk5001auoilpue8efjo"},{"name":"Optimize","_id":"cjpmk9vk8001fuoilyjm09y03"},{"name":"Concurrent","_id":"cjpmk9vka001juoiljqfp5byr"},{"name":"GC","_id":"cjpmk9vke001suoiljt4vd81m"},{"name":"JMM","_id":"cjpmk9vkh001yuoilm03w0odg"},{"name":"Java Monitor","_id":"cjpmk9vki0020uoilhlo4tlbq"},{"name":"Big Data","_id":"cjpmk9vkj0023uoil7qoxflam"},{"name":"Hadoop","_id":"cjpmk9vkn0026uoil58poad9q"},{"name":"HBase","_id":"cjpmk9vkp002buoil6uf6ruvg"},{"name":"Cache","_id":"cjpmk9vkq002cuoil3t3i28bh"},{"name":"Redis","_id":"cjpmk9vkr002fuoilz5p2flcj"},{"name":"REST","_id":"cjpmk9vkr002guoilke7t8rur"},{"name":"HTTP","_id":"cjpmk9vks002juoilnjtsv5oy"},{"name":"Spring","_id":"cjpmk9vkt002kuoilpg67swkj"},{"name":"Websocket","_id":"cjpmk9vku002nuoil07ddsb6s"}]}}