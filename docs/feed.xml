<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://crab2died.github.io/jekyll-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://crab2died.github.io/jekyll-blog/" rel="alternate" type="text/html" /><updated>2018-06-14T12:48:02+08:00</updated><id>https://crab2died.github.io/jekyll-blog/</id><title type="html">Crab2Died Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">JAVA性能监控与调优</title><link href="https://crab2died.github.io/jekyll-blog/java/2018/06/14/java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7.html" rel="alternate" type="text/html" title="JAVA性能监控与调优" /><published>2018-06-14T12:45:27+08:00</published><updated>2018-06-14T12:45:27+08:00</updated><id>https://crab2died.github.io/jekyll-blog/java/2018/06/14/java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7</id><content type="html" xml:base="https://crab2died.github.io/jekyll-blog/java/2018/06/14/java%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7.html">&lt;h1 id=&quot;java性能监控与调优&quot;&gt;JAVA性能监控与调优&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;一-jpsjvm-process-status-tool&quot;&gt;一. jps(JVM Process Status Tool)&lt;/h2&gt;
&lt;h3 id=&quot;1-介绍&quot;&gt;1. 介绍&lt;/h3&gt;
&lt;p&gt;类似UNIX的ps命令，列出虚拟机正在运行的进程信息&lt;/p&gt;
&lt;h3 id=&quot;2-参数&quot;&gt;2. 参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;-q: 只输出进程ID&lt;/li&gt;
  &lt;li&gt;-m: 输出主类启动时的参数&lt;/li&gt;
  &lt;li&gt;-l: 输出主类全名，如果是jar则输出jar路径&lt;/li&gt;
  &lt;li&gt;-v: 输出虚拟机启动时的JVM参数&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二-jstatjvm-statistics-monitoring-tool&quot;&gt;二. jstat(JVM Statistics Monitoring Tool)&lt;/h2&gt;
&lt;h3 id=&quot;1-介绍-1&quot;&gt;1. 介绍&lt;/h3&gt;
&lt;p&gt;用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、 内存、 垃圾收集、 JIT编译等运行数据&lt;/p&gt;
&lt;h3 id=&quot;2-格式&quot;&gt;2. 格式&lt;/h3&gt;
&lt;p&gt;jstat[option vmid[interval[s|ms][count]]]
   如&lt;code class=&quot;highlighter-rouge&quot;&gt;jstat -class 14232(PID) 520(采样率) 4(采样次数)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-参数&quot;&gt;3. 参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;-class: 监控类加载数量、卸载数量、总空间以及加载所用时间&lt;/li&gt;
  &lt;li&gt;-gc: 监控java堆状态，包括Eden区，2个survivor区，老年代，永久代的容量、已用空间、GC时间合计等&lt;/li&gt;
  &lt;li&gt;-gccapacity: 与-gc基本相同，但主要关注java堆各个区域使用到的最大、最小空间&lt;/li&gt;
  &lt;li&gt;-gcutil: 与-gc基本相同，但主要关注java堆各个区域使用占比&lt;/li&gt;
  &lt;li&gt;-gccase: 与-gcutil一样，但会额外输出上一次GC的原因&lt;/li&gt;
  &lt;li&gt;-gcnew: 监控新生代GC状态&lt;/li&gt;
  &lt;li&gt;-gcnewcapacity: 与-gcnew基本相同，但主要关注的是使用到的最大、最小空间&lt;/li&gt;
  &lt;li&gt;-gcold: 监控老年代GC状态&lt;/li&gt;
  &lt;li&gt;-gcoldcapacity: 与-gcold基本相同，但主要关注的是使用道的最大、最小空间&lt;/li&gt;
  &lt;li&gt;-gcpermcapacity: 输出永久带使用到的最大、最小空间&lt;/li&gt;
  &lt;li&gt;-compiler: 输出JIT编译过的方法、耗时等信息&lt;/li&gt;
  &lt;li&gt;-printcompilation: 输出已被JIT编译过的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;三-jinfoconfiguration-info-for-java&quot;&gt;三. jinfo(Configuration Info for Java)&lt;/h2&gt;
&lt;h3 id=&quot;1-介绍-2&quot;&gt;1. 介绍&lt;/h3&gt;
&lt;p&gt;实时地查看和调整虚拟机各项参数&lt;/p&gt;
&lt;h3 id=&quot;2-格式-1&quot;&gt;2. 格式&lt;/h3&gt;
&lt;p&gt;jinfo [option] pid 如 &lt;code class=&quot;highlighter-rouge&quot;&gt;jinfo -flags 14232&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-参数-1&quot;&gt;3. 参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;-flag &lt;name&gt;: to print the value of the named VM flag(输出JVM参数名为name的参数信息)&lt;/name&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;-flag [+&lt;/td&gt;
          &lt;td&gt;-]&lt;name&gt;: to enable or disable the named VM flag(添加或除去JVM参数名为name的参数)&lt;/name&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;-flag &lt;name&gt;=&lt;value&gt;: to set the named VM flag to the given value(设置JVM参数，入-Xmx=1024m)&lt;/value&gt;&lt;/name&gt;&lt;/li&gt;
  &lt;li&gt;-flags: to print VM flags(输出JVM启动参数信息)&lt;/li&gt;
  &lt;li&gt;-sysprops: to print Java system properties(输出&lt;code class=&quot;highlighter-rouge&quot;&gt;System.getProperties()&lt;/code&gt;信息)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;四-jmapmemory-map-for-java&quot;&gt;四. jmap(Memory Map for Java)&lt;/h2&gt;
&lt;h3 id=&quot;1-介绍-3&quot;&gt;1. 介绍&lt;/h3&gt;
&lt;p&gt;命令用于生成堆转储快照(一般称为heapdump或dump文件)&lt;br /&gt;
   其他生成dump文件方式:通过参数&lt;code class=&quot;highlighter-rouge&quot;&gt;-XX：+HeapDumpOnOutOfMemoryError&lt;/code&gt;OOM时生成、&lt;code class=&quot;highlighter-rouge&quot;&gt;-XX：+HeapDumpOnCtrlBreak&lt;/code&gt;通过
   [Ctrl]+[Break]键让虚拟机生成dump文件、或者Linux通过命令kill -3 pid也能拿到dump&lt;/p&gt;
&lt;h3 id=&quot;2-格式-2&quot;&gt;2. 格式&lt;/h3&gt;
&lt;p&gt;jmap [option] vmid&lt;/p&gt;
&lt;h3 id=&quot;3-参数-2&quot;&gt;3. 参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;-dump: 生成java堆转存快照, 格式 -dump:[live, ],format=b,file=&lt;filename&gt;, live表示是否只导出存活的对象&lt;/filename&gt;&lt;/li&gt;
  &lt;li&gt;-finalizerinfo: 显示在F-Queen里面等待Finalizer线程执行finalize()方法的对象，只在Linux/Solaris平台有效&lt;/li&gt;
  &lt;li&gt;-heap: 显示java堆详细信息，如使用哪种GC回收器，参数配置、分代状况等信息，只在Linux/Solaris平台有效&lt;/li&gt;
  &lt;li&gt;-histo: 显示堆中对象统计信息，包括类、实例数量及合计容量等&lt;/li&gt;
  &lt;li&gt;-permstat: 以ClassLoader为统计口径显示永久带内存状态，只在Linux/Solaris平台有效&lt;/li&gt;
  &lt;li&gt;-F: 当-dump没响应时，使用-F强制生成dump文件，只在Linux/Solaris平台有效&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;五-jhatjvm-heap-analysis-tool&quot;&gt;五. jhat(JVM Heap Analysis Tool)&lt;/h2&gt;
&lt;h3 id=&quot;1-介绍-4&quot;&gt;1. 介绍&lt;/h3&gt;
&lt;p&gt;分析jmap生成的堆转储快照(dump文件)&lt;/p&gt;
&lt;h3 id=&quot;2-格式-3&quot;&gt;2. 格式&lt;/h3&gt;
&lt;p&gt;jhat [-port 7001] &lt;dumpfile&gt;&lt;/dumpfile&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-参数-3&quot;&gt;3. 参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;-port: server端口，可通过host:port访问&lt;/li&gt;
  &lt;li&gt;
    &lt;file&gt;: dump文件
&lt;/file&gt;
  &lt;/li&gt;
  &lt;li&gt;-J&lt;flag&gt;: 运行参数,如`-J-mx512m`&lt;/flag&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;六-jstackstack-trace-for-java&quot;&gt;六. jstack(Stack Trace for Java)&lt;/h2&gt;
&lt;h3 id=&quot;1-介绍-5&quot;&gt;1. 介绍&lt;/h3&gt;
&lt;p&gt;用于生成虚拟机当前时刻的线程快照(一般称为threaddump或者javacore文件)&lt;br /&gt;
   线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，
   如线程间死锁、 死循环、 请求外部资源导致的长时间等待等都是导致线程长时间停顿的常见原因。 线程出现停顿的时候通过
   jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源&lt;/p&gt;
&lt;h3 id=&quot;2-格式-4&quot;&gt;2. 格式&lt;/h3&gt;
&lt;p&gt;jstack [option] vmid 如&lt;code class=&quot;highlighter-rouge&quot;&gt;jstack -l 14232&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-参数-4&quot;&gt;3. 参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;-F: 当正常请求无响应时，强制输出线程堆栈&lt;/li&gt;
  &lt;li&gt;-l: 除堆栈外，显示关于锁的附加信息&lt;/li&gt;
  &lt;li&gt;-m: 如果调用到本地方法时，显示C/C++堆栈信息
    &lt;h3 id=&quot;4-日志分析&quot;&gt;4. 日志分析&lt;/h3&gt;
    &lt;ol&gt;
      &lt;li&gt;线程分为New、Runnable、Running、Waiting、Timed_Waiting、Blocked、Dead等状态&lt;br /&gt;
    * New: 当线程对象创建时存在的状态，此时线程不可能执行；&lt;br /&gt;
    * Runnable：当调用thread.start()后，线程变成为Runnable状态。只要得到CPU，就可以执行；&lt;br /&gt;
    * Running：线程正在执行；&lt;br /&gt;
    * Waiting：执行thread.join()或在锁对象调用obj.wait()等情况就会进该状态，表明线程正处于等待某个资源或条件发生来唤醒自己；&lt;br /&gt;
    * Timed_Waiting：执行Thread.sleep(long)、thread.join(long)或obj.wait(long)等就会进该状态，与Waiting的区别在于
 Timed_Waiting的等待有时间限制；&lt;br /&gt;
    * Blocked：如果进入同步方法或同步代码块，没有获取到锁，则会进入该状态；&lt;br /&gt;
    * Dead：线程执行完毕，或者抛出了未捕获的异常之后，会进入dead状态，表示该线程结束&lt;/li&gt;
      &lt;li&gt;其次，对于jstack日志，我们要着重关注如下关键信息&lt;br /&gt;
    * Deadlock：表示有死锁&lt;br /&gt;
    * Waiting on condition：等待某个资源或条件发生来唤醒自己。具体需要结合jstacktrace来分析，比如线程正在sleep，网络读写繁忙而等待&lt;br /&gt;
    * Blocked：阻塞&lt;br /&gt;
    * Waiting on monitor entry：在等待获取锁&lt;br /&gt;
    * in Object.wait()：获取锁后又执行obj.wait()放弃锁&lt;br /&gt;
    * 对于Waiting on monitor entry 和 inObject.wait()的详细描述：Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，
 它可以看成是对象或者Class的锁。每一个对象都有，也仅有一个 monitor。从下图中可以看出，每个 Monitor在某个时刻，只能被一个
 线程拥有，该线程就是 “Active Thread”，而其它线程都是 “Waiting Thread”，分别在两个队列 “Entry Set”和 “Wait Set”里面
 等候。在 “Entry Set”中等待的线程状态是”Waiting for monitor entry”，而在 “Wait Set”中等待的线程状态是 “in Object.wait()”
        &lt;h3 id=&quot;5-附录&quot;&gt;5. 附录&lt;/h3&gt;
        &lt;p&gt;在JDK1.5中在&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Thread&lt;/code&gt;类中新增了&lt;code class=&quot;highlighter-rouge&quot;&gt;getAllStackTraces()&lt;/code&gt;方法获取虚拟机所有的线程&lt;code class=&quot;highlighter-rouge&quot;&gt;StackTraceElement&lt;/code&gt;
   对象，实现了大部分jstack功能，实际项目中可页面展示&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;七-visualvmall-in-one-java-troubleshooting-tool&quot;&gt;七. VisualVM(All-in-One Java Troubleshooting Tool)&lt;/h2&gt;
&lt;h3 id=&quot;介绍&quot;&gt;介绍&lt;/h3&gt;
&lt;p&gt;是到目前为止随JDK发布的功能最强大的运行监视和故障处理程序，并且可以预见在未来一段时间内都是官方主力发展的虚拟机故障处理工具。
  官方在VisualVM的软件说明中写上了“All-in-One”的描述字样，预示着它除了运行监视、 故障处理外，还提供了很多其他方面的功能。&lt;/p&gt;
&lt;h3 id=&quot;远程监控&quot;&gt;远程监控&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1、远程服务器启动jstatd服务
创建配置文件jstatd.policy内容为
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    grant codebase &quot;file:${java.home}/../lib/tools.jar&quot; {  
       permission java.security.AllPermission;  
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;启动服务:&lt;code class=&quot;highlighter-rouge&quot;&gt;jstatd -J-Djava.security.policy=jstatd.policy -p 8701&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;2、启动应用参数
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    -Dcom.sun.management.jmxremote=true 
    -Dcom.sun.management.jmxremote.port=9090 
    -Dcom.sun.management.jmxremote.ssl=false 
    -Dcom.sun.management.jmxremote.authenticate=false
    -Djava.rmi.server.hostname=192.168.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;3、启动jvisualvm,操作步骤:&lt;br /&gt;
远程 -&amp;gt; 添加远程主机 -&amp;gt; 添加JMX链接&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;八-案列&quot;&gt;八. 案列&lt;/h2&gt;
&lt;h3 id=&quot;1-利用jstack调试线程堆栈信息&quot;&gt;1. 利用jstack调试线程堆栈信息&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;jps得到PID，如14232&lt;/li&gt;
  &lt;li&gt;查看进程PID的线程耗时情况,命令&lt;code class=&quot;highlighter-rouge&quot;&gt;ps -Lfp pid&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;top -Hp pid&lt;/code&gt;找到最耗时的线程ID 如14253&lt;/li&gt;
  &lt;li&gt;获取线程ID16进制编码&lt;code class=&quot;highlighter-rouge&quot;&gt;print &quot;%x\n&quot; 14253&lt;/code&gt;为37ad&lt;/li&gt;
  &lt;li&gt;用jstack获取线程堆栈信息&lt;code class=&quot;highlighter-rouge&quot;&gt;jstack 14232 |grep 37ad&lt;/code&gt;打印如下信息:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007f772c00f800 nid=0x37ad waiting on condition &lt;/code&gt;&lt;br /&gt;
通过该日志分析表示该线程在等待某个资源来唤醒&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Crab2Died</name></author><category term="java" /><category term="监控工具" /><summary type="html">JAVA性能监控与调优 一. jps(JVM Process Status Tool) 1. 介绍 类似UNIX的ps命令，列出虚拟机正在运行的进程信息 2. 参数 -q: 只输出进程ID -m: 输出主类启动时的参数 -l: 输出主类全名，如果是jar则输出jar路径 -v: 输出虚拟机启动时的JVM参数</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://crab2died.github.io/jekyll-blog/java/2018/06/13/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-06-13T21:54:27+08:00</published><updated>2018-06-13T21:54:27+08:00</updated><id>https://crab2died.github.io/jekyll-blog/java/2018/06/13/welcome-to-jekyll</id><content type="html" xml:base="https://crab2died.github.io/jekyll-blog/java/2018/06/13/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Crab2Died</name></author><category term="tag1" /><category term="tag2" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>